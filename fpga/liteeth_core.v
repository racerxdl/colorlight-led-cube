//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (1e605fb2) on 2021-03-19 22:05:05
//--------------------------------------------------------------------------------
module liteeth_core(
	input wire sys_clock,
	input wire sys_reset,
	output wire rgmii_eth_clocks_tx,
	input wire rgmii_eth_clocks_rx,
	output wire rgmii_eth_rst_n,
	input wire rgmii_eth_int_n,
	inout wire rgmii_eth_mdio,
	output wire rgmii_eth_mdc,
	input wire rgmii_eth_rx_ctl,
	input wire [3:0] rgmii_eth_rx_data,
	output wire rgmii_eth_tx_ctl,
	output wire [3:0] rgmii_eth_tx_data,
	input wire udp_sink_valid,
	input wire udp_sink_last,
	output wire udp_sink_ready,
	input wire [15:0] udp_sink_src_port,
	input wire [15:0] udp_sink_dst_port,
	input wire [31:0] udp_sink_ip_address,
	input wire [15:0] udp_sink_length,
	input wire [31:0] udp_sink_data,
	input wire [3:0] udp_sink_error,
	output wire udp_source_valid,
	output wire udp_source_last,
	input wire udp_source_ready,
	output wire [15:0] udp_source_src_port,
	output wire [15:0] udp_source_dst_port,
	output wire [31:0] udp_source_ip_address,
	output wire [15:0] udp_source_length,
	output wire [31:0] udp_source_data,
	output wire [3:0] udp_source_error
);

reg udpcore_reset_storage = 1'd0;
reg udpcore_reset_re = 1'd0;
reg [31:0] udpcore_scratch_storage = 32'd305419896;
reg udpcore_scratch_re = 1'd0;
wire [31:0] udpcore_bus_errors_status;
wire udpcore_bus_errors_we;
wire udpcore_reset;
reg udpcore_bus_error = 1'd0;
reg [31:0] udpcore_bus_errors = 32'd0;
reg [13:0] udpcore_adr = 14'd0;
reg udpcore_we = 1'd0;
wire [7:0] udpcore_dat_w;
wire [7:0] udpcore_dat_r;
reg [29:0] udpcore_wishbone_adr = 30'd0;
reg [31:0] udpcore_wishbone_dat_w = 32'd0;
wire [31:0] udpcore_wishbone_dat_r;
reg [3:0] udpcore_wishbone_sel = 4'd0;
reg udpcore_wishbone_cyc = 1'd0;
reg udpcore_wishbone_stb = 1'd0;
reg udpcore_wishbone_ack = 1'd0;
reg udpcore_wishbone_we = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
reg ethphy_reset_storage = 1'd0;
reg ethphy_reset_re = 1'd0;
wire eth_rx_clk;
wire eth_rx_rst;
wire eth_tx_clk;
wire eth_tx_rst;
wire ethphy_eth_tx_clk_o;
wire ethphy_reset;
wire ethphy_sink_valid;
wire ethphy_sink_ready;
wire ethphy_sink_first;
wire ethphy_sink_last;
wire [7:0] ethphy_sink_payload_data;
wire ethphy_sink_payload_last_be;
wire ethphy_sink_payload_error;
wire ethphy_tx_ctl_oddrx1f;
wire [3:0] ethphy_tx_data_oddrx1f;
reg ethphy_liteethphyrgmiirx_source_valid = 1'd0;
wire ethphy_liteethphyrgmiirx_source_ready;
reg ethphy_liteethphyrgmiirx_source_first = 1'd0;
wire ethphy_liteethphyrgmiirx_source_last;
reg [7:0] ethphy_liteethphyrgmiirx_source_payload_data = 8'd0;
reg ethphy_liteethphyrgmiirx_source_payload_last_be = 1'd0;
reg ethphy_liteethphyrgmiirx_source_payload_error = 1'd0;
reg ethphy_liteethphyrgmiirx_link_status = 1'd0;
reg ethphy_liteethphyrgmiirx_clock_speed = 1'd0;
reg ethphy_liteethphyrgmiirx_duplex_status = 1'd0;
reg [2:0] ethphy_liteethphyrgmiirx_status = 3'd0;
wire ethphy_liteethphyrgmiirx_we;
wire ethphy_liteethphyrgmiirx_rx_ctl_delayf;
wire [1:0] ethphy_liteethphyrgmiirx_rx_ctl;
reg [1:0] ethphy_liteethphyrgmiirx_rx_ctl_reg = 2'd0;
wire [3:0] ethphy_liteethphyrgmiirx_rx_data_delayf;
wire [7:0] ethphy_liteethphyrgmiirx_rx_data;
reg [7:0] ethphy_liteethphyrgmiirx_rx_data_reg = 8'd0;
reg [1:0] ethphy_liteethphyrgmiirx_rx_ctl_reg_d = 2'd0;
wire ethphy_liteethphyrgmiirx_last;
wire ethphy_mdio_mdc;
wire ethphy_mdio_oe;
wire ethphy_mdio_w;
reg [2:0] ethphy_mdio_storage = 3'd0;
reg ethphy_mdio_re = 1'd0;
reg ethphy_mdio_r = 1'd0;
reg ethphy_mdio_status = 1'd0;
wire ethphy_mdio_we;
wire ethphy_mdio_data_w;
wire ethphy_mdio_data_oe;
wire ethphy_mdio_data_r;
wire mac_tx_gap_inserter_sink_valid;
reg mac_tx_gap_inserter_sink_ready = 1'd0;
wire mac_tx_gap_inserter_sink_first;
wire mac_tx_gap_inserter_sink_last;
wire [7:0] mac_tx_gap_inserter_sink_payload_data;
wire mac_tx_gap_inserter_sink_payload_last_be;
wire mac_tx_gap_inserter_sink_payload_error;
reg mac_tx_gap_inserter_source_valid = 1'd0;
wire mac_tx_gap_inserter_source_ready;
reg mac_tx_gap_inserter_source_first = 1'd0;
reg mac_tx_gap_inserter_source_last = 1'd0;
reg [7:0] mac_tx_gap_inserter_source_payload_data = 8'd0;
reg mac_tx_gap_inserter_source_payload_last_be = 1'd0;
reg mac_tx_gap_inserter_source_payload_error = 1'd0;
reg [3:0] mac_tx_gap_inserter_counter = 4'd0;
reg [31:0] mac_preamble_errors_status = 32'd0;
reg [31:0] mac_crc_errors_status = 32'd0;
wire mac_preamble_inserter_sink_valid;
reg mac_preamble_inserter_sink_ready = 1'd0;
wire mac_preamble_inserter_sink_first;
wire mac_preamble_inserter_sink_last;
wire [7:0] mac_preamble_inserter_sink_payload_data;
wire mac_preamble_inserter_sink_payload_last_be;
wire mac_preamble_inserter_sink_payload_error;
reg mac_preamble_inserter_source_valid = 1'd0;
wire mac_preamble_inserter_source_ready;
reg mac_preamble_inserter_source_first = 1'd0;
reg mac_preamble_inserter_source_last = 1'd0;
reg [7:0] mac_preamble_inserter_source_payload_data = 8'd0;
wire mac_preamble_inserter_source_payload_last_be;
reg mac_preamble_inserter_source_payload_error = 1'd0;
reg [63:0] mac_preamble_inserter_preamble = 64'd15372286728091293013;
reg [2:0] mac_preamble_inserter_count = 3'd0;
wire mac_preamble_checker_sink_valid;
reg mac_preamble_checker_sink_ready = 1'd0;
wire mac_preamble_checker_sink_first;
wire mac_preamble_checker_sink_last;
wire [7:0] mac_preamble_checker_sink_payload_data;
wire mac_preamble_checker_sink_payload_last_be;
wire mac_preamble_checker_sink_payload_error;
reg mac_preamble_checker_source_valid = 1'd0;
wire mac_preamble_checker_source_ready;
reg mac_preamble_checker_source_first = 1'd0;
reg mac_preamble_checker_source_last = 1'd0;
wire [7:0] mac_preamble_checker_source_payload_data;
wire mac_preamble_checker_source_payload_last_be;
reg mac_preamble_checker_source_payload_error = 1'd0;
reg mac_preamble_checker_error = 1'd0;
wire mac_crc32_inserter_sink_valid;
reg mac_crc32_inserter_sink_ready = 1'd0;
wire mac_crc32_inserter_sink_first;
wire mac_crc32_inserter_sink_last;
wire [7:0] mac_crc32_inserter_sink_payload_data;
wire mac_crc32_inserter_sink_payload_last_be;
wire mac_crc32_inserter_sink_payload_error;
reg mac_crc32_inserter_source_valid = 1'd0;
wire mac_crc32_inserter_source_ready;
reg mac_crc32_inserter_source_first = 1'd0;
reg mac_crc32_inserter_source_last = 1'd0;
reg [7:0] mac_crc32_inserter_source_payload_data = 8'd0;
reg mac_crc32_inserter_source_payload_last_be = 1'd0;
reg mac_crc32_inserter_source_payload_error = 1'd0;
reg [7:0] mac_crc32_inserter_data0 = 8'd0;
wire [31:0] mac_crc32_inserter_value;
wire mac_crc32_inserter_error;
wire [7:0] mac_crc32_inserter_data1;
wire [31:0] mac_crc32_inserter_last;
reg [31:0] mac_crc32_inserter_next = 32'd0;
reg [31:0] mac_crc32_inserter_reg = 32'd4294967295;
reg mac_crc32_inserter_ce = 1'd0;
reg mac_crc32_inserter_reset = 1'd0;
reg [1:0] mac_crc32_inserter_cnt = 2'd3;
wire mac_crc32_inserter_cnt_done;
reg mac_crc32_inserter_is_ongoing0 = 1'd0;
reg mac_crc32_inserter_is_ongoing1 = 1'd0;
wire mac_crc32_checker_sink_sink_valid;
reg mac_crc32_checker_sink_sink_ready = 1'd0;
wire mac_crc32_checker_sink_sink_first;
wire mac_crc32_checker_sink_sink_last;
wire [7:0] mac_crc32_checker_sink_sink_payload_data;
wire mac_crc32_checker_sink_sink_payload_last_be;
wire mac_crc32_checker_sink_sink_payload_error;
wire mac_crc32_checker_source_source_valid;
wire mac_crc32_checker_source_source_ready;
reg mac_crc32_checker_source_source_first = 1'd0;
wire mac_crc32_checker_source_source_last;
wire [7:0] mac_crc32_checker_source_source_payload_data;
wire mac_crc32_checker_source_source_payload_last_be;
reg mac_crc32_checker_source_source_payload_error = 1'd0;
wire mac_crc32_checker_error;
wire [7:0] mac_crc32_checker_crc_data0;
wire [31:0] mac_crc32_checker_crc_value;
wire mac_crc32_checker_crc_error;
wire [7:0] mac_crc32_checker_crc_data1;
wire [31:0] mac_crc32_checker_crc_last;
reg [31:0] mac_crc32_checker_crc_next = 32'd0;
reg [31:0] mac_crc32_checker_crc_reg = 32'd4294967295;
reg mac_crc32_checker_crc_ce = 1'd0;
reg mac_crc32_checker_crc_reset = 1'd0;
reg mac_crc32_checker_syncfifo_sink_valid = 1'd0;
wire mac_crc32_checker_syncfifo_sink_ready;
wire mac_crc32_checker_syncfifo_sink_first;
wire mac_crc32_checker_syncfifo_sink_last;
wire [7:0] mac_crc32_checker_syncfifo_sink_payload_data;
wire mac_crc32_checker_syncfifo_sink_payload_last_be;
wire mac_crc32_checker_syncfifo_sink_payload_error;
wire mac_crc32_checker_syncfifo_source_valid;
wire mac_crc32_checker_syncfifo_source_ready;
wire mac_crc32_checker_syncfifo_source_first;
wire mac_crc32_checker_syncfifo_source_last;
wire [7:0] mac_crc32_checker_syncfifo_source_payload_data;
wire mac_crc32_checker_syncfifo_source_payload_last_be;
wire mac_crc32_checker_syncfifo_source_payload_error;
wire mac_crc32_checker_syncfifo_syncfifo_we;
wire mac_crc32_checker_syncfifo_syncfifo_writable;
wire mac_crc32_checker_syncfifo_syncfifo_re;
wire mac_crc32_checker_syncfifo_syncfifo_readable;
wire [11:0] mac_crc32_checker_syncfifo_syncfifo_din;
wire [11:0] mac_crc32_checker_syncfifo_syncfifo_dout;
reg [2:0] mac_crc32_checker_syncfifo_level = 3'd0;
reg mac_crc32_checker_syncfifo_replace = 1'd0;
reg [2:0] mac_crc32_checker_syncfifo_produce = 3'd0;
reg [2:0] mac_crc32_checker_syncfifo_consume = 3'd0;
reg [2:0] mac_crc32_checker_syncfifo_wrport_adr = 3'd0;
wire [11:0] mac_crc32_checker_syncfifo_wrport_dat_r;
wire mac_crc32_checker_syncfifo_wrport_we;
wire [11:0] mac_crc32_checker_syncfifo_wrport_dat_w;
wire mac_crc32_checker_syncfifo_do_read;
wire [2:0] mac_crc32_checker_syncfifo_rdport_adr;
wire [11:0] mac_crc32_checker_syncfifo_rdport_dat_r;
wire [7:0] mac_crc32_checker_syncfifo_fifo_in_payload_data;
wire mac_crc32_checker_syncfifo_fifo_in_payload_last_be;
wire mac_crc32_checker_syncfifo_fifo_in_payload_error;
wire mac_crc32_checker_syncfifo_fifo_in_first;
wire mac_crc32_checker_syncfifo_fifo_in_last;
wire [7:0] mac_crc32_checker_syncfifo_fifo_out_payload_data;
wire mac_crc32_checker_syncfifo_fifo_out_payload_last_be;
wire mac_crc32_checker_syncfifo_fifo_out_payload_error;
wire mac_crc32_checker_syncfifo_fifo_out_first;
wire mac_crc32_checker_syncfifo_fifo_out_last;
reg mac_crc32_checker_fifo_reset = 1'd0;
wire mac_crc32_checker_fifo_in;
wire mac_crc32_checker_fifo_out;
wire mac_crc32_checker_fifo_full;
wire mac_ps_preamble_error_i;
wire mac_ps_preamble_error_o;
reg mac_ps_preamble_error_toggle_i = 1'd0;
wire mac_ps_preamble_error_toggle_o;
reg mac_ps_preamble_error_toggle_o_r = 1'd0;
wire mac_ps_crc_error_i;
wire mac_ps_crc_error_o;
reg mac_ps_crc_error_toggle_i = 1'd0;
wire mac_ps_crc_error_toggle_o;
reg mac_ps_crc_error_toggle_o_r = 1'd0;
wire mac_padding_inserter_sink_valid;
reg mac_padding_inserter_sink_ready = 1'd0;
wire mac_padding_inserter_sink_first;
wire mac_padding_inserter_sink_last;
wire [7:0] mac_padding_inserter_sink_payload_data;
wire mac_padding_inserter_sink_payload_last_be;
wire mac_padding_inserter_sink_payload_error;
reg mac_padding_inserter_source_valid = 1'd0;
wire mac_padding_inserter_source_ready;
reg mac_padding_inserter_source_first = 1'd0;
reg mac_padding_inserter_source_last = 1'd0;
reg [7:0] mac_padding_inserter_source_payload_data = 8'd0;
reg mac_padding_inserter_source_payload_last_be = 1'd0;
reg mac_padding_inserter_source_payload_error = 1'd0;
reg [15:0] mac_padding_inserter_counter = 16'd0;
wire mac_padding_inserter_counter_done;
wire mac_padding_checker_sink_valid;
wire mac_padding_checker_sink_ready;
wire mac_padding_checker_sink_first;
wire mac_padding_checker_sink_last;
wire [7:0] mac_padding_checker_sink_payload_data;
wire mac_padding_checker_sink_payload_last_be;
wire mac_padding_checker_sink_payload_error;
wire mac_padding_checker_source_valid;
wire mac_padding_checker_source_ready;
wire mac_padding_checker_source_first;
wire mac_padding_checker_source_last;
wire [7:0] mac_padding_checker_source_payload_data;
wire mac_padding_checker_source_payload_last_be;
wire mac_padding_checker_source_payload_error;
wire mac_tx_cdc_sink_valid;
wire mac_tx_cdc_sink_ready;
wire mac_tx_cdc_sink_first;
wire mac_tx_cdc_sink_last;
wire [7:0] mac_tx_cdc_sink_payload_data;
wire mac_tx_cdc_sink_payload_last_be;
wire mac_tx_cdc_sink_payload_error;
wire mac_tx_cdc_source_valid;
wire mac_tx_cdc_source_ready;
wire mac_tx_cdc_source_first;
wire mac_tx_cdc_source_last;
wire [7:0] mac_tx_cdc_source_payload_data;
wire mac_tx_cdc_source_payload_last_be;
wire mac_tx_cdc_source_payload_error;
wire mac_tx_cdc_asyncfifo_we;
wire mac_tx_cdc_asyncfifo_writable;
wire mac_tx_cdc_asyncfifo_re;
wire mac_tx_cdc_asyncfifo_readable;
wire [11:0] mac_tx_cdc_asyncfifo_din;
wire [11:0] mac_tx_cdc_asyncfifo_dout;
wire mac_tx_cdc_graycounter0_ce;
(* syn_no_retiming = "true" *) reg [6:0] mac_tx_cdc_graycounter0_q = 7'd0;
wire [6:0] mac_tx_cdc_graycounter0_q_next;
reg [6:0] mac_tx_cdc_graycounter0_q_binary = 7'd0;
reg [6:0] mac_tx_cdc_graycounter0_q_next_binary = 7'd0;
wire mac_tx_cdc_graycounter1_ce;
(* syn_no_retiming = "true" *) reg [6:0] mac_tx_cdc_graycounter1_q = 7'd0;
wire [6:0] mac_tx_cdc_graycounter1_q_next;
reg [6:0] mac_tx_cdc_graycounter1_q_binary = 7'd0;
reg [6:0] mac_tx_cdc_graycounter1_q_next_binary = 7'd0;
wire [6:0] mac_tx_cdc_produce_rdomain;
wire [6:0] mac_tx_cdc_consume_wdomain;
wire [5:0] mac_tx_cdc_wrport_adr;
wire [11:0] mac_tx_cdc_wrport_dat_r;
wire mac_tx_cdc_wrport_we;
wire [11:0] mac_tx_cdc_wrport_dat_w;
wire [5:0] mac_tx_cdc_rdport_adr;
wire [11:0] mac_tx_cdc_rdport_dat_r;
wire [7:0] mac_tx_cdc_fifo_in_payload_data;
wire mac_tx_cdc_fifo_in_payload_last_be;
wire mac_tx_cdc_fifo_in_payload_error;
wire mac_tx_cdc_fifo_in_first;
wire mac_tx_cdc_fifo_in_last;
wire [7:0] mac_tx_cdc_fifo_out_payload_data;
wire mac_tx_cdc_fifo_out_payload_last_be;
wire mac_tx_cdc_fifo_out_payload_error;
wire mac_tx_cdc_fifo_out_first;
wire mac_tx_cdc_fifo_out_last;
wire mac_rx_cdc_sink_valid;
wire mac_rx_cdc_sink_ready;
wire mac_rx_cdc_sink_first;
wire mac_rx_cdc_sink_last;
wire [7:0] mac_rx_cdc_sink_payload_data;
wire mac_rx_cdc_sink_payload_last_be;
wire mac_rx_cdc_sink_payload_error;
wire mac_rx_cdc_source_valid;
wire mac_rx_cdc_source_ready;
wire mac_rx_cdc_source_first;
wire mac_rx_cdc_source_last;
wire [7:0] mac_rx_cdc_source_payload_data;
wire mac_rx_cdc_source_payload_last_be;
wire mac_rx_cdc_source_payload_error;
wire mac_rx_cdc_asyncfifo_we;
wire mac_rx_cdc_asyncfifo_writable;
wire mac_rx_cdc_asyncfifo_re;
wire mac_rx_cdc_asyncfifo_readable;
wire [11:0] mac_rx_cdc_asyncfifo_din;
wire [11:0] mac_rx_cdc_asyncfifo_dout;
wire mac_rx_cdc_graycounter0_ce;
(* syn_no_retiming = "true" *) reg [6:0] mac_rx_cdc_graycounter0_q = 7'd0;
wire [6:0] mac_rx_cdc_graycounter0_q_next;
reg [6:0] mac_rx_cdc_graycounter0_q_binary = 7'd0;
reg [6:0] mac_rx_cdc_graycounter0_q_next_binary = 7'd0;
wire mac_rx_cdc_graycounter1_ce;
(* syn_no_retiming = "true" *) reg [6:0] mac_rx_cdc_graycounter1_q = 7'd0;
wire [6:0] mac_rx_cdc_graycounter1_q_next;
reg [6:0] mac_rx_cdc_graycounter1_q_binary = 7'd0;
reg [6:0] mac_rx_cdc_graycounter1_q_next_binary = 7'd0;
wire [6:0] mac_rx_cdc_produce_rdomain;
wire [6:0] mac_rx_cdc_consume_wdomain;
wire [5:0] mac_rx_cdc_wrport_adr;
wire [11:0] mac_rx_cdc_wrport_dat_r;
wire mac_rx_cdc_wrport_we;
wire [11:0] mac_rx_cdc_wrport_dat_w;
wire [5:0] mac_rx_cdc_rdport_adr;
wire [11:0] mac_rx_cdc_rdport_dat_r;
wire [7:0] mac_rx_cdc_fifo_in_payload_data;
wire mac_rx_cdc_fifo_in_payload_last_be;
wire mac_rx_cdc_fifo_in_payload_error;
wire mac_rx_cdc_fifo_in_first;
wire mac_rx_cdc_fifo_in_last;
wire [7:0] mac_rx_cdc_fifo_out_payload_data;
wire mac_rx_cdc_fifo_out_payload_last_be;
wire mac_rx_cdc_fifo_out_payload_error;
wire mac_rx_cdc_fifo_out_first;
wire mac_rx_cdc_fifo_out_last;
reg mac_crossbar_source_valid = 1'd0;
wire mac_crossbar_source_ready;
reg mac_crossbar_source_first = 1'd0;
reg mac_crossbar_source_last = 1'd0;
reg [15:0] mac_crossbar_source_payload_ethernet_type = 16'd0;
reg [47:0] mac_crossbar_source_payload_sender_mac = 48'd0;
reg [47:0] mac_crossbar_source_payload_target_mac = 48'd0;
reg [7:0] mac_crossbar_source_payload_data = 8'd0;
reg mac_crossbar_source_payload_last_be = 1'd0;
reg mac_crossbar_source_payload_error = 1'd0;
wire mac_crossbar_sink_valid;
reg mac_crossbar_sink_ready = 1'd0;
wire mac_crossbar_sink_first;
wire mac_crossbar_sink_last;
wire [15:0] mac_crossbar_sink_payload_ethernet_type;
wire [47:0] mac_crossbar_sink_payload_sender_mac;
wire [47:0] mac_crossbar_sink_payload_target_mac;
wire [7:0] mac_crossbar_sink_payload_data;
wire mac_crossbar_sink_payload_last_be;
wire mac_crossbar_sink_payload_error;
wire mac_packetizer_sink_valid;
reg mac_packetizer_sink_ready = 1'd0;
wire mac_packetizer_sink_first;
wire mac_packetizer_sink_last;
wire [15:0] mac_packetizer_sink_payload_ethernet_type;
wire [47:0] mac_packetizer_sink_payload_sender_mac;
wire [47:0] mac_packetizer_sink_payload_target_mac;
wire [7:0] mac_packetizer_sink_payload_data;
wire mac_packetizer_sink_payload_last_be;
wire mac_packetizer_sink_payload_error;
reg mac_packetizer_source_valid = 1'd0;
wire mac_packetizer_source_ready;
reg mac_packetizer_source_first = 1'd0;
reg mac_packetizer_source_last = 1'd0;
reg [7:0] mac_packetizer_source_payload_data = 8'd0;
wire mac_packetizer_source_payload_last_be;
wire mac_packetizer_source_payload_error;
reg [111:0] mac_packetizer_header = 112'd0;
reg [111:0] mac_packetizer_sr = 112'd0;
reg mac_packetizer_sr_load = 1'd0;
reg mac_packetizer_sr_shift = 1'd0;
reg [3:0] mac_packetizer_count = 4'd0;
reg mac_packetizer_sink_d_valid = 1'd0;
reg mac_packetizer_sink_d_ready = 1'd0;
reg mac_packetizer_sink_d_first = 1'd0;
reg mac_packetizer_sink_d_last = 1'd0;
reg [15:0] mac_packetizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] mac_packetizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] mac_packetizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] mac_packetizer_sink_d_payload_data = 8'd0;
reg mac_packetizer_sink_d_payload_last_be = 1'd0;
reg mac_packetizer_sink_d_payload_error = 1'd0;
reg mac_packetizer_fsm_from_idle = 1'd0;
wire mac_depacketizer_sink_valid;
reg mac_depacketizer_sink_ready = 1'd0;
wire mac_depacketizer_sink_first;
wire mac_depacketizer_sink_last;
wire [7:0] mac_depacketizer_sink_payload_data;
wire mac_depacketizer_sink_payload_last_be;
wire mac_depacketizer_sink_payload_error;
reg mac_depacketizer_source_valid = 1'd0;
wire mac_depacketizer_source_ready;
reg mac_depacketizer_source_first = 1'd0;
reg mac_depacketizer_source_last = 1'd0;
wire [15:0] mac_depacketizer_source_payload_ethernet_type;
wire [47:0] mac_depacketizer_source_payload_sender_mac;
wire [47:0] mac_depacketizer_source_payload_target_mac;
reg [7:0] mac_depacketizer_source_payload_data = 8'd0;
wire mac_depacketizer_source_payload_last_be;
wire mac_depacketizer_source_payload_error;
wire [111:0] mac_depacketizer_header;
reg [111:0] mac_depacketizer_sr = 112'd0;
reg mac_depacketizer_sr_shift = 1'd0;
reg mac_depacketizer_sr_shift_leftover = 1'd0;
reg [3:0] mac_depacketizer_count = 4'd0;
reg mac_depacketizer_sink_d_valid = 1'd0;
reg mac_depacketizer_sink_d_ready = 1'd0;
reg mac_depacketizer_sink_d_first = 1'd0;
reg mac_depacketizer_sink_d_last = 1'd0;
reg [7:0] mac_depacketizer_sink_d_payload_data = 8'd0;
reg mac_depacketizer_sink_d_payload_last_be = 1'd0;
reg mac_depacketizer_sink_d_payload_error = 1'd0;
reg mac_depacketizer_fsm_from_idle = 1'd0;
wire arp_tx_sink_sink_valid;
reg arp_tx_sink_sink_ready = 1'd0;
wire arp_tx_sink_sink_first;
wire arp_tx_sink_sink_last;
wire arp_tx_sink_sink_payload_reply;
wire arp_tx_sink_sink_payload_request;
wire [31:0] arp_tx_sink_sink_payload_ip_address;
wire [47:0] arp_tx_sink_sink_payload_mac_address;
reg arp_tx_source_source_valid = 1'd0;
wire arp_tx_source_source_ready;
reg arp_tx_source_source_first = 1'd0;
reg arp_tx_source_source_last = 1'd0;
reg [15:0] arp_tx_source_source_payload_ethernet_type = 16'd0;
reg [47:0] arp_tx_source_source_payload_sender_mac = 48'd0;
reg [47:0] arp_tx_source_source_payload_target_mac = 48'd0;
reg [7:0] arp_tx_source_source_payload_data = 8'd0;
reg arp_tx_source_source_payload_last_be = 1'd0;
reg arp_tx_source_source_payload_error = 1'd0;
reg [5:0] arp_tx_counter = 6'd0;
reg arp_tx_packetizer_sink_valid = 1'd0;
reg arp_tx_packetizer_sink_ready = 1'd0;
reg arp_tx_packetizer_sink_first = 1'd0;
wire arp_tx_packetizer_sink_last;
reg [7:0] arp_tx_packetizer_sink_payload_data = 8'd0;
reg arp_tx_packetizer_sink_payload_error = 1'd0;
wire [7:0] arp_tx_packetizer_sink_param_hwsize;
wire [15:0] arp_tx_packetizer_sink_param_hwtype;
reg [15:0] arp_tx_packetizer_sink_param_opcode = 16'd0;
wire [15:0] arp_tx_packetizer_sink_param_proto;
wire [7:0] arp_tx_packetizer_sink_param_protosize;
wire [31:0] arp_tx_packetizer_sink_param_sender_ip;
wire [47:0] arp_tx_packetizer_sink_param_sender_mac;
reg [31:0] arp_tx_packetizer_sink_param_target_ip = 32'd0;
reg [47:0] arp_tx_packetizer_sink_param_target_mac = 48'd0;
reg arp_tx_packetizer_source_valid = 1'd0;
reg arp_tx_packetizer_source_ready = 1'd0;
reg arp_tx_packetizer_source_first = 1'd0;
reg arp_tx_packetizer_source_last = 1'd0;
reg [15:0] arp_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg [47:0] arp_tx_packetizer_source_payload_sender_mac = 48'd0;
reg [47:0] arp_tx_packetizer_source_payload_target_mac = 48'd0;
reg [7:0] arp_tx_packetizer_source_payload_data = 8'd0;
reg arp_tx_packetizer_source_payload_last_be = 1'd0;
wire arp_tx_packetizer_source_payload_error;
reg [223:0] arp_tx_packetizer_header = 224'd0;
reg [223:0] arp_tx_packetizer_sr = 224'd0;
reg arp_tx_packetizer_sr_load = 1'd0;
reg arp_tx_packetizer_sr_shift = 1'd0;
reg [4:0] arp_tx_packetizer_count = 5'd0;
reg arp_tx_packetizer_sink_d_valid = 1'd0;
reg arp_tx_packetizer_sink_d_ready = 1'd0;
reg arp_tx_packetizer_sink_d_first = 1'd0;
reg arp_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] arp_tx_packetizer_sink_d_payload_data = 8'd0;
reg arp_tx_packetizer_sink_d_payload_error = 1'd0;
reg [7:0] arp_tx_packetizer_sink_d_param_hwsize = 8'd0;
reg [15:0] arp_tx_packetizer_sink_d_param_hwtype = 16'd0;
reg [15:0] arp_tx_packetizer_sink_d_param_opcode = 16'd0;
reg [15:0] arp_tx_packetizer_sink_d_param_proto = 16'd0;
reg [7:0] arp_tx_packetizer_sink_d_param_protosize = 8'd0;
reg [31:0] arp_tx_packetizer_sink_d_param_sender_ip = 32'd0;
reg [47:0] arp_tx_packetizer_sink_d_param_sender_mac = 48'd0;
reg [31:0] arp_tx_packetizer_sink_d_param_target_ip = 32'd0;
reg [47:0] arp_tx_packetizer_sink_d_param_target_mac = 48'd0;
reg arp_tx_packetizer_fsm_from_idle = 1'd0;
wire arp_rx_sink_sink_valid;
wire arp_rx_sink_sink_ready;
wire arp_rx_sink_sink_first;
wire arp_rx_sink_sink_last;
wire [15:0] arp_rx_sink_sink_payload_ethernet_type;
wire [47:0] arp_rx_sink_sink_payload_sender_mac;
wire [47:0] arp_rx_sink_sink_payload_target_mac;
wire [7:0] arp_rx_sink_sink_payload_data;
wire arp_rx_sink_sink_payload_last_be;
wire arp_rx_sink_sink_payload_error;
reg arp_rx_source_source_valid = 1'd0;
wire arp_rx_source_source_ready;
reg arp_rx_source_source_first = 1'd0;
reg arp_rx_source_source_last = 1'd0;
reg arp_rx_source_source_payload_reply = 1'd0;
reg arp_rx_source_source_payload_request = 1'd0;
wire [31:0] arp_rx_source_source_payload_ip_address;
wire [47:0] arp_rx_source_source_payload_mac_address;
wire arp_rx_depacketizer_sink_valid;
reg arp_rx_depacketizer_sink_ready = 1'd0;
wire arp_rx_depacketizer_sink_first;
wire arp_rx_depacketizer_sink_last;
wire [15:0] arp_rx_depacketizer_sink_payload_ethernet_type;
wire [47:0] arp_rx_depacketizer_sink_payload_sender_mac;
wire [47:0] arp_rx_depacketizer_sink_payload_target_mac;
wire [7:0] arp_rx_depacketizer_sink_payload_data;
wire arp_rx_depacketizer_sink_payload_last_be;
wire arp_rx_depacketizer_sink_payload_error;
reg arp_rx_depacketizer_source_valid = 1'd0;
reg arp_rx_depacketizer_source_ready = 1'd0;
reg arp_rx_depacketizer_source_last = 1'd0;
reg [7:0] arp_rx_depacketizer_source_payload_data = 8'd0;
wire arp_rx_depacketizer_source_payload_error;
wire [7:0] arp_rx_depacketizer_source_param_hwsize;
wire [15:0] arp_rx_depacketizer_source_param_hwtype;
wire [15:0] arp_rx_depacketizer_source_param_opcode;
wire [15:0] arp_rx_depacketizer_source_param_proto;
wire [7:0] arp_rx_depacketizer_source_param_protosize;
wire [31:0] arp_rx_depacketizer_source_param_sender_ip;
wire [47:0] arp_rx_depacketizer_source_param_sender_mac;
wire [31:0] arp_rx_depacketizer_source_param_target_ip;
wire [47:0] arp_rx_depacketizer_source_param_target_mac;
wire [223:0] arp_rx_depacketizer_header;
reg [223:0] arp_rx_depacketizer_sr = 224'd0;
reg arp_rx_depacketizer_sr_shift = 1'd0;
reg arp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [4:0] arp_rx_depacketizer_count = 5'd0;
reg arp_rx_depacketizer_sink_d_valid = 1'd0;
reg arp_rx_depacketizer_sink_d_ready = 1'd0;
reg arp_rx_depacketizer_sink_d_first = 1'd0;
reg arp_rx_depacketizer_sink_d_last = 1'd0;
reg [15:0] arp_rx_depacketizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] arp_rx_depacketizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] arp_rx_depacketizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] arp_rx_depacketizer_sink_d_payload_data = 8'd0;
reg arp_rx_depacketizer_sink_d_payload_last_be = 1'd0;
reg arp_rx_depacketizer_sink_d_payload_error = 1'd0;
reg arp_rx_depacketizer_fsm_from_idle = 1'd0;
reg arp_rx_valid = 1'd0;
reg arp_rx_reply = 1'd0;
reg arp_rx_request = 1'd0;
wire arp_table_sink_valid;
reg arp_table_sink_ready = 1'd0;
wire arp_table_sink_first;
wire arp_table_sink_last;
wire arp_table_sink_payload_reply;
wire arp_table_sink_payload_request;
wire [31:0] arp_table_sink_payload_ip_address;
wire [47:0] arp_table_sink_payload_mac_address;
reg arp_table_source_valid = 1'd0;
wire arp_table_source_ready;
reg arp_table_source_first = 1'd0;
reg arp_table_source_last = 1'd0;
reg arp_table_source_payload_reply = 1'd0;
reg arp_table_source_payload_request = 1'd0;
reg [31:0] arp_table_source_payload_ip_address = 32'd0;
reg [47:0] arp_table_source_payload_mac_address = 48'd0;
reg arp_table_request_valid = 1'd0;
reg arp_table_request_ready = 1'd0;
wire [31:0] arp_table_request_payload_ip_address;
reg arp_table_response_valid = 1'd0;
reg arp_table_response_ready = 1'd0;
reg arp_table_response_payload_failed = 1'd0;
wire [47:0] arp_table_response_payload_mac_address;
reg arp_table_request_pending = 1'd0;
reg arp_table_request_pending_clr = 1'd0;
reg arp_table_request_pending_set = 1'd0;
reg [31:0] arp_table_request_ip_address = 32'd0;
reg arp_table_request_ip_address_reset = 1'd0;
reg arp_table_request_ip_address_update = 1'd0;
wire arp_table_request_timer_wait;
wire arp_table_request_timer_done;
reg [23:0] arp_table_request_timer_count = 24'd12500000;
reg [2:0] arp_table_request_counter = 3'd0;
reg arp_table_request_counter_reset = 1'd0;
reg arp_table_request_counter_ce = 1'd0;
reg arp_table_update = 1'd0;
reg arp_table_cached_valid = 1'd0;
reg [31:0] arp_table_cached_ip_address = 32'd0;
reg [47:0] arp_table_cached_mac_address = 48'd0;
wire arp_table_cached_timer_wait;
wire arp_table_cached_timer_done;
reg [30:0] arp_table_cached_timer_count = 31'd1250000000;
wire arp_mac_port_sink_valid;
reg arp_mac_port_sink_ready = 1'd0;
wire arp_mac_port_sink_first;
wire arp_mac_port_sink_last;
wire [15:0] arp_mac_port_sink_payload_ethernet_type;
wire [47:0] arp_mac_port_sink_payload_sender_mac;
wire [47:0] arp_mac_port_sink_payload_target_mac;
wire [7:0] arp_mac_port_sink_payload_data;
wire arp_mac_port_sink_payload_last_be;
wire arp_mac_port_sink_payload_error;
reg arp_mac_port_source_valid = 1'd0;
wire arp_mac_port_source_ready;
reg arp_mac_port_source_first = 1'd0;
reg arp_mac_port_source_last = 1'd0;
reg [15:0] arp_mac_port_source_payload_ethernet_type = 16'd0;
reg [47:0] arp_mac_port_source_payload_sender_mac = 48'd0;
reg [47:0] arp_mac_port_source_payload_target_mac = 48'd0;
reg [7:0] arp_mac_port_source_payload_data = 8'd0;
reg arp_mac_port_source_payload_last_be = 1'd0;
reg arp_mac_port_source_payload_error = 1'd0;
wire ip_tx_sink_sink_valid;
wire ip_tx_sink_sink_ready;
wire ip_tx_sink_sink_first;
wire ip_tx_sink_sink_last;
wire [7:0] ip_tx_sink_sink_payload_data;
wire ip_tx_sink_sink_payload_error;
wire [15:0] ip_tx_sink_sink_param_length;
wire [7:0] ip_tx_sink_sink_param_protocol;
wire [31:0] ip_tx_sink_sink_param_ip_address;
reg ip_tx_source_source_valid = 1'd0;
wire ip_tx_source_source_ready;
reg ip_tx_source_source_first = 1'd0;
reg ip_tx_source_source_last = 1'd0;
reg [15:0] ip_tx_source_source_payload_ethernet_type = 16'd0;
reg [47:0] ip_tx_source_source_payload_sender_mac = 48'd0;
reg [47:0] ip_tx_source_source_payload_target_mac = 48'd0;
reg [7:0] ip_tx_source_source_payload_data = 8'd0;
reg ip_tx_source_source_payload_last_be = 1'd0;
reg ip_tx_source_source_payload_error = 1'd0;
reg ip_tx_target_unreachable = 1'd0;
wire [159:0] ip_tx_liteethipv4checksum_header;
wire [15:0] ip_tx_liteethipv4checksum_value;
wire ip_tx_liteethipv4checksum_done;
reg [16:0] ip_tx_liteethipv4checksum_r = 17'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next0;
reg [16:0] ip_tx_liteethipv4checksum_r_next0 = 17'd0;
reg ip_tx_liteethipv4checksum0 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next1;
reg [16:0] ip_tx_liteethipv4checksum_r_next1 = 17'd0;
reg ip_tx_liteethipv4checksum1 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next2;
reg [16:0] ip_tx_liteethipv4checksum_r_next2 = 17'd0;
reg ip_tx_liteethipv4checksum2 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next3;
reg [16:0] ip_tx_liteethipv4checksum_r_next3 = 17'd0;
reg ip_tx_liteethipv4checksum3 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next4;
reg [16:0] ip_tx_liteethipv4checksum_r_next4 = 17'd0;
reg ip_tx_liteethipv4checksum4 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next5;
reg [16:0] ip_tx_liteethipv4checksum_r_next5 = 17'd0;
reg ip_tx_liteethipv4checksum5 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next6;
reg [16:0] ip_tx_liteethipv4checksum_r_next6 = 17'd0;
reg ip_tx_liteethipv4checksum6 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next7;
reg [16:0] ip_tx_liteethipv4checksum_r_next7 = 17'd0;
reg ip_tx_liteethipv4checksum7 = 1'd0;
wire [16:0] ip_tx_liteethipv4checksum_s_next8;
reg [16:0] ip_tx_liteethipv4checksum_r_next8 = 17'd0;
reg ip_tx_liteethipv4checksum8 = 1'd0;
reg [3:0] ip_tx_liteethipv4checksum_counter = 4'd0;
wire ip_tx_liteethipv4checksum_counter_ce;
wire ip_tx_ce;
wire ip_tx_reset;
wire ip_tx_packetizer_sink_valid;
reg ip_tx_packetizer_sink_ready = 1'd0;
reg ip_tx_packetizer_sink_first = 1'd0;
wire ip_tx_packetizer_sink_last;
wire [7:0] ip_tx_packetizer_sink_payload_data;
reg ip_tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] ip_tx_packetizer_sink_param_checksum;
wire [15:0] ip_tx_packetizer_sink_param_identification;
wire [3:0] ip_tx_packetizer_sink_param_ihl;
wire [7:0] ip_tx_packetizer_sink_param_protocol;
wire [31:0] ip_tx_packetizer_sink_param_sender_ip;
wire [31:0] ip_tx_packetizer_sink_param_target_ip;
wire [15:0] ip_tx_packetizer_sink_param_total_length;
wire [7:0] ip_tx_packetizer_sink_param_ttl;
wire [3:0] ip_tx_packetizer_sink_param_version;
reg ip_tx_packetizer_source_valid = 1'd0;
reg ip_tx_packetizer_source_ready = 1'd0;
reg ip_tx_packetizer_source_first = 1'd0;
reg ip_tx_packetizer_source_last = 1'd0;
reg [15:0] ip_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg [47:0] ip_tx_packetizer_source_payload_sender_mac = 48'd0;
reg [47:0] ip_tx_packetizer_source_payload_target_mac = 48'd0;
reg [7:0] ip_tx_packetizer_source_payload_data = 8'd0;
reg ip_tx_packetizer_source_payload_last_be = 1'd0;
wire ip_tx_packetizer_source_payload_error;
reg [159:0] ip_tx_packetizer_header = 160'd0;
reg [159:0] ip_tx_packetizer_sr = 160'd0;
reg ip_tx_packetizer_sr_load = 1'd0;
reg ip_tx_packetizer_sr_shift = 1'd0;
reg [4:0] ip_tx_packetizer_count = 5'd0;
reg ip_tx_packetizer_sink_d_valid = 1'd0;
reg ip_tx_packetizer_sink_d_ready = 1'd0;
reg ip_tx_packetizer_sink_d_first = 1'd0;
reg ip_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] ip_tx_packetizer_sink_d_payload_data = 8'd0;
reg ip_tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] ip_tx_packetizer_sink_d_param_checksum = 16'd0;
reg [15:0] ip_tx_packetizer_sink_d_param_identification = 16'd0;
reg [3:0] ip_tx_packetizer_sink_d_param_ihl = 4'd0;
reg [7:0] ip_tx_packetizer_sink_d_param_protocol = 8'd0;
reg [31:0] ip_tx_packetizer_sink_d_param_sender_ip = 32'd0;
reg [31:0] ip_tx_packetizer_sink_d_param_target_ip = 32'd0;
reg [15:0] ip_tx_packetizer_sink_d_param_total_length = 16'd0;
reg [7:0] ip_tx_packetizer_sink_d_param_ttl = 8'd0;
reg [3:0] ip_tx_packetizer_sink_d_param_version = 4'd0;
reg ip_tx_packetizer_fsm_from_idle = 1'd0;
reg [47:0] ip_tx_target_mac = 48'd0;
wire ip_rx_sink_sink_valid;
wire ip_rx_sink_sink_ready;
wire ip_rx_sink_sink_first;
wire ip_rx_sink_sink_last;
wire [15:0] ip_rx_sink_sink_payload_ethernet_type;
wire [47:0] ip_rx_sink_sink_payload_sender_mac;
wire [47:0] ip_rx_sink_sink_payload_target_mac;
wire [7:0] ip_rx_sink_sink_payload_data;
wire ip_rx_sink_sink_payload_last_be;
wire ip_rx_sink_sink_payload_error;
reg ip_rx_source_source_valid = 1'd0;
wire ip_rx_source_source_ready;
reg ip_rx_source_source_first = 1'd0;
wire ip_rx_source_source_last;
wire [7:0] ip_rx_source_source_payload_data;
wire ip_rx_source_source_payload_error;
wire [15:0] ip_rx_source_source_param_length;
wire [7:0] ip_rx_source_source_param_protocol;
wire [31:0] ip_rx_source_source_param_ip_address;
wire ip_rx_depacketizer_sink_valid;
reg ip_rx_depacketizer_sink_ready = 1'd0;
wire ip_rx_depacketizer_sink_first;
wire ip_rx_depacketizer_sink_last;
wire [15:0] ip_rx_depacketizer_sink_payload_ethernet_type;
wire [47:0] ip_rx_depacketizer_sink_payload_sender_mac;
wire [47:0] ip_rx_depacketizer_sink_payload_target_mac;
wire [7:0] ip_rx_depacketizer_sink_payload_data;
wire ip_rx_depacketizer_sink_payload_last_be;
wire ip_rx_depacketizer_sink_payload_error;
reg ip_rx_depacketizer_source_valid = 1'd0;
reg ip_rx_depacketizer_source_ready = 1'd0;
reg ip_rx_depacketizer_source_last = 1'd0;
reg [7:0] ip_rx_depacketizer_source_payload_data = 8'd0;
wire ip_rx_depacketizer_source_payload_error;
wire [15:0] ip_rx_depacketizer_source_param_checksum;
wire [15:0] ip_rx_depacketizer_source_param_identification;
wire [3:0] ip_rx_depacketizer_source_param_ihl;
wire [7:0] ip_rx_depacketizer_source_param_protocol;
wire [31:0] ip_rx_depacketizer_source_param_sender_ip;
wire [31:0] ip_rx_depacketizer_source_param_target_ip;
wire [15:0] ip_rx_depacketizer_source_param_total_length;
wire [7:0] ip_rx_depacketizer_source_param_ttl;
wire [3:0] ip_rx_depacketizer_source_param_version;
wire [159:0] ip_rx_depacketizer_header;
reg [159:0] ip_rx_depacketizer_sr = 160'd0;
reg ip_rx_depacketizer_sr_shift = 1'd0;
reg ip_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [4:0] ip_rx_depacketizer_count = 5'd0;
reg ip_rx_depacketizer_sink_d_valid = 1'd0;
reg ip_rx_depacketizer_sink_d_ready = 1'd0;
reg ip_rx_depacketizer_sink_d_first = 1'd0;
reg ip_rx_depacketizer_sink_d_last = 1'd0;
reg [15:0] ip_rx_depacketizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] ip_rx_depacketizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] ip_rx_depacketizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] ip_rx_depacketizer_sink_d_payload_data = 8'd0;
reg ip_rx_depacketizer_sink_d_payload_last_be = 1'd0;
reg ip_rx_depacketizer_sink_d_payload_error = 1'd0;
reg ip_rx_depacketizer_fsm_from_idle = 1'd0;
wire [159:0] ip_rx_liteethipv4checksum_header;
wire [15:0] ip_rx_liteethipv4checksum_value;
wire ip_rx_liteethipv4checksum_done;
reg [16:0] ip_rx_liteethipv4checksum_r = 17'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next0;
reg [16:0] ip_rx_liteethipv4checksum_r_next0 = 17'd0;
reg ip_rx_liteethipv4checksum0 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next1;
reg [16:0] ip_rx_liteethipv4checksum_r_next1 = 17'd0;
reg ip_rx_liteethipv4checksum1 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next2;
reg [16:0] ip_rx_liteethipv4checksum_r_next2 = 17'd0;
reg ip_rx_liteethipv4checksum2 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next3;
reg [16:0] ip_rx_liteethipv4checksum_r_next3 = 17'd0;
reg ip_rx_liteethipv4checksum3 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next4;
reg [16:0] ip_rx_liteethipv4checksum_r_next4 = 17'd0;
reg ip_rx_liteethipv4checksum4 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next5;
reg [16:0] ip_rx_liteethipv4checksum_r_next5 = 17'd0;
reg ip_rx_liteethipv4checksum5 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next6;
reg [16:0] ip_rx_liteethipv4checksum_r_next6 = 17'd0;
reg ip_rx_liteethipv4checksum6 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next7;
reg [16:0] ip_rx_liteethipv4checksum_r_next7 = 17'd0;
reg ip_rx_liteethipv4checksum7 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next8;
reg [16:0] ip_rx_liteethipv4checksum_r_next8 = 17'd0;
reg ip_rx_liteethipv4checksum8 = 1'd0;
wire [16:0] ip_rx_liteethipv4checksum_s_next9;
reg [16:0] ip_rx_liteethipv4checksum_r_next9 = 17'd0;
reg ip_rx_liteethipv4checksum9 = 1'd0;
reg [3:0] ip_rx_liteethipv4checksum_counter = 4'd0;
wire ip_rx_liteethipv4checksum_counter_ce;
wire ip_rx_ce;
wire ip_rx_reset;
reg ip_rx_valid = 1'd0;
wire ip_mac_port_sink_valid;
reg ip_mac_port_sink_ready = 1'd0;
wire ip_mac_port_sink_first;
wire ip_mac_port_sink_last;
wire [15:0] ip_mac_port_sink_payload_ethernet_type;
wire [47:0] ip_mac_port_sink_payload_sender_mac;
wire [47:0] ip_mac_port_sink_payload_target_mac;
wire [7:0] ip_mac_port_sink_payload_data;
wire ip_mac_port_sink_payload_last_be;
wire ip_mac_port_sink_payload_error;
reg ip_mac_port_source_valid = 1'd0;
wire ip_mac_port_source_ready;
reg ip_mac_port_source_first = 1'd0;
reg ip_mac_port_source_last = 1'd0;
reg [15:0] ip_mac_port_source_payload_ethernet_type = 16'd0;
reg [47:0] ip_mac_port_source_payload_sender_mac = 48'd0;
reg [47:0] ip_mac_port_source_payload_target_mac = 48'd0;
reg [7:0] ip_mac_port_source_payload_data = 8'd0;
reg ip_mac_port_source_payload_last_be = 1'd0;
reg ip_mac_port_source_payload_error = 1'd0;
reg ip_crossbar_source_valid = 1'd0;
wire ip_crossbar_source_ready;
reg ip_crossbar_source_first = 1'd0;
reg ip_crossbar_source_last = 1'd0;
reg [7:0] ip_crossbar_source_payload_data = 8'd0;
reg ip_crossbar_source_payload_error = 1'd0;
reg [15:0] ip_crossbar_source_param_length = 16'd0;
reg [7:0] ip_crossbar_source_param_protocol = 8'd0;
reg [31:0] ip_crossbar_source_param_ip_address = 32'd0;
wire ip_crossbar_sink_valid;
reg ip_crossbar_sink_ready = 1'd0;
wire ip_crossbar_sink_first;
wire ip_crossbar_sink_last;
wire [7:0] ip_crossbar_sink_payload_data;
wire ip_crossbar_sink_payload_error;
wire [15:0] ip_crossbar_sink_param_length;
wire [7:0] ip_crossbar_sink_param_protocol;
wire [31:0] ip_crossbar_sink_param_ip_address;
wire icmp_tx_sink_sink_valid;
wire icmp_tx_sink_sink_ready;
wire icmp_tx_sink_sink_first;
wire icmp_tx_sink_sink_last;
wire [7:0] icmp_tx_sink_sink_payload_data;
wire icmp_tx_sink_sink_payload_error;
wire [15:0] icmp_tx_sink_sink_param_checksum;
wire [7:0] icmp_tx_sink_sink_param_code;
wire [7:0] icmp_tx_sink_sink_param_msgtype;
wire [31:0] icmp_tx_sink_sink_param_quench;
wire [31:0] icmp_tx_sink_sink_param_ip_address;
wire [15:0] icmp_tx_sink_sink_param_length;
reg icmp_tx_source_source_valid = 1'd0;
wire icmp_tx_source_source_ready;
reg icmp_tx_source_source_first = 1'd0;
reg icmp_tx_source_source_last = 1'd0;
reg [7:0] icmp_tx_source_source_payload_data = 8'd0;
reg icmp_tx_source_source_payload_error = 1'd0;
reg [15:0] icmp_tx_source_source_param_length = 16'd0;
reg [7:0] icmp_tx_source_source_param_protocol = 8'd0;
reg [31:0] icmp_tx_source_source_param_ip_address = 32'd0;
wire icmp_tx_packetizer_sink_valid;
reg icmp_tx_packetizer_sink_ready = 1'd0;
reg icmp_tx_packetizer_sink_first = 1'd0;
wire icmp_tx_packetizer_sink_last;
wire [7:0] icmp_tx_packetizer_sink_payload_data;
reg icmp_tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] icmp_tx_packetizer_sink_param_checksum;
wire [7:0] icmp_tx_packetizer_sink_param_code;
wire [7:0] icmp_tx_packetizer_sink_param_msgtype;
wire [31:0] icmp_tx_packetizer_sink_param_quench;
reg icmp_tx_packetizer_source_valid = 1'd0;
reg icmp_tx_packetizer_source_ready = 1'd0;
reg icmp_tx_packetizer_source_first = 1'd0;
reg icmp_tx_packetizer_source_last = 1'd0;
reg [7:0] icmp_tx_packetizer_source_payload_data = 8'd0;
wire icmp_tx_packetizer_source_payload_error;
reg [15:0] icmp_tx_packetizer_source_param_length = 16'd0;
reg [7:0] icmp_tx_packetizer_source_param_protocol = 8'd0;
reg [31:0] icmp_tx_packetizer_source_param_ip_address = 32'd0;
reg [63:0] icmp_tx_packetizer_header = 64'd0;
reg [63:0] icmp_tx_packetizer_sr = 64'd0;
reg icmp_tx_packetizer_sr_load = 1'd0;
reg icmp_tx_packetizer_sr_shift = 1'd0;
reg [2:0] icmp_tx_packetizer_count = 3'd0;
reg icmp_tx_packetizer_sink_d_valid = 1'd0;
reg icmp_tx_packetizer_sink_d_ready = 1'd0;
reg icmp_tx_packetizer_sink_d_first = 1'd0;
reg icmp_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] icmp_tx_packetizer_sink_d_payload_data = 8'd0;
reg icmp_tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] icmp_tx_packetizer_sink_d_param_checksum = 16'd0;
reg [7:0] icmp_tx_packetizer_sink_d_param_code = 8'd0;
reg [7:0] icmp_tx_packetizer_sink_d_param_msgtype = 8'd0;
reg [31:0] icmp_tx_packetizer_sink_d_param_quench = 32'd0;
reg icmp_tx_packetizer_fsm_from_idle = 1'd0;
wire icmp_rx_sink_sink_valid;
wire icmp_rx_sink_sink_ready;
wire icmp_rx_sink_sink_first;
wire icmp_rx_sink_sink_last;
wire [7:0] icmp_rx_sink_sink_payload_data;
wire icmp_rx_sink_sink_payload_error;
wire [15:0] icmp_rx_sink_sink_param_length;
wire [7:0] icmp_rx_sink_sink_param_protocol;
wire [31:0] icmp_rx_sink_sink_param_ip_address;
reg icmp_rx_source_source_valid = 1'd0;
wire icmp_rx_source_source_ready;
reg icmp_rx_source_source_first = 1'd0;
wire icmp_rx_source_source_last;
wire [7:0] icmp_rx_source_source_payload_data;
wire icmp_rx_source_source_payload_error;
wire [15:0] icmp_rx_source_source_param_checksum;
wire [7:0] icmp_rx_source_source_param_code;
wire [7:0] icmp_rx_source_source_param_msgtype;
wire [31:0] icmp_rx_source_source_param_quench;
wire [31:0] icmp_rx_source_source_param_ip_address;
wire [15:0] icmp_rx_source_source_param_length;
wire icmp_rx_depacketizer_sink_valid;
reg icmp_rx_depacketizer_sink_ready = 1'd0;
wire icmp_rx_depacketizer_sink_first;
wire icmp_rx_depacketizer_sink_last;
wire [7:0] icmp_rx_depacketizer_sink_payload_data;
wire icmp_rx_depacketizer_sink_payload_error;
wire [15:0] icmp_rx_depacketizer_sink_param_length;
wire [7:0] icmp_rx_depacketizer_sink_param_protocol;
wire [31:0] icmp_rx_depacketizer_sink_param_ip_address;
reg icmp_rx_depacketizer_source_valid = 1'd0;
reg icmp_rx_depacketizer_source_ready = 1'd0;
reg icmp_rx_depacketizer_source_last = 1'd0;
reg [7:0] icmp_rx_depacketizer_source_payload_data = 8'd0;
wire icmp_rx_depacketizer_source_payload_error;
wire [15:0] icmp_rx_depacketizer_source_param_checksum;
wire [7:0] icmp_rx_depacketizer_source_param_code;
wire [7:0] icmp_rx_depacketizer_source_param_msgtype;
wire [31:0] icmp_rx_depacketizer_source_param_quench;
wire [63:0] icmp_rx_depacketizer_header;
reg [63:0] icmp_rx_depacketizer_sr = 64'd0;
reg icmp_rx_depacketizer_sr_shift = 1'd0;
reg icmp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [2:0] icmp_rx_depacketizer_count = 3'd0;
reg icmp_rx_depacketizer_sink_d_valid = 1'd0;
reg icmp_rx_depacketizer_sink_d_ready = 1'd0;
reg icmp_rx_depacketizer_sink_d_first = 1'd0;
reg icmp_rx_depacketizer_sink_d_last = 1'd0;
reg [7:0] icmp_rx_depacketizer_sink_d_payload_data = 8'd0;
reg icmp_rx_depacketizer_sink_d_payload_error = 1'd0;
reg [15:0] icmp_rx_depacketizer_sink_d_param_length = 16'd0;
reg [7:0] icmp_rx_depacketizer_sink_d_param_protocol = 8'd0;
reg [31:0] icmp_rx_depacketizer_sink_d_param_ip_address = 32'd0;
reg icmp_rx_depacketizer_fsm_from_idle = 1'd0;
reg icmp_rx_valid = 1'd0;
wire icmp_echo_sink_sink_valid;
wire icmp_echo_sink_sink_ready;
wire icmp_echo_sink_sink_first;
wire icmp_echo_sink_sink_last;
wire [7:0] icmp_echo_sink_sink_payload_data;
wire icmp_echo_sink_sink_payload_error;
wire [15:0] icmp_echo_sink_sink_param_checksum;
wire [7:0] icmp_echo_sink_sink_param_code;
wire [7:0] icmp_echo_sink_sink_param_msgtype;
wire [31:0] icmp_echo_sink_sink_param_quench;
wire [31:0] icmp_echo_sink_sink_param_ip_address;
wire [15:0] icmp_echo_sink_sink_param_length;
wire icmp_echo_source_source_valid;
wire icmp_echo_source_source_ready;
wire icmp_echo_source_source_first;
wire icmp_echo_source_source_last;
wire [7:0] icmp_echo_source_source_payload_data;
wire icmp_echo_source_source_payload_error;
reg [15:0] icmp_echo_source_source_param_checksum = 16'd0;
wire [7:0] icmp_echo_source_source_param_code;
reg [7:0] icmp_echo_source_source_param_msgtype = 8'd0;
wire [31:0] icmp_echo_source_source_param_quench;
wire [31:0] icmp_echo_source_source_param_ip_address;
wire [15:0] icmp_echo_source_source_param_length;
wire icmp_echo_buffer_sink_valid;
wire icmp_echo_buffer_sink_ready;
wire icmp_echo_buffer_sink_first;
wire icmp_echo_buffer_sink_last;
wire [7:0] icmp_echo_buffer_sink_payload_data;
wire icmp_echo_buffer_sink_payload_error;
wire [15:0] icmp_echo_buffer_sink_param_checksum;
wire [7:0] icmp_echo_buffer_sink_param_code;
wire [7:0] icmp_echo_buffer_sink_param_msgtype;
wire [31:0] icmp_echo_buffer_sink_param_quench;
wire [31:0] icmp_echo_buffer_sink_param_ip_address;
wire [15:0] icmp_echo_buffer_sink_param_length;
wire icmp_echo_buffer_source_valid;
wire icmp_echo_buffer_source_ready;
wire icmp_echo_buffer_source_first;
wire icmp_echo_buffer_source_last;
wire [7:0] icmp_echo_buffer_source_payload_data;
wire icmp_echo_buffer_source_payload_error;
wire [15:0] icmp_echo_buffer_source_param_checksum;
wire [7:0] icmp_echo_buffer_source_param_code;
wire [7:0] icmp_echo_buffer_source_param_msgtype;
wire [31:0] icmp_echo_buffer_source_param_quench;
wire [31:0] icmp_echo_buffer_source_param_ip_address;
wire [15:0] icmp_echo_buffer_source_param_length;
wire icmp_echo_buffer_re;
reg icmp_echo_buffer_readable = 1'd0;
wire icmp_echo_buffer_syncfifo_we;
wire icmp_echo_buffer_syncfifo_writable;
wire icmp_echo_buffer_syncfifo_re;
wire icmp_echo_buffer_syncfifo_readable;
wire [122:0] icmp_echo_buffer_syncfifo_din;
wire [122:0] icmp_echo_buffer_syncfifo_dout;
reg [7:0] icmp_echo_buffer_level0 = 8'd0;
reg icmp_echo_buffer_replace = 1'd0;
reg [6:0] icmp_echo_buffer_produce = 7'd0;
reg [6:0] icmp_echo_buffer_consume = 7'd0;
reg [6:0] icmp_echo_buffer_wrport_adr = 7'd0;
wire [122:0] icmp_echo_buffer_wrport_dat_r;
wire icmp_echo_buffer_wrport_we;
wire [122:0] icmp_echo_buffer_wrport_dat_w;
wire icmp_echo_buffer_do_read;
wire [6:0] icmp_echo_buffer_rdport_adr;
wire [122:0] icmp_echo_buffer_rdport_dat_r;
wire icmp_echo_buffer_rdport_re;
wire [7:0] icmp_echo_buffer_level1;
wire [7:0] icmp_echo_buffer_fifo_in_payload_data;
wire icmp_echo_buffer_fifo_in_payload_error;
wire [15:0] icmp_echo_buffer_fifo_in_param_checksum;
wire [7:0] icmp_echo_buffer_fifo_in_param_code;
wire [7:0] icmp_echo_buffer_fifo_in_param_msgtype;
wire [31:0] icmp_echo_buffer_fifo_in_param_quench;
wire [31:0] icmp_echo_buffer_fifo_in_param_ip_address;
wire [15:0] icmp_echo_buffer_fifo_in_param_length;
wire icmp_echo_buffer_fifo_in_first;
wire icmp_echo_buffer_fifo_in_last;
wire [7:0] icmp_echo_buffer_fifo_out_payload_data;
wire icmp_echo_buffer_fifo_out_payload_error;
wire [15:0] icmp_echo_buffer_fifo_out_param_checksum;
wire [7:0] icmp_echo_buffer_fifo_out_param_code;
wire [7:0] icmp_echo_buffer_fifo_out_param_msgtype;
wire [31:0] icmp_echo_buffer_fifo_out_param_quench;
wire [31:0] icmp_echo_buffer_fifo_out_param_ip_address;
wire [15:0] icmp_echo_buffer_fifo_out_param_length;
wire icmp_echo_buffer_fifo_out_first;
wire icmp_echo_buffer_fifo_out_last;
wire icmp_sink_valid;
reg icmp_sink_ready = 1'd0;
wire icmp_sink_first;
wire icmp_sink_last;
wire [7:0] icmp_sink_payload_data;
wire icmp_sink_payload_error;
wire [15:0] icmp_sink_param_length;
wire [7:0] icmp_sink_param_protocol;
wire [31:0] icmp_sink_param_ip_address;
reg icmp_source_valid = 1'd0;
wire icmp_source_ready;
reg icmp_source_first = 1'd0;
reg icmp_source_last = 1'd0;
reg [7:0] icmp_source_payload_data = 8'd0;
reg icmp_source_payload_error = 1'd0;
reg [15:0] icmp_source_param_length = 16'd0;
reg [7:0] icmp_source_param_protocol = 8'd0;
reg [31:0] icmp_source_param_ip_address = 32'd0;
wire tx_sink_sink_valid;
wire tx_sink_sink_ready;
wire tx_sink_sink_first;
wire tx_sink_sink_last;
wire [7:0] tx_sink_sink_payload_data;
wire tx_sink_sink_payload_error;
wire [15:0] tx_sink_sink_param_src_port;
wire [15:0] tx_sink_sink_param_dst_port;
wire [31:0] tx_sink_sink_param_ip_address;
wire [15:0] tx_sink_sink_param_length;
reg tx_source_source_valid = 1'd0;
wire tx_source_source_ready;
reg tx_source_source_first = 1'd0;
reg tx_source_source_last = 1'd0;
reg [7:0] tx_source_source_payload_data = 8'd0;
reg tx_source_source_payload_error = 1'd0;
reg [15:0] tx_source_source_param_length = 16'd0;
reg [7:0] tx_source_source_param_protocol = 8'd0;
reg [31:0] tx_source_source_param_ip_address = 32'd0;
wire tx_packetizer_sink_valid;
reg tx_packetizer_sink_ready = 1'd0;
reg tx_packetizer_sink_first = 1'd0;
wire tx_packetizer_sink_last;
wire [7:0] tx_packetizer_sink_payload_data;
reg tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] tx_packetizer_sink_param_checksum;
wire [15:0] tx_packetizer_sink_param_dst_port;
wire [15:0] tx_packetizer_sink_param_length;
wire [15:0] tx_packetizer_sink_param_src_port;
reg tx_packetizer_source_valid = 1'd0;
reg tx_packetizer_source_ready = 1'd0;
reg tx_packetizer_source_first = 1'd0;
reg tx_packetizer_source_last = 1'd0;
reg [7:0] tx_packetizer_source_payload_data = 8'd0;
wire tx_packetizer_source_payload_error;
reg [15:0] tx_packetizer_source_param_length = 16'd0;
reg [7:0] tx_packetizer_source_param_protocol = 8'd0;
reg [31:0] tx_packetizer_source_param_ip_address = 32'd0;
reg [63:0] tx_packetizer_header = 64'd0;
reg [63:0] tx_packetizer_sr = 64'd0;
reg tx_packetizer_sr_load = 1'd0;
reg tx_packetizer_sr_shift = 1'd0;
reg [2:0] tx_packetizer_count = 3'd0;
reg tx_packetizer_sink_d_valid = 1'd0;
reg tx_packetizer_sink_d_ready = 1'd0;
reg tx_packetizer_sink_d_first = 1'd0;
reg tx_packetizer_sink_d_last = 1'd0;
reg [7:0] tx_packetizer_sink_d_payload_data = 8'd0;
reg tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] tx_packetizer_sink_d_param_checksum = 16'd0;
reg [15:0] tx_packetizer_sink_d_param_dst_port = 16'd0;
reg [15:0] tx_packetizer_sink_d_param_length = 16'd0;
reg [15:0] tx_packetizer_sink_d_param_src_port = 16'd0;
reg tx_packetizer_fsm_from_idle = 1'd0;
wire rx_sink_sink_valid;
wire rx_sink_sink_ready;
wire rx_sink_sink_first;
wire rx_sink_sink_last;
wire [7:0] rx_sink_sink_payload_data;
wire rx_sink_sink_payload_error;
wire [15:0] rx_sink_sink_param_length;
wire [7:0] rx_sink_sink_param_protocol;
wire [31:0] rx_sink_sink_param_ip_address;
reg rx_source_source_valid = 1'd0;
wire rx_source_source_ready;
reg rx_source_source_first = 1'd0;
wire rx_source_source_last;
wire [7:0] rx_source_source_payload_data;
wire rx_source_source_payload_error;
wire [15:0] rx_source_source_param_src_port;
wire [15:0] rx_source_source_param_dst_port;
wire [31:0] rx_source_source_param_ip_address;
wire [15:0] rx_source_source_param_length;
wire rx_depacketizer_sink_valid;
reg rx_depacketizer_sink_ready = 1'd0;
wire rx_depacketizer_sink_first;
wire rx_depacketizer_sink_last;
wire [7:0] rx_depacketizer_sink_payload_data;
wire rx_depacketizer_sink_payload_error;
wire [15:0] rx_depacketizer_sink_param_length;
wire [7:0] rx_depacketizer_sink_param_protocol;
wire [31:0] rx_depacketizer_sink_param_ip_address;
reg rx_depacketizer_source_valid = 1'd0;
reg rx_depacketizer_source_ready = 1'd0;
reg rx_depacketizer_source_last = 1'd0;
reg [7:0] rx_depacketizer_source_payload_data = 8'd0;
wire rx_depacketizer_source_payload_error;
wire [15:0] rx_depacketizer_source_param_checksum;
wire [15:0] rx_depacketizer_source_param_dst_port;
wire [15:0] rx_depacketizer_source_param_length;
wire [15:0] rx_depacketizer_source_param_src_port;
wire [63:0] rx_depacketizer_header;
reg [63:0] rx_depacketizer_sr = 64'd0;
reg rx_depacketizer_sr_shift = 1'd0;
reg rx_depacketizer_sr_shift_leftover = 1'd0;
reg [2:0] rx_depacketizer_count = 3'd0;
reg rx_depacketizer_sink_d_valid = 1'd0;
reg rx_depacketizer_sink_d_ready = 1'd0;
reg rx_depacketizer_sink_d_first = 1'd0;
reg rx_depacketizer_sink_d_last = 1'd0;
reg [7:0] rx_depacketizer_sink_d_payload_data = 8'd0;
reg rx_depacketizer_sink_d_payload_error = 1'd0;
reg [15:0] rx_depacketizer_sink_d_param_length = 16'd0;
reg [7:0] rx_depacketizer_sink_d_param_protocol = 8'd0;
reg [31:0] rx_depacketizer_sink_d_param_ip_address = 32'd0;
reg rx_depacketizer_fsm_from_idle = 1'd0;
reg rx_valid = 1'd0;
wire ip_port_sink_valid;
reg ip_port_sink_ready = 1'd0;
wire ip_port_sink_first;
wire ip_port_sink_last;
wire [7:0] ip_port_sink_payload_data;
wire ip_port_sink_payload_error;
wire [15:0] ip_port_sink_param_length;
wire [7:0] ip_port_sink_param_protocol;
wire [31:0] ip_port_sink_param_ip_address;
reg ip_port_source_valid = 1'd0;
wire ip_port_source_ready;
reg ip_port_source_first = 1'd0;
reg ip_port_source_last = 1'd0;
reg [7:0] ip_port_source_payload_data = 8'd0;
reg ip_port_source_payload_error = 1'd0;
reg [15:0] ip_port_source_param_length = 16'd0;
reg [7:0] ip_port_source_param_protocol = 8'd0;
reg [31:0] ip_port_source_param_ip_address = 32'd0;
wire crossbar_source_valid;
wire crossbar_source_ready;
wire crossbar_source_first;
wire crossbar_source_last;
wire [7:0] crossbar_source_payload_data;
wire crossbar_source_payload_error;
wire [15:0] crossbar_source_param_src_port;
wire [15:0] crossbar_source_param_dst_port;
wire [31:0] crossbar_source_param_ip_address;
wire [15:0] crossbar_source_param_length;
wire crossbar_sink_valid;
wire crossbar_sink_ready;
wire crossbar_sink_first;
wire crossbar_sink_last;
wire [7:0] crossbar_sink_payload_data;
wire crossbar_sink_payload_error;
wire [15:0] crossbar_sink_param_src_port;
wire [15:0] crossbar_sink_param_dst_port;
wire [31:0] crossbar_sink_param_ip_address;
wire [15:0] crossbar_sink_param_length;
wire user_port_sink_valid;
wire user_port_sink_ready;
reg user_port_sink_first = 1'd0;
wire user_port_sink_last;
wire [7:0] user_port_sink_payload_data;
wire user_port_sink_payload_error;
wire [15:0] user_port_sink_param_src_port;
wire [15:0] user_port_sink_param_dst_port;
wire [31:0] user_port_sink_param_ip_address;
wire [15:0] user_port_sink_param_length;
wire user_port_source_valid;
wire user_port_source_ready;
wire user_port_source_first;
wire user_port_source_last;
wire [7:0] user_port_source_payload_data;
wire user_port_source_payload_error;
wire [15:0] user_port_source_param_src_port;
wire [15:0] user_port_source_param_dst_port;
wire [31:0] user_port_source_param_ip_address;
wire [15:0] user_port_source_param_length;
wire internal_port_sink_valid;
wire internal_port_sink_ready;
wire internal_port_sink_first;
wire internal_port_sink_last;
wire [7:0] internal_port_sink_payload_data;
wire internal_port_sink_payload_error;
wire [15:0] internal_port_sink_param_src_port;
wire [15:0] internal_port_sink_param_dst_port;
wire [31:0] internal_port_sink_param_ip_address;
wire [15:0] internal_port_sink_param_length;
wire internal_port_source_valid;
wire internal_port_source_ready;
wire internal_port_source_first;
wire internal_port_source_last;
wire [7:0] internal_port_source_payload_data;
wire internal_port_source_payload_error;
wire [15:0] internal_port_source_param_src_port;
wire [15:0] internal_port_source_param_dst_port;
wire [31:0] internal_port_source_param_ip_address;
wire [15:0] internal_port_source_param_length;
reg wishbone2csr_state = 1'd0;
reg wishbone2csr_next_state = 1'd0;
reg liteethudpipcore_liteethmac_liteethmacgap_state = 1'd0;
reg liteethudpipcore_liteethmac_liteethmacgap_next_state = 1'd0;
reg [3:0] mac_tx_gap_inserter_counter_liteethmacgap_next_value = 4'd0;
reg mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacpreambleinserter_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state = 2'd0;
reg [2:0] mac_preamble_inserter_count_liteethmacpreambleinserter_next_value = 3'd0;
reg mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce = 1'd0;
reg liteethudpipcore_liteethmac_liteethmacpreamblechecker_state = 1'd0;
reg liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmaccrc32inserter_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmaccrc32checker_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state = 2'd0;
reg liteethudpipcore_liteethmac_liteethmacpaddinginserter_state = 1'd0;
reg liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state = 1'd0;
reg [15:0] mac_padding_inserter_counter_liteethmacpaddinginserter_next_value = 16'd0;
reg mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_request = 2'd0;
reg liteethudpipcore_liteethmac_grant = 1'd0;
reg liteethudpipcore_liteethmac_status0_first = 1'd1;
reg liteethudpipcore_liteethmac_status0_last = 1'd0;
wire liteethudpipcore_liteethmac_status0_ongoing0;
reg liteethudpipcore_liteethmac_status0_ongoing1 = 1'd0;
reg liteethudpipcore_liteethmac_status1_first = 1'd1;
reg liteethudpipcore_liteethmac_status1_last = 1'd0;
wire liteethudpipcore_liteethmac_status1_ongoing0;
reg liteethudpipcore_liteethmac_status1_ongoing1 = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_sel0 = 2'd0;
reg liteethudpipcore_liteethmac_first = 1'd1;
reg liteethudpipcore_liteethmac_last = 1'd0;
wire liteethudpipcore_liteethmac_ongoing0;
reg liteethudpipcore_liteethmac_ongoing1 = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_sel1 = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_sel_ongoing = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacpacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacpacketizer_next_state = 2'd0;
reg [3:0] mac_packetizer_count_liteethmacpacketizer_next_value0 = 4'd0;
reg mac_packetizer_count_liteethmacpacketizer_next_value_ce0 = 1'd0;
reg mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 = 1'd0;
reg mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacdepacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state = 2'd0;
reg [3:0] mac_depacketizer_count_liteethmacdepacketizer_next_value0 = 4'd0;
reg mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 = 1'd0;
reg mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 = 1'd0;
reg mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteetharptx_liteetharppacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteetharptx_liteetharppacketizer_next_state = 2'd0;
reg [4:0] arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 = 5'd0;
reg arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 = 1'd0;
reg arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 = 1'd0;
reg arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 = 1'd0;
reg liteethudpipcore_liteetharptx_fsm_state = 1'd0;
reg liteethudpipcore_liteetharptx_fsm_next_state = 1'd0;
reg [5:0] arp_tx_counter_liteetharp_fsm_next_value = 6'd0;
reg arp_tx_counter_liteetharp_fsm_next_value_ce = 1'd0;
reg [1:0] liteethudpipcore_liteetharprx_liteetharpdepacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state = 2'd0;
reg [4:0] arp_rx_depacketizer_count_liteetharp_next_value0 = 5'd0;
reg arp_rx_depacketizer_count_liteetharp_next_value_ce0 = 1'd0;
reg arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 = 1'd0;
reg arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteetharprx_fsm_state = 2'd0;
reg [1:0] liteethudpipcore_liteetharprx_fsm_next_state = 2'd0;
reg [2:0] liteethudpipcore_state = 3'd0;
reg [2:0] liteethudpipcore_next_state = 3'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state = 2'd0;
reg [4:0] ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 = 5'd0;
reg ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 = 1'd0;
reg ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 = 1'd0;
reg ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 = 1'd0;
reg [2:0] liteethudpipcore_liteethip_liteethiptx_fsm_state = 3'd0;
reg [2:0] liteethudpipcore_liteethip_liteethiptx_fsm_next_state = 3'd0;
reg [47:0] ip_tx_target_mac_liteethip_fsm_next_value = 48'd0;
reg ip_tx_target_mac_liteethip_fsm_next_value_ce = 1'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state = 2'd0;
reg [4:0] ip_rx_depacketizer_count_liteethip_next_value0 = 5'd0;
reg ip_rx_depacketizer_count_liteethip_next_value_ce0 = 1'd0;
reg ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 = 1'd0;
reg ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiprx_fsm_state = 2'd0;
reg [1:0] liteethudpipcore_liteethip_liteethiprx_fsm_next_state = 2'd0;
reg [1:0] liteethudpipcore_liteethip_request = 2'd0;
reg liteethudpipcore_liteethip_grant = 1'd0;
reg liteethudpipcore_liteethip_status0_first = 1'd1;
reg liteethudpipcore_liteethip_status0_last = 1'd0;
wire liteethudpipcore_liteethip_status0_ongoing0;
reg liteethudpipcore_liteethip_status0_ongoing1 = 1'd0;
reg liteethudpipcore_liteethip_status1_first = 1'd1;
reg liteethudpipcore_liteethip_status1_last = 1'd0;
wire liteethudpipcore_liteethip_status1_ongoing0;
reg liteethudpipcore_liteethip_status1_ongoing1 = 1'd0;
reg [1:0] liteethudpipcore_liteethip_sel0 = 2'd0;
reg liteethudpipcore_liteethip_first = 1'd1;
reg liteethudpipcore_liteethip_last = 1'd0;
wire liteethudpipcore_liteethip_ongoing0;
reg liteethudpipcore_liteethip_ongoing1 = 1'd0;
reg [1:0] liteethudpipcore_liteethip_sel1 = 2'd0;
reg [1:0] liteethudpipcore_liteethip_sel_ongoing = 2'd0;
reg [1:0] liteethudpipcore_liteethicmptx_liteethicmppacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state = 2'd0;
reg [2:0] icmp_tx_packetizer_count_liteethicmptx_next_value0 = 3'd0;
reg icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 = 1'd0;
reg icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 = 1'd0;
reg icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 = 1'd0;
reg liteethudpipcore_liteethicmptx_fsm_state = 1'd0;
reg liteethudpipcore_liteethicmptx_fsm_next_state = 1'd0;
reg [1:0] liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state = 2'd0;
reg [2:0] icmp_rx_depacketizer_count_liteethicmprx_next_value0 = 3'd0;
reg icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 = 1'd0;
reg icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 = 1'd0;
reg icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteethicmprx_fsm_state = 2'd0;
reg [1:0] liteethudpipcore_liteethicmprx_fsm_next_state = 2'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state = 2'd0;
reg [2:0] tx_packetizer_count_liteethudptx_next_value0 = 3'd0;
reg tx_packetizer_count_liteethudptx_next_value_ce0 = 1'd0;
reg tx_packetizer_fsm_from_idle_liteethudptx_next_value1 = 1'd0;
reg tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 = 1'd0;
reg liteethudpipcore_liteethudp_liteethudptx_fsm_state = 1'd0;
reg liteethudpipcore_liteethudp_liteethudptx_fsm_next_state = 1'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_state = 2'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state = 2'd0;
reg [2:0] rx_depacketizer_count_liteethudprx_next_value0 = 3'd0;
reg rx_depacketizer_count_liteethudprx_next_value_ce0 = 1'd0;
reg rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 = 1'd0;
reg rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 = 1'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudprx_fsm_state = 2'd0;
reg [1:0] liteethudpipcore_liteethudp_liteethudprx_fsm_next_state = 2'd0;
reg liteethudpipcore_liteethudp_sel = 1'd0;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [7:0] interface0_bank_bus_dat_w;
reg [7:0] interface0_bank_bus_dat_r = 8'd0;
wire csrbank0_reset0_re;
wire csrbank0_reset0_r;
wire csrbank0_reset0_we;
wire csrbank0_reset0_w;
wire csrbank0_scratch3_re;
wire [7:0] csrbank0_scratch3_r;
wire csrbank0_scratch3_we;
wire [7:0] csrbank0_scratch3_w;
wire csrbank0_scratch2_re;
wire [7:0] csrbank0_scratch2_r;
wire csrbank0_scratch2_we;
wire [7:0] csrbank0_scratch2_w;
wire csrbank0_scratch1_re;
wire [7:0] csrbank0_scratch1_r;
wire csrbank0_scratch1_we;
wire [7:0] csrbank0_scratch1_w;
wire csrbank0_scratch0_re;
wire [7:0] csrbank0_scratch0_r;
wire csrbank0_scratch0_we;
wire [7:0] csrbank0_scratch0_w;
wire csrbank0_bus_errors3_re;
wire [7:0] csrbank0_bus_errors3_r;
wire csrbank0_bus_errors3_we;
wire [7:0] csrbank0_bus_errors3_w;
wire csrbank0_bus_errors2_re;
wire [7:0] csrbank0_bus_errors2_r;
wire csrbank0_bus_errors2_we;
wire [7:0] csrbank0_bus_errors2_w;
wire csrbank0_bus_errors1_re;
wire [7:0] csrbank0_bus_errors1_r;
wire csrbank0_bus_errors1_we;
wire [7:0] csrbank0_bus_errors1_w;
wire csrbank0_bus_errors0_re;
wire [7:0] csrbank0_bus_errors0_r;
wire csrbank0_bus_errors0_we;
wire [7:0] csrbank0_bus_errors0_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [7:0] interface1_bank_bus_dat_w;
reg [7:0] interface1_bank_bus_dat_r = 8'd0;
wire csrbank1_crg_reset0_re;
wire csrbank1_crg_reset0_r;
wire csrbank1_crg_reset0_we;
wire csrbank1_crg_reset0_w;
wire csrbank1_rx_inband_status_re;
wire [2:0] csrbank1_rx_inband_status_r;
wire csrbank1_rx_inband_status_we;
wire [2:0] csrbank1_rx_inband_status_w;
wire csrbank1_mdio_w0_re;
wire [2:0] csrbank1_mdio_w0_r;
wire csrbank1_mdio_w0_we;
wire [2:0] csrbank1_mdio_w0_w;
wire csrbank1_mdio_r_re;
wire csrbank1_mdio_r_r;
wire csrbank1_mdio_r_we;
wire csrbank1_mdio_r_w;
wire csrbank1_sel;
wire [13:0] adr;
wire we;
wire [7:0] dat_w;
wire [7:0] dat_r;
wire [15:0] slice_proxy0;
wire [15:0] slice_proxy1;
wire [47:0] slice_proxy2;
wire [47:0] slice_proxy3;
wire [47:0] slice_proxy4;
wire [47:0] slice_proxy5;
wire [47:0] slice_proxy6;
wire [47:0] slice_proxy7;
wire [47:0] slice_proxy8;
wire [47:0] slice_proxy9;
wire [47:0] slice_proxy10;
wire [47:0] slice_proxy11;
wire [47:0] slice_proxy12;
wire [47:0] slice_proxy13;
wire [7:0] slice_proxy14;
wire [15:0] slice_proxy15;
wire [15:0] slice_proxy16;
wire [15:0] slice_proxy17;
wire [15:0] slice_proxy18;
wire [15:0] slice_proxy19;
wire [15:0] slice_proxy20;
wire [7:0] slice_proxy21;
wire [31:0] slice_proxy22;
wire [31:0] slice_proxy23;
wire [31:0] slice_proxy24;
wire [31:0] slice_proxy25;
wire [47:0] slice_proxy26;
wire [47:0] slice_proxy27;
wire [47:0] slice_proxy28;
wire [47:0] slice_proxy29;
wire [47:0] slice_proxy30;
wire [47:0] slice_proxy31;
wire [31:0] slice_proxy32;
wire [31:0] slice_proxy33;
wire [31:0] slice_proxy34;
wire [31:0] slice_proxy35;
wire [47:0] slice_proxy36;
wire [47:0] slice_proxy37;
wire [47:0] slice_proxy38;
wire [47:0] slice_proxy39;
wire [47:0] slice_proxy40;
wire [47:0] slice_proxy41;
wire [15:0] slice_proxy42;
wire [15:0] slice_proxy43;
wire [15:0] slice_proxy44;
wire [15:0] slice_proxy45;
wire [3:0] slice_proxy46;
wire [7:0] slice_proxy47;
wire [31:0] slice_proxy48;
wire [31:0] slice_proxy49;
wire [31:0] slice_proxy50;
wire [31:0] slice_proxy51;
wire [31:0] slice_proxy52;
wire [31:0] slice_proxy53;
wire [31:0] slice_proxy54;
wire [31:0] slice_proxy55;
wire [15:0] slice_proxy56;
wire [15:0] slice_proxy57;
wire [7:0] slice_proxy58;
wire [3:0] slice_proxy59;
wire [15:0] slice_proxy60;
wire [15:0] slice_proxy61;
wire [7:0] slice_proxy62;
wire [7:0] slice_proxy63;
wire [31:0] slice_proxy64;
wire [31:0] slice_proxy65;
wire [31:0] slice_proxy66;
wire [31:0] slice_proxy67;
wire [15:0] slice_proxy68;
wire [15:0] slice_proxy69;
wire [15:0] slice_proxy70;
wire [15:0] slice_proxy71;
wire [15:0] slice_proxy72;
wire [15:0] slice_proxy73;
wire [15:0] slice_proxy74;
wire [15:0] slice_proxy75;
wire rst10;
wire rst11;
(* syn_no_retiming = "true" *) reg multiregimpl0_regs0 = 1'd0;
(* syn_no_retiming = "true" *) reg multiregimpl0_regs1 = 1'd0;
(* syn_no_retiming = "true" *) reg multiregimpl1_regs0 = 1'd0;
(* syn_no_retiming = "true" *) reg multiregimpl1_regs1 = 1'd0;
(* syn_no_retiming = "true" *) reg multiregimpl2_regs0 = 1'd0;
(* syn_no_retiming = "true" *) reg multiregimpl2_regs1 = 1'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl3_regs0 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl3_regs1 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl4_regs0 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl4_regs1 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl5_regs0 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl5_regs1 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl6_regs0 = 7'd0;
(* syn_no_retiming = "true" *) reg [6:0] multiregimpl6_regs1 = 7'd0;

assign user_port_sink_valid = udp_sink_valid;
assign user_port_sink_last = udp_sink_last;
assign udp_sink_ready = user_port_sink_ready;
assign user_port_sink_param_src_port = udp_sink_src_port;
assign user_port_sink_param_dst_port = udp_sink_dst_port;
assign user_port_sink_param_ip_address = udp_sink_ip_address;
assign user_port_sink_param_length = udp_sink_length;
assign user_port_sink_payload_data = udp_sink_data;
assign user_port_sink_payload_error = udp_sink_error;
assign udp_source_valid = user_port_source_valid;
assign udp_source_last = user_port_source_last;
assign user_port_source_ready = udp_source_ready;
assign udp_source_src_port = user_port_source_param_src_port;
assign udp_source_dst_port = user_port_source_param_dst_port;
assign udp_source_ip_address = user_port_source_param_ip_address;
assign udp_source_length = user_port_source_param_length;
assign udp_source_data = user_port_source_payload_data;
assign udp_source_error = user_port_source_payload_error;
assign udpcore_reset = udpcore_reset_re;
assign udpcore_bus_errors_status = udpcore_bus_errors;
assign udpcore_dat_w = udpcore_wishbone_dat_w;
assign udpcore_wishbone_dat_r = udpcore_dat_r;
always @(*) begin
	udpcore_we <= 1'd0;
	udpcore_wishbone_ack <= 1'd0;
	wishbone2csr_next_state <= 1'd0;
	udpcore_adr <= 14'd0;
	wishbone2csr_next_state <= wishbone2csr_state;
	case (wishbone2csr_state)
		1'd1: begin
			udpcore_wishbone_ack <= 1'd1;
			wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((udpcore_wishbone_cyc & udpcore_wishbone_stb)) begin
				udpcore_adr <= udpcore_wishbone_adr;
				udpcore_we <= (udpcore_wishbone_we & (udpcore_wishbone_sel != 1'd0));
				wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign sys_clk = sys_clock;
assign por_clk = sys_clock;
assign sys_rst = int_rst;
assign eth_tx_clk = eth_rx_clk;
assign eth_rx_clk = rgmii_eth_clocks_rx;
assign ethphy_reset = ethphy_reset_storage;
assign rgmii_eth_rst_n = (~ethphy_reset);
assign ethphy_sink_ready = 1'd1;
assign ethphy_liteethphyrgmiirx_last = ((~ethphy_liteethphyrgmiirx_rx_ctl_reg[0]) & ethphy_liteethphyrgmiirx_rx_ctl_reg_d[0]);
assign ethphy_liteethphyrgmiirx_source_last = ethphy_liteethphyrgmiirx_last;
assign rgmii_eth_mdc = ethphy_mdio_storage[0];
assign ethphy_mdio_data_oe = ethphy_mdio_storage[1];
assign ethphy_mdio_data_w = ethphy_mdio_storage[2];
assign mac_packetizer_sink_valid = mac_crossbar_source_valid;
assign mac_crossbar_source_ready = mac_packetizer_sink_ready;
assign mac_packetizer_sink_first = mac_crossbar_source_first;
assign mac_packetizer_sink_last = mac_crossbar_source_last;
assign mac_packetizer_sink_payload_ethernet_type = mac_crossbar_source_payload_ethernet_type;
assign mac_packetizer_sink_payload_sender_mac = mac_crossbar_source_payload_sender_mac;
assign mac_packetizer_sink_payload_target_mac = mac_crossbar_source_payload_target_mac;
assign mac_packetizer_sink_payload_data = mac_crossbar_source_payload_data;
assign mac_packetizer_sink_payload_last_be = mac_crossbar_source_payload_last_be;
assign mac_packetizer_sink_payload_error = mac_crossbar_source_payload_error;
assign mac_tx_cdc_sink_valid = mac_packetizer_source_valid;
assign mac_packetizer_source_ready = mac_tx_cdc_sink_ready;
assign mac_tx_cdc_sink_first = mac_packetizer_source_first;
assign mac_tx_cdc_sink_last = mac_packetizer_source_last;
assign mac_tx_cdc_sink_payload_data = mac_packetizer_source_payload_data;
assign mac_tx_cdc_sink_payload_last_be = mac_packetizer_source_payload_last_be;
assign mac_tx_cdc_sink_payload_error = mac_packetizer_source_payload_error;
assign mac_depacketizer_sink_valid = mac_rx_cdc_source_valid;
assign mac_rx_cdc_source_ready = mac_depacketizer_sink_ready;
assign mac_depacketizer_sink_first = mac_rx_cdc_source_first;
assign mac_depacketizer_sink_last = mac_rx_cdc_source_last;
assign mac_depacketizer_sink_payload_data = mac_rx_cdc_source_payload_data;
assign mac_depacketizer_sink_payload_last_be = mac_rx_cdc_source_payload_last_be;
assign mac_depacketizer_sink_payload_error = mac_rx_cdc_source_payload_error;
assign mac_crossbar_sink_valid = mac_depacketizer_source_valid;
assign mac_depacketizer_source_ready = mac_crossbar_sink_ready;
assign mac_crossbar_sink_first = mac_depacketizer_source_first;
assign mac_crossbar_sink_last = mac_depacketizer_source_last;
assign mac_crossbar_sink_payload_ethernet_type = mac_depacketizer_source_payload_ethernet_type;
assign mac_crossbar_sink_payload_sender_mac = mac_depacketizer_source_payload_sender_mac;
assign mac_crossbar_sink_payload_target_mac = mac_depacketizer_source_payload_target_mac;
assign mac_crossbar_sink_payload_data = mac_depacketizer_source_payload_data;
assign mac_crossbar_sink_payload_last_be = mac_depacketizer_source_payload_last_be;
assign mac_crossbar_sink_payload_error = mac_depacketizer_source_payload_error;
assign mac_ps_preamble_error_i = mac_preamble_checker_error;
assign mac_ps_crc_error_i = mac_crc32_checker_error;
always @(*) begin
	mac_tx_gap_inserter_source_last <= 1'd0;
	mac_tx_gap_inserter_source_payload_data <= 8'd0;
	mac_tx_gap_inserter_source_payload_last_be <= 1'd0;
	mac_tx_gap_inserter_source_payload_error <= 1'd0;
	mac_tx_gap_inserter_source_valid <= 1'd0;
	mac_tx_gap_inserter_sink_ready <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacgap_next_state <= 1'd0;
	mac_tx_gap_inserter_counter_liteethmacgap_next_value <= 4'd0;
	mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd0;
	mac_tx_gap_inserter_source_first <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacgap_next_state <= liteethudpipcore_liteethmac_liteethmacgap_state;
	case (liteethudpipcore_liteethmac_liteethmacgap_state)
		1'd1: begin
			mac_tx_gap_inserter_counter_liteethmacgap_next_value <= (mac_tx_gap_inserter_counter + 1'd1);
			mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd1;
			if ((mac_tx_gap_inserter_counter == 4'd11)) begin
				liteethudpipcore_liteethmac_liteethmacgap_next_state <= 1'd0;
			end
		end
		default: begin
			mac_tx_gap_inserter_counter_liteethmacgap_next_value <= 1'd0;
			mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd1;
			mac_tx_gap_inserter_source_valid <= mac_tx_gap_inserter_sink_valid;
			mac_tx_gap_inserter_sink_ready <= mac_tx_gap_inserter_source_ready;
			mac_tx_gap_inserter_source_first <= mac_tx_gap_inserter_sink_first;
			mac_tx_gap_inserter_source_last <= mac_tx_gap_inserter_sink_last;
			mac_tx_gap_inserter_source_payload_data <= mac_tx_gap_inserter_sink_payload_data;
			mac_tx_gap_inserter_source_payload_last_be <= mac_tx_gap_inserter_sink_payload_last_be;
			mac_tx_gap_inserter_source_payload_error <= mac_tx_gap_inserter_sink_payload_error;
			if (((mac_tx_gap_inserter_sink_valid & mac_tx_gap_inserter_sink_last) & mac_tx_gap_inserter_sink_ready)) begin
				liteethudpipcore_liteethmac_liteethmacgap_next_state <= 1'd1;
			end
		end
	endcase
end
assign mac_preamble_inserter_source_payload_last_be = mac_preamble_inserter_sink_payload_last_be;
always @(*) begin
	mac_preamble_inserter_sink_ready <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state <= 2'd0;
	mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= 3'd0;
	mac_preamble_inserter_source_valid <= 1'd0;
	mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd0;
	mac_preamble_inserter_source_first <= 1'd0;
	mac_preamble_inserter_source_last <= 1'd0;
	mac_preamble_inserter_source_payload_data <= 8'd0;
	mac_preamble_inserter_source_payload_error <= 1'd0;
	mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_sink_payload_data;
	liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state <= liteethudpipcore_liteethmac_liteethmacpreambleinserter_state;
	case (liteethudpipcore_liteethmac_liteethmacpreambleinserter_state)
		1'd1: begin
			mac_preamble_inserter_source_valid <= 1'd1;
			case (mac_preamble_inserter_count)
				1'd0: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[7:0];
				end
				1'd1: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[15:8];
				end
				2'd2: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[23:16];
				end
				2'd3: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[31:24];
				end
				3'd4: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[39:32];
				end
				3'd5: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[47:40];
				end
				3'd6: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[55:48];
				end
				default: begin
					mac_preamble_inserter_source_payload_data <= mac_preamble_inserter_preamble[63:56];
				end
			endcase
			if (mac_preamble_inserter_source_ready) begin
				if ((mac_preamble_inserter_count == 3'd7)) begin
					liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state <= 2'd2;
				end else begin
					mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= (mac_preamble_inserter_count + 1'd1);
					mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd1;
				end
			end
		end
		2'd2: begin
			mac_preamble_inserter_source_valid <= mac_preamble_inserter_sink_valid;
			mac_preamble_inserter_sink_ready <= mac_preamble_inserter_source_ready;
			mac_preamble_inserter_source_first <= mac_preamble_inserter_sink_first;
			mac_preamble_inserter_source_last <= mac_preamble_inserter_sink_last;
			mac_preamble_inserter_source_payload_error <= mac_preamble_inserter_sink_payload_error;
			if (((mac_preamble_inserter_sink_valid & mac_preamble_inserter_sink_last) & mac_preamble_inserter_source_ready)) begin
				liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state <= 1'd0;
			end
		end
		default: begin
			mac_preamble_inserter_sink_ready <= 1'd1;
			mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= 1'd0;
			mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd1;
			if (mac_preamble_inserter_sink_valid) begin
				mac_preamble_inserter_sink_ready <= 1'd0;
				liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state <= 1'd1;
			end
		end
	endcase
end
assign mac_preamble_checker_source_payload_data = mac_preamble_checker_sink_payload_data;
assign mac_preamble_checker_source_payload_last_be = mac_preamble_checker_sink_payload_last_be;
always @(*) begin
	mac_preamble_checker_sink_ready <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state <= 1'd0;
	mac_preamble_checker_source_payload_error <= 1'd0;
	mac_preamble_checker_error <= 1'd0;
	mac_preamble_checker_source_valid <= 1'd0;
	mac_preamble_checker_source_first <= 1'd0;
	mac_preamble_checker_source_last <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state <= liteethudpipcore_liteethmac_liteethmacpreamblechecker_state;
	case (liteethudpipcore_liteethmac_liteethmacpreamblechecker_state)
		1'd1: begin
			mac_preamble_checker_source_valid <= mac_preamble_checker_sink_valid;
			mac_preamble_checker_sink_ready <= mac_preamble_checker_source_ready;
			mac_preamble_checker_source_first <= mac_preamble_checker_sink_first;
			mac_preamble_checker_source_last <= mac_preamble_checker_sink_last;
			mac_preamble_checker_source_payload_error <= mac_preamble_checker_sink_payload_error;
			if (((mac_preamble_checker_source_valid & mac_preamble_checker_source_last) & mac_preamble_checker_source_ready)) begin
				liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state <= 1'd0;
			end
		end
		default: begin
			mac_preamble_checker_sink_ready <= 1'd1;
			if (((mac_preamble_checker_sink_valid & (~mac_preamble_checker_sink_last)) & (mac_preamble_checker_sink_payload_data == 8'd213))) begin
				liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state <= 1'd1;
			end
			if ((mac_preamble_checker_sink_valid & mac_preamble_checker_sink_last)) begin
				mac_preamble_checker_error <= 1'd1;
			end
		end
	endcase
end
assign mac_crc32_inserter_cnt_done = (mac_crc32_inserter_cnt == 1'd0);
assign mac_crc32_inserter_data1 = mac_crc32_inserter_data0;
assign mac_crc32_inserter_last = mac_crc32_inserter_reg;
assign mac_crc32_inserter_value = (~{mac_crc32_inserter_reg[0], mac_crc32_inserter_reg[1], mac_crc32_inserter_reg[2], mac_crc32_inserter_reg[3], mac_crc32_inserter_reg[4], mac_crc32_inserter_reg[5], mac_crc32_inserter_reg[6], mac_crc32_inserter_reg[7], mac_crc32_inserter_reg[8], mac_crc32_inserter_reg[9], mac_crc32_inserter_reg[10], mac_crc32_inserter_reg[11], mac_crc32_inserter_reg[12], mac_crc32_inserter_reg[13], mac_crc32_inserter_reg[14], mac_crc32_inserter_reg[15], mac_crc32_inserter_reg[16], mac_crc32_inserter_reg[17], mac_crc32_inserter_reg[18], mac_crc32_inserter_reg[19], mac_crc32_inserter_reg[20], mac_crc32_inserter_reg[21], mac_crc32_inserter_reg[22], mac_crc32_inserter_reg[23], mac_crc32_inserter_reg[24], mac_crc32_inserter_reg[25], mac_crc32_inserter_reg[26], mac_crc32_inserter_reg[27], mac_crc32_inserter_reg[28], mac_crc32_inserter_reg[29], mac_crc32_inserter_reg[30], mac_crc32_inserter_reg[31]});
assign mac_crc32_inserter_error = (mac_crc32_inserter_next != 32'd3338984827);
always @(*) begin
	mac_crc32_inserter_next <= 32'd0;
	mac_crc32_inserter_next[0] <= (((mac_crc32_inserter_last[24] ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[1] <= (((((((mac_crc32_inserter_last[25] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[2] <= (((((((((mac_crc32_inserter_last[26] ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[3] <= (((((((mac_crc32_inserter_last[27] ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[4] <= (((((((((mac_crc32_inserter_last[28] ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[5] <= (((((((((((((mac_crc32_inserter_last[29] ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[6] <= (((((((((((mac_crc32_inserter_last[30] ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[7] <= (((((((((mac_crc32_inserter_last[31] ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[8] <= ((((((((mac_crc32_inserter_last[0] ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[9] <= ((((((((mac_crc32_inserter_last[1] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[10] <= ((((((((mac_crc32_inserter_last[2] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[11] <= ((((((((mac_crc32_inserter_last[3] ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[12] <= ((((((((((((mac_crc32_inserter_last[4] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[13] <= ((((((((((((mac_crc32_inserter_last[5] ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[14] <= ((((((((((mac_crc32_inserter_last[6] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]);
	mac_crc32_inserter_next[15] <= ((((((((mac_crc32_inserter_last[7] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]);
	mac_crc32_inserter_next[16] <= ((((((mac_crc32_inserter_last[8] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[17] <= ((((((mac_crc32_inserter_last[9] ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[18] <= ((((((mac_crc32_inserter_last[10] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]);
	mac_crc32_inserter_next[19] <= ((((mac_crc32_inserter_last[11] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]);
	mac_crc32_inserter_next[20] <= ((mac_crc32_inserter_last[12] ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]);
	mac_crc32_inserter_next[21] <= ((mac_crc32_inserter_last[13] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]);
	mac_crc32_inserter_next[22] <= ((mac_crc32_inserter_last[14] ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[23] <= ((((((mac_crc32_inserter_last[15] ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_data1[6]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[24] <= ((((((mac_crc32_inserter_last[16] ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[25] <= ((((mac_crc32_inserter_last[17] ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]);
	mac_crc32_inserter_next[26] <= ((((((((mac_crc32_inserter_last[18] ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]) ^ mac_crc32_inserter_last[24]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_data1[7]);
	mac_crc32_inserter_next[27] <= ((((((((mac_crc32_inserter_last[19] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]) ^ mac_crc32_inserter_last[25]) ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_data1[6]);
	mac_crc32_inserter_next[28] <= ((((((mac_crc32_inserter_last[20] ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]) ^ mac_crc32_inserter_last[26]) ^ mac_crc32_inserter_data1[5]);
	mac_crc32_inserter_next[29] <= ((((((mac_crc32_inserter_last[21] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[30]) ^ mac_crc32_inserter_data1[1]) ^ mac_crc32_inserter_last[27]) ^ mac_crc32_inserter_data1[4]);
	mac_crc32_inserter_next[30] <= ((((mac_crc32_inserter_last[22] ^ mac_crc32_inserter_last[31]) ^ mac_crc32_inserter_data1[0]) ^ mac_crc32_inserter_last[28]) ^ mac_crc32_inserter_data1[3]);
	mac_crc32_inserter_next[31] <= ((mac_crc32_inserter_last[23] ^ mac_crc32_inserter_last[29]) ^ mac_crc32_inserter_data1[2]);
end
always @(*) begin
	mac_crc32_inserter_is_ongoing0 <= 1'd0;
	mac_crc32_inserter_sink_ready <= 1'd0;
	mac_crc32_inserter_is_ongoing1 <= 1'd0;
	mac_crc32_inserter_ce <= 1'd0;
	mac_crc32_inserter_reset <= 1'd0;
	mac_crc32_inserter_data0 <= 8'd0;
	mac_crc32_inserter_source_valid <= 1'd0;
	mac_crc32_inserter_source_first <= 1'd0;
	mac_crc32_inserter_source_last <= 1'd0;
	mac_crc32_inserter_source_payload_data <= 8'd0;
	mac_crc32_inserter_source_payload_last_be <= 1'd0;
	mac_crc32_inserter_source_payload_error <= 1'd0;
	liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state <= 2'd0;
	liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state <= liteethudpipcore_liteethmac_liteethmaccrc32inserter_state;
	case (liteethudpipcore_liteethmac_liteethmaccrc32inserter_state)
		1'd1: begin
			mac_crc32_inserter_ce <= (mac_crc32_inserter_sink_valid & mac_crc32_inserter_source_ready);
			mac_crc32_inserter_data0 <= mac_crc32_inserter_sink_payload_data;
			mac_crc32_inserter_source_valid <= mac_crc32_inserter_sink_valid;
			mac_crc32_inserter_sink_ready <= mac_crc32_inserter_source_ready;
			mac_crc32_inserter_source_first <= mac_crc32_inserter_sink_first;
			mac_crc32_inserter_source_last <= mac_crc32_inserter_sink_last;
			mac_crc32_inserter_source_payload_data <= mac_crc32_inserter_sink_payload_data;
			mac_crc32_inserter_source_payload_last_be <= mac_crc32_inserter_sink_payload_last_be;
			mac_crc32_inserter_source_payload_error <= mac_crc32_inserter_sink_payload_error;
			mac_crc32_inserter_source_last <= 1'd0;
			if (((mac_crc32_inserter_sink_valid & mac_crc32_inserter_sink_last) & mac_crc32_inserter_source_ready)) begin
				liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state <= 2'd2;
			end
		end
		2'd2: begin
			mac_crc32_inserter_source_valid <= 1'd1;
			case (mac_crc32_inserter_cnt)
				1'd0: begin
					mac_crc32_inserter_source_payload_data <= mac_crc32_inserter_value[31:24];
				end
				1'd1: begin
					mac_crc32_inserter_source_payload_data <= mac_crc32_inserter_value[23:16];
				end
				2'd2: begin
					mac_crc32_inserter_source_payload_data <= mac_crc32_inserter_value[15:8];
				end
				default: begin
					mac_crc32_inserter_source_payload_data <= mac_crc32_inserter_value[7:0];
				end
			endcase
			if (mac_crc32_inserter_cnt_done) begin
				mac_crc32_inserter_source_last <= 1'd1;
				if (mac_crc32_inserter_source_ready) begin
					liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state <= 1'd0;
				end
			end
			mac_crc32_inserter_is_ongoing1 <= 1'd1;
		end
		default: begin
			mac_crc32_inserter_reset <= 1'd1;
			mac_crc32_inserter_sink_ready <= 1'd1;
			if (mac_crc32_inserter_sink_valid) begin
				mac_crc32_inserter_sink_ready <= 1'd0;
				liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state <= 1'd1;
			end
			mac_crc32_inserter_is_ongoing0 <= 1'd1;
		end
	endcase
end
assign mac_crc32_checker_fifo_full = (mac_crc32_checker_syncfifo_level == 3'd4);
assign mac_crc32_checker_fifo_in = (mac_crc32_checker_sink_sink_valid & ((~mac_crc32_checker_fifo_full) | mac_crc32_checker_fifo_out));
assign mac_crc32_checker_fifo_out = (mac_crc32_checker_source_source_valid & mac_crc32_checker_source_source_ready);
assign mac_crc32_checker_syncfifo_sink_first = mac_crc32_checker_sink_sink_first;
assign mac_crc32_checker_syncfifo_sink_last = mac_crc32_checker_sink_sink_last;
assign mac_crc32_checker_syncfifo_sink_payload_data = mac_crc32_checker_sink_sink_payload_data;
assign mac_crc32_checker_syncfifo_sink_payload_last_be = mac_crc32_checker_sink_sink_payload_last_be;
assign mac_crc32_checker_syncfifo_sink_payload_error = mac_crc32_checker_sink_sink_payload_error;
always @(*) begin
	mac_crc32_checker_syncfifo_sink_valid <= 1'd0;
	mac_crc32_checker_syncfifo_sink_valid <= mac_crc32_checker_sink_sink_valid;
	mac_crc32_checker_syncfifo_sink_valid <= mac_crc32_checker_fifo_in;
end
always @(*) begin
	mac_crc32_checker_sink_sink_ready <= 1'd0;
	mac_crc32_checker_sink_sink_ready <= mac_crc32_checker_syncfifo_sink_ready;
	mac_crc32_checker_sink_sink_ready <= mac_crc32_checker_fifo_in;
end
assign mac_crc32_checker_source_source_valid = (mac_crc32_checker_sink_sink_valid & mac_crc32_checker_fifo_full);
assign mac_crc32_checker_source_source_last = mac_crc32_checker_sink_sink_last;
assign mac_crc32_checker_syncfifo_source_ready = mac_crc32_checker_fifo_out;
assign mac_crc32_checker_source_source_payload_data = mac_crc32_checker_syncfifo_source_payload_data;
assign mac_crc32_checker_source_source_payload_last_be = mac_crc32_checker_syncfifo_source_payload_last_be;
always @(*) begin
	mac_crc32_checker_source_source_payload_error <= 1'd0;
	mac_crc32_checker_source_source_payload_error <= mac_crc32_checker_syncfifo_source_payload_error;
	mac_crc32_checker_source_source_payload_error <= (mac_crc32_checker_sink_sink_payload_error | mac_crc32_checker_crc_error);
end
assign mac_crc32_checker_error = ((mac_crc32_checker_source_source_valid & mac_crc32_checker_source_source_last) & mac_crc32_checker_crc_error);
assign mac_crc32_checker_crc_data0 = mac_crc32_checker_sink_sink_payload_data;
assign mac_crc32_checker_crc_data1 = mac_crc32_checker_crc_data0;
assign mac_crc32_checker_crc_last = mac_crc32_checker_crc_reg;
assign mac_crc32_checker_crc_value = (~{mac_crc32_checker_crc_reg[0], mac_crc32_checker_crc_reg[1], mac_crc32_checker_crc_reg[2], mac_crc32_checker_crc_reg[3], mac_crc32_checker_crc_reg[4], mac_crc32_checker_crc_reg[5], mac_crc32_checker_crc_reg[6], mac_crc32_checker_crc_reg[7], mac_crc32_checker_crc_reg[8], mac_crc32_checker_crc_reg[9], mac_crc32_checker_crc_reg[10], mac_crc32_checker_crc_reg[11], mac_crc32_checker_crc_reg[12], mac_crc32_checker_crc_reg[13], mac_crc32_checker_crc_reg[14], mac_crc32_checker_crc_reg[15], mac_crc32_checker_crc_reg[16], mac_crc32_checker_crc_reg[17], mac_crc32_checker_crc_reg[18], mac_crc32_checker_crc_reg[19], mac_crc32_checker_crc_reg[20], mac_crc32_checker_crc_reg[21], mac_crc32_checker_crc_reg[22], mac_crc32_checker_crc_reg[23], mac_crc32_checker_crc_reg[24], mac_crc32_checker_crc_reg[25], mac_crc32_checker_crc_reg[26], mac_crc32_checker_crc_reg[27], mac_crc32_checker_crc_reg[28], mac_crc32_checker_crc_reg[29], mac_crc32_checker_crc_reg[30], mac_crc32_checker_crc_reg[31]});
assign mac_crc32_checker_crc_error = (mac_crc32_checker_crc_next != 32'd3338984827);
always @(*) begin
	mac_crc32_checker_crc_next <= 32'd0;
	mac_crc32_checker_crc_next[0] <= (((mac_crc32_checker_crc_last[24] ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[1] <= (((((((mac_crc32_checker_crc_last[25] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[2] <= (((((((((mac_crc32_checker_crc_last[26] ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[3] <= (((((((mac_crc32_checker_crc_last[27] ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[4] <= (((((((((mac_crc32_checker_crc_last[28] ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[5] <= (((((((((((((mac_crc32_checker_crc_last[29] ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[6] <= (((((((((((mac_crc32_checker_crc_last[30] ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[7] <= (((((((((mac_crc32_checker_crc_last[31] ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[8] <= ((((((((mac_crc32_checker_crc_last[0] ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[9] <= ((((((((mac_crc32_checker_crc_last[1] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[10] <= ((((((((mac_crc32_checker_crc_last[2] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[11] <= ((((((((mac_crc32_checker_crc_last[3] ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[12] <= ((((((((((((mac_crc32_checker_crc_last[4] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[13] <= ((((((((((((mac_crc32_checker_crc_last[5] ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[14] <= ((((((((((mac_crc32_checker_crc_last[6] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]);
	mac_crc32_checker_crc_next[15] <= ((((((((mac_crc32_checker_crc_last[7] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]);
	mac_crc32_checker_crc_next[16] <= ((((((mac_crc32_checker_crc_last[8] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[17] <= ((((((mac_crc32_checker_crc_last[9] ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[18] <= ((((((mac_crc32_checker_crc_last[10] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]);
	mac_crc32_checker_crc_next[19] <= ((((mac_crc32_checker_crc_last[11] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]);
	mac_crc32_checker_crc_next[20] <= ((mac_crc32_checker_crc_last[12] ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]);
	mac_crc32_checker_crc_next[21] <= ((mac_crc32_checker_crc_last[13] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]);
	mac_crc32_checker_crc_next[22] <= ((mac_crc32_checker_crc_last[14] ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[23] <= ((((((mac_crc32_checker_crc_last[15] ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_data1[6]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[24] <= ((((((mac_crc32_checker_crc_last[16] ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[25] <= ((((mac_crc32_checker_crc_last[17] ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]);
	mac_crc32_checker_crc_next[26] <= ((((((((mac_crc32_checker_crc_last[18] ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]) ^ mac_crc32_checker_crc_last[24]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_data1[7]);
	mac_crc32_checker_crc_next[27] <= ((((((((mac_crc32_checker_crc_last[19] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]) ^ mac_crc32_checker_crc_last[25]) ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_data1[6]);
	mac_crc32_checker_crc_next[28] <= ((((((mac_crc32_checker_crc_last[20] ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]) ^ mac_crc32_checker_crc_last[26]) ^ mac_crc32_checker_crc_data1[5]);
	mac_crc32_checker_crc_next[29] <= ((((((mac_crc32_checker_crc_last[21] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[30]) ^ mac_crc32_checker_crc_data1[1]) ^ mac_crc32_checker_crc_last[27]) ^ mac_crc32_checker_crc_data1[4]);
	mac_crc32_checker_crc_next[30] <= ((((mac_crc32_checker_crc_last[22] ^ mac_crc32_checker_crc_last[31]) ^ mac_crc32_checker_crc_data1[0]) ^ mac_crc32_checker_crc_last[28]) ^ mac_crc32_checker_crc_data1[3]);
	mac_crc32_checker_crc_next[31] <= ((mac_crc32_checker_crc_last[23] ^ mac_crc32_checker_crc_last[29]) ^ mac_crc32_checker_crc_data1[2]);
end
assign mac_crc32_checker_syncfifo_syncfifo_din = {mac_crc32_checker_syncfifo_fifo_in_last, mac_crc32_checker_syncfifo_fifo_in_first, mac_crc32_checker_syncfifo_fifo_in_payload_error, mac_crc32_checker_syncfifo_fifo_in_payload_last_be, mac_crc32_checker_syncfifo_fifo_in_payload_data};
assign {mac_crc32_checker_syncfifo_fifo_out_last, mac_crc32_checker_syncfifo_fifo_out_first, mac_crc32_checker_syncfifo_fifo_out_payload_error, mac_crc32_checker_syncfifo_fifo_out_payload_last_be, mac_crc32_checker_syncfifo_fifo_out_payload_data} = mac_crc32_checker_syncfifo_syncfifo_dout;
assign mac_crc32_checker_syncfifo_sink_ready = mac_crc32_checker_syncfifo_syncfifo_writable;
assign mac_crc32_checker_syncfifo_syncfifo_we = mac_crc32_checker_syncfifo_sink_valid;
assign mac_crc32_checker_syncfifo_fifo_in_first = mac_crc32_checker_syncfifo_sink_first;
assign mac_crc32_checker_syncfifo_fifo_in_last = mac_crc32_checker_syncfifo_sink_last;
assign mac_crc32_checker_syncfifo_fifo_in_payload_data = mac_crc32_checker_syncfifo_sink_payload_data;
assign mac_crc32_checker_syncfifo_fifo_in_payload_last_be = mac_crc32_checker_syncfifo_sink_payload_last_be;
assign mac_crc32_checker_syncfifo_fifo_in_payload_error = mac_crc32_checker_syncfifo_sink_payload_error;
assign mac_crc32_checker_syncfifo_source_valid = mac_crc32_checker_syncfifo_syncfifo_readable;
assign mac_crc32_checker_syncfifo_source_first = mac_crc32_checker_syncfifo_fifo_out_first;
assign mac_crc32_checker_syncfifo_source_last = mac_crc32_checker_syncfifo_fifo_out_last;
assign mac_crc32_checker_syncfifo_source_payload_data = mac_crc32_checker_syncfifo_fifo_out_payload_data;
assign mac_crc32_checker_syncfifo_source_payload_last_be = mac_crc32_checker_syncfifo_fifo_out_payload_last_be;
assign mac_crc32_checker_syncfifo_source_payload_error = mac_crc32_checker_syncfifo_fifo_out_payload_error;
assign mac_crc32_checker_syncfifo_syncfifo_re = mac_crc32_checker_syncfifo_source_ready;
always @(*) begin
	mac_crc32_checker_syncfifo_wrport_adr <= 3'd0;
	if (mac_crc32_checker_syncfifo_replace) begin
		mac_crc32_checker_syncfifo_wrport_adr <= (mac_crc32_checker_syncfifo_produce - 1'd1);
	end else begin
		mac_crc32_checker_syncfifo_wrport_adr <= mac_crc32_checker_syncfifo_produce;
	end
end
assign mac_crc32_checker_syncfifo_wrport_dat_w = mac_crc32_checker_syncfifo_syncfifo_din;
assign mac_crc32_checker_syncfifo_wrport_we = (mac_crc32_checker_syncfifo_syncfifo_we & (mac_crc32_checker_syncfifo_syncfifo_writable | mac_crc32_checker_syncfifo_replace));
assign mac_crc32_checker_syncfifo_do_read = (mac_crc32_checker_syncfifo_syncfifo_readable & mac_crc32_checker_syncfifo_syncfifo_re);
assign mac_crc32_checker_syncfifo_rdport_adr = mac_crc32_checker_syncfifo_consume;
assign mac_crc32_checker_syncfifo_syncfifo_dout = mac_crc32_checker_syncfifo_rdport_dat_r;
assign mac_crc32_checker_syncfifo_syncfifo_writable = (mac_crc32_checker_syncfifo_level != 3'd5);
assign mac_crc32_checker_syncfifo_syncfifo_readable = (mac_crc32_checker_syncfifo_level != 1'd0);
always @(*) begin
	liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state <= 2'd0;
	mac_crc32_checker_crc_ce <= 1'd0;
	mac_crc32_checker_crc_reset <= 1'd0;
	mac_crc32_checker_fifo_reset <= 1'd0;
	liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state <= liteethudpipcore_liteethmac_liteethmaccrc32checker_state;
	case (liteethudpipcore_liteethmac_liteethmaccrc32checker_state)
		1'd1: begin
			if ((mac_crc32_checker_sink_sink_valid & mac_crc32_checker_sink_sink_ready)) begin
				mac_crc32_checker_crc_ce <= 1'd1;
				liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if ((mac_crc32_checker_sink_sink_valid & mac_crc32_checker_sink_sink_ready)) begin
				mac_crc32_checker_crc_ce <= 1'd1;
				if (mac_crc32_checker_sink_sink_last) begin
					liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mac_crc32_checker_crc_reset <= 1'd1;
			mac_crc32_checker_fifo_reset <= 1'd1;
			liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state <= 1'd1;
		end
	endcase
end
assign mac_ps_preamble_error_o = (mac_ps_preamble_error_toggle_o ^ mac_ps_preamble_error_toggle_o_r);
assign mac_ps_crc_error_o = (mac_ps_crc_error_toggle_o ^ mac_ps_crc_error_toggle_o_r);
assign mac_padding_inserter_counter_done = (mac_padding_inserter_counter >= 6'd59);
always @(*) begin
	mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 16'd0;
	mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd0;
	mac_padding_inserter_sink_ready <= 1'd0;
	mac_padding_inserter_source_valid <= 1'd0;
	mac_padding_inserter_source_first <= 1'd0;
	mac_padding_inserter_source_last <= 1'd0;
	mac_padding_inserter_source_payload_data <= 8'd0;
	mac_padding_inserter_source_payload_last_be <= 1'd0;
	mac_padding_inserter_source_payload_error <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state <= liteethudpipcore_liteethmac_liteethmacpaddinginserter_state;
	case (liteethudpipcore_liteethmac_liteethmacpaddinginserter_state)
		1'd1: begin
			mac_padding_inserter_source_valid <= 1'd1;
			mac_padding_inserter_source_last <= mac_padding_inserter_counter_done;
			mac_padding_inserter_source_payload_data <= 1'd0;
			if ((mac_padding_inserter_source_valid & mac_padding_inserter_source_ready)) begin
				mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= (mac_padding_inserter_counter + 1'd1);
				mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
				if (mac_padding_inserter_counter_done) begin
					mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 1'd0;
					mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
					liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mac_padding_inserter_source_valid <= mac_padding_inserter_sink_valid;
			mac_padding_inserter_sink_ready <= mac_padding_inserter_source_ready;
			mac_padding_inserter_source_first <= mac_padding_inserter_sink_first;
			mac_padding_inserter_source_last <= mac_padding_inserter_sink_last;
			mac_padding_inserter_source_payload_data <= mac_padding_inserter_sink_payload_data;
			mac_padding_inserter_source_payload_last_be <= mac_padding_inserter_sink_payload_last_be;
			mac_padding_inserter_source_payload_error <= mac_padding_inserter_sink_payload_error;
			if ((mac_padding_inserter_source_valid & mac_padding_inserter_source_ready)) begin
				mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= (mac_padding_inserter_counter + 1'd1);
				mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
				if (mac_padding_inserter_sink_last) begin
					if ((~mac_padding_inserter_counter_done)) begin
						mac_padding_inserter_source_last <= 1'd0;
						liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state <= 1'd1;
					end else begin
						mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 1'd0;
						mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
					end
				end
			end
		end
	endcase
end
assign mac_padding_checker_source_valid = mac_padding_checker_sink_valid;
assign mac_padding_checker_sink_ready = mac_padding_checker_source_ready;
assign mac_padding_checker_source_first = mac_padding_checker_sink_first;
assign mac_padding_checker_source_last = mac_padding_checker_sink_last;
assign mac_padding_checker_source_payload_data = mac_padding_checker_sink_payload_data;
assign mac_padding_checker_source_payload_last_be = mac_padding_checker_sink_payload_last_be;
assign mac_padding_checker_source_payload_error = mac_padding_checker_sink_payload_error;
assign mac_tx_cdc_asyncfifo_din = {mac_tx_cdc_fifo_in_last, mac_tx_cdc_fifo_in_first, mac_tx_cdc_fifo_in_payload_error, mac_tx_cdc_fifo_in_payload_last_be, mac_tx_cdc_fifo_in_payload_data};
assign {mac_tx_cdc_fifo_out_last, mac_tx_cdc_fifo_out_first, mac_tx_cdc_fifo_out_payload_error, mac_tx_cdc_fifo_out_payload_last_be, mac_tx_cdc_fifo_out_payload_data} = mac_tx_cdc_asyncfifo_dout;
assign mac_tx_cdc_sink_ready = mac_tx_cdc_asyncfifo_writable;
assign mac_tx_cdc_asyncfifo_we = mac_tx_cdc_sink_valid;
assign mac_tx_cdc_fifo_in_first = mac_tx_cdc_sink_first;
assign mac_tx_cdc_fifo_in_last = mac_tx_cdc_sink_last;
assign mac_tx_cdc_fifo_in_payload_data = mac_tx_cdc_sink_payload_data;
assign mac_tx_cdc_fifo_in_payload_last_be = mac_tx_cdc_sink_payload_last_be;
assign mac_tx_cdc_fifo_in_payload_error = mac_tx_cdc_sink_payload_error;
assign mac_tx_cdc_source_valid = mac_tx_cdc_asyncfifo_readable;
assign mac_tx_cdc_source_first = mac_tx_cdc_fifo_out_first;
assign mac_tx_cdc_source_last = mac_tx_cdc_fifo_out_last;
assign mac_tx_cdc_source_payload_data = mac_tx_cdc_fifo_out_payload_data;
assign mac_tx_cdc_source_payload_last_be = mac_tx_cdc_fifo_out_payload_last_be;
assign mac_tx_cdc_source_payload_error = mac_tx_cdc_fifo_out_payload_error;
assign mac_tx_cdc_asyncfifo_re = mac_tx_cdc_source_ready;
assign mac_tx_cdc_graycounter0_ce = (mac_tx_cdc_asyncfifo_writable & mac_tx_cdc_asyncfifo_we);
assign mac_tx_cdc_graycounter1_ce = (mac_tx_cdc_asyncfifo_readable & mac_tx_cdc_asyncfifo_re);
assign mac_tx_cdc_asyncfifo_writable = (((mac_tx_cdc_graycounter0_q[6] == mac_tx_cdc_consume_wdomain[6]) | (mac_tx_cdc_graycounter0_q[5] == mac_tx_cdc_consume_wdomain[5])) | (mac_tx_cdc_graycounter0_q[4:0] != mac_tx_cdc_consume_wdomain[4:0]));
assign mac_tx_cdc_asyncfifo_readable = (mac_tx_cdc_graycounter1_q != mac_tx_cdc_produce_rdomain);
assign mac_tx_cdc_wrport_adr = mac_tx_cdc_graycounter0_q_binary[5:0];
assign mac_tx_cdc_wrport_dat_w = mac_tx_cdc_asyncfifo_din;
assign mac_tx_cdc_wrport_we = mac_tx_cdc_graycounter0_ce;
assign mac_tx_cdc_rdport_adr = mac_tx_cdc_graycounter1_q_next_binary[5:0];
assign mac_tx_cdc_asyncfifo_dout = mac_tx_cdc_rdport_dat_r;
always @(*) begin
	mac_tx_cdc_graycounter0_q_next_binary <= 7'd0;
	if (mac_tx_cdc_graycounter0_ce) begin
		mac_tx_cdc_graycounter0_q_next_binary <= (mac_tx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		mac_tx_cdc_graycounter0_q_next_binary <= mac_tx_cdc_graycounter0_q_binary;
	end
end
assign mac_tx_cdc_graycounter0_q_next = (mac_tx_cdc_graycounter0_q_next_binary ^ mac_tx_cdc_graycounter0_q_next_binary[6:1]);
always @(*) begin
	mac_tx_cdc_graycounter1_q_next_binary <= 7'd0;
	if (mac_tx_cdc_graycounter1_ce) begin
		mac_tx_cdc_graycounter1_q_next_binary <= (mac_tx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		mac_tx_cdc_graycounter1_q_next_binary <= mac_tx_cdc_graycounter1_q_binary;
	end
end
assign mac_tx_cdc_graycounter1_q_next = (mac_tx_cdc_graycounter1_q_next_binary ^ mac_tx_cdc_graycounter1_q_next_binary[6:1]);
assign mac_rx_cdc_asyncfifo_din = {mac_rx_cdc_fifo_in_last, mac_rx_cdc_fifo_in_first, mac_rx_cdc_fifo_in_payload_error, mac_rx_cdc_fifo_in_payload_last_be, mac_rx_cdc_fifo_in_payload_data};
assign {mac_rx_cdc_fifo_out_last, mac_rx_cdc_fifo_out_first, mac_rx_cdc_fifo_out_payload_error, mac_rx_cdc_fifo_out_payload_last_be, mac_rx_cdc_fifo_out_payload_data} = mac_rx_cdc_asyncfifo_dout;
assign mac_rx_cdc_sink_ready = mac_rx_cdc_asyncfifo_writable;
assign mac_rx_cdc_asyncfifo_we = mac_rx_cdc_sink_valid;
assign mac_rx_cdc_fifo_in_first = mac_rx_cdc_sink_first;
assign mac_rx_cdc_fifo_in_last = mac_rx_cdc_sink_last;
assign mac_rx_cdc_fifo_in_payload_data = mac_rx_cdc_sink_payload_data;
assign mac_rx_cdc_fifo_in_payload_last_be = mac_rx_cdc_sink_payload_last_be;
assign mac_rx_cdc_fifo_in_payload_error = mac_rx_cdc_sink_payload_error;
assign mac_rx_cdc_source_valid = mac_rx_cdc_asyncfifo_readable;
assign mac_rx_cdc_source_first = mac_rx_cdc_fifo_out_first;
assign mac_rx_cdc_source_last = mac_rx_cdc_fifo_out_last;
assign mac_rx_cdc_source_payload_data = mac_rx_cdc_fifo_out_payload_data;
assign mac_rx_cdc_source_payload_last_be = mac_rx_cdc_fifo_out_payload_last_be;
assign mac_rx_cdc_source_payload_error = mac_rx_cdc_fifo_out_payload_error;
assign mac_rx_cdc_asyncfifo_re = mac_rx_cdc_source_ready;
assign mac_rx_cdc_graycounter0_ce = (mac_rx_cdc_asyncfifo_writable & mac_rx_cdc_asyncfifo_we);
assign mac_rx_cdc_graycounter1_ce = (mac_rx_cdc_asyncfifo_readable & mac_rx_cdc_asyncfifo_re);
assign mac_rx_cdc_asyncfifo_writable = (((mac_rx_cdc_graycounter0_q[6] == mac_rx_cdc_consume_wdomain[6]) | (mac_rx_cdc_graycounter0_q[5] == mac_rx_cdc_consume_wdomain[5])) | (mac_rx_cdc_graycounter0_q[4:0] != mac_rx_cdc_consume_wdomain[4:0]));
assign mac_rx_cdc_asyncfifo_readable = (mac_rx_cdc_graycounter1_q != mac_rx_cdc_produce_rdomain);
assign mac_rx_cdc_wrport_adr = mac_rx_cdc_graycounter0_q_binary[5:0];
assign mac_rx_cdc_wrport_dat_w = mac_rx_cdc_asyncfifo_din;
assign mac_rx_cdc_wrport_we = mac_rx_cdc_graycounter0_ce;
assign mac_rx_cdc_rdport_adr = mac_rx_cdc_graycounter1_q_next_binary[5:0];
assign mac_rx_cdc_asyncfifo_dout = mac_rx_cdc_rdport_dat_r;
always @(*) begin
	mac_rx_cdc_graycounter0_q_next_binary <= 7'd0;
	if (mac_rx_cdc_graycounter0_ce) begin
		mac_rx_cdc_graycounter0_q_next_binary <= (mac_rx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		mac_rx_cdc_graycounter0_q_next_binary <= mac_rx_cdc_graycounter0_q_binary;
	end
end
assign mac_rx_cdc_graycounter0_q_next = (mac_rx_cdc_graycounter0_q_next_binary ^ mac_rx_cdc_graycounter0_q_next_binary[6:1]);
always @(*) begin
	mac_rx_cdc_graycounter1_q_next_binary <= 7'd0;
	if (mac_rx_cdc_graycounter1_ce) begin
		mac_rx_cdc_graycounter1_q_next_binary <= (mac_rx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		mac_rx_cdc_graycounter1_q_next_binary <= mac_rx_cdc_graycounter1_q_binary;
	end
end
assign mac_rx_cdc_graycounter1_q_next = (mac_rx_cdc_graycounter1_q_next_binary ^ mac_rx_cdc_graycounter1_q_next_binary[6:1]);
assign mac_padding_inserter_sink_valid = mac_tx_cdc_source_valid;
assign mac_tx_cdc_source_ready = mac_padding_inserter_sink_ready;
assign mac_padding_inserter_sink_first = mac_tx_cdc_source_first;
assign mac_padding_inserter_sink_last = mac_tx_cdc_source_last;
assign mac_padding_inserter_sink_payload_data = mac_tx_cdc_source_payload_data;
assign mac_padding_inserter_sink_payload_last_be = mac_tx_cdc_source_payload_last_be;
assign mac_padding_inserter_sink_payload_error = mac_tx_cdc_source_payload_error;
assign mac_crc32_inserter_sink_valid = mac_padding_inserter_source_valid;
assign mac_padding_inserter_source_ready = mac_crc32_inserter_sink_ready;
assign mac_crc32_inserter_sink_first = mac_padding_inserter_source_first;
assign mac_crc32_inserter_sink_last = mac_padding_inserter_source_last;
assign mac_crc32_inserter_sink_payload_data = mac_padding_inserter_source_payload_data;
assign mac_crc32_inserter_sink_payload_last_be = mac_padding_inserter_source_payload_last_be;
assign mac_crc32_inserter_sink_payload_error = mac_padding_inserter_source_payload_error;
assign mac_preamble_inserter_sink_valid = mac_crc32_inserter_source_valid;
assign mac_crc32_inserter_source_ready = mac_preamble_inserter_sink_ready;
assign mac_preamble_inserter_sink_first = mac_crc32_inserter_source_first;
assign mac_preamble_inserter_sink_last = mac_crc32_inserter_source_last;
assign mac_preamble_inserter_sink_payload_data = mac_crc32_inserter_source_payload_data;
assign mac_preamble_inserter_sink_payload_last_be = mac_crc32_inserter_source_payload_last_be;
assign mac_preamble_inserter_sink_payload_error = mac_crc32_inserter_source_payload_error;
assign mac_tx_gap_inserter_sink_valid = mac_preamble_inserter_source_valid;
assign mac_preamble_inserter_source_ready = mac_tx_gap_inserter_sink_ready;
assign mac_tx_gap_inserter_sink_first = mac_preamble_inserter_source_first;
assign mac_tx_gap_inserter_sink_last = mac_preamble_inserter_source_last;
assign mac_tx_gap_inserter_sink_payload_data = mac_preamble_inserter_source_payload_data;
assign mac_tx_gap_inserter_sink_payload_last_be = mac_preamble_inserter_source_payload_last_be;
assign mac_tx_gap_inserter_sink_payload_error = mac_preamble_inserter_source_payload_error;
assign ethphy_sink_valid = mac_tx_gap_inserter_source_valid;
assign mac_tx_gap_inserter_source_ready = ethphy_sink_ready;
assign ethphy_sink_first = mac_tx_gap_inserter_source_first;
assign ethphy_sink_last = mac_tx_gap_inserter_source_last;
assign ethphy_sink_payload_data = mac_tx_gap_inserter_source_payload_data;
assign ethphy_sink_payload_last_be = mac_tx_gap_inserter_source_payload_last_be;
assign ethphy_sink_payload_error = mac_tx_gap_inserter_source_payload_error;
assign mac_preamble_checker_sink_valid = ethphy_liteethphyrgmiirx_source_valid;
assign ethphy_liteethphyrgmiirx_source_ready = mac_preamble_checker_sink_ready;
assign mac_preamble_checker_sink_first = ethphy_liteethphyrgmiirx_source_first;
assign mac_preamble_checker_sink_last = ethphy_liteethphyrgmiirx_source_last;
assign mac_preamble_checker_sink_payload_data = ethphy_liteethphyrgmiirx_source_payload_data;
assign mac_preamble_checker_sink_payload_last_be = ethphy_liteethphyrgmiirx_source_payload_last_be;
assign mac_preamble_checker_sink_payload_error = ethphy_liteethphyrgmiirx_source_payload_error;
assign mac_crc32_checker_sink_sink_valid = mac_preamble_checker_source_valid;
assign mac_preamble_checker_source_ready = mac_crc32_checker_sink_sink_ready;
assign mac_crc32_checker_sink_sink_first = mac_preamble_checker_source_first;
assign mac_crc32_checker_sink_sink_last = mac_preamble_checker_source_last;
assign mac_crc32_checker_sink_sink_payload_data = mac_preamble_checker_source_payload_data;
assign mac_crc32_checker_sink_sink_payload_last_be = mac_preamble_checker_source_payload_last_be;
assign mac_crc32_checker_sink_sink_payload_error = mac_preamble_checker_source_payload_error;
assign mac_padding_checker_sink_valid = mac_crc32_checker_source_source_valid;
assign mac_crc32_checker_source_source_ready = mac_padding_checker_sink_ready;
assign mac_padding_checker_sink_first = mac_crc32_checker_source_source_first;
assign mac_padding_checker_sink_last = mac_crc32_checker_source_source_last;
assign mac_padding_checker_sink_payload_data = mac_crc32_checker_source_source_payload_data;
assign mac_padding_checker_sink_payload_last_be = mac_crc32_checker_source_source_payload_last_be;
assign mac_padding_checker_sink_payload_error = mac_crc32_checker_source_source_payload_error;
assign mac_rx_cdc_sink_valid = mac_padding_checker_source_valid;
assign mac_padding_checker_source_ready = mac_rx_cdc_sink_ready;
assign mac_rx_cdc_sink_first = mac_padding_checker_source_first;
assign mac_rx_cdc_sink_last = mac_padding_checker_source_last;
assign mac_rx_cdc_sink_payload_data = mac_padding_checker_source_payload_data;
assign mac_rx_cdc_sink_payload_last_be = mac_padding_checker_source_payload_last_be;
assign mac_rx_cdc_sink_payload_error = mac_padding_checker_source_payload_error;
always @(*) begin
	liteethudpipcore_liteethmac_sel0 <= 2'd0;
	case (mac_crossbar_sink_payload_ethernet_type)
		12'd2048: begin
			liteethudpipcore_liteethmac_sel0 <= 2'd2;
		end
		12'd2054: begin
			liteethudpipcore_liteethmac_sel0 <= 1'd1;
		end
		default: begin
			liteethudpipcore_liteethmac_sel0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethmac_request <= 2'd0;
	liteethudpipcore_liteethmac_request[0] <= liteethudpipcore_liteethmac_status0_ongoing0;
	liteethudpipcore_liteethmac_request[1] <= liteethudpipcore_liteethmac_status1_ongoing0;
end
always @(*) begin
	arp_mac_port_sink_ready <= 1'd0;
	mac_crossbar_source_valid <= 1'd0;
	mac_crossbar_source_first <= 1'd0;
	mac_crossbar_source_last <= 1'd0;
	mac_crossbar_source_payload_ethernet_type <= 16'd0;
	mac_crossbar_source_payload_sender_mac <= 48'd0;
	mac_crossbar_source_payload_target_mac <= 48'd0;
	ip_mac_port_sink_ready <= 1'd0;
	mac_crossbar_source_payload_data <= 8'd0;
	mac_crossbar_source_payload_last_be <= 1'd0;
	mac_crossbar_source_payload_error <= 1'd0;
	case (liteethudpipcore_liteethmac_grant)
		1'd0: begin
			mac_crossbar_source_valid <= arp_mac_port_sink_valid;
			arp_mac_port_sink_ready <= mac_crossbar_source_ready;
			mac_crossbar_source_first <= arp_mac_port_sink_first;
			mac_crossbar_source_last <= arp_mac_port_sink_last;
			mac_crossbar_source_payload_ethernet_type <= arp_mac_port_sink_payload_ethernet_type;
			mac_crossbar_source_payload_sender_mac <= arp_mac_port_sink_payload_sender_mac;
			mac_crossbar_source_payload_target_mac <= arp_mac_port_sink_payload_target_mac;
			mac_crossbar_source_payload_data <= arp_mac_port_sink_payload_data;
			mac_crossbar_source_payload_last_be <= arp_mac_port_sink_payload_last_be;
			mac_crossbar_source_payload_error <= arp_mac_port_sink_payload_error;
		end
		1'd1: begin
			mac_crossbar_source_valid <= ip_mac_port_sink_valid;
			ip_mac_port_sink_ready <= mac_crossbar_source_ready;
			mac_crossbar_source_first <= ip_mac_port_sink_first;
			mac_crossbar_source_last <= ip_mac_port_sink_last;
			mac_crossbar_source_payload_ethernet_type <= ip_mac_port_sink_payload_ethernet_type;
			mac_crossbar_source_payload_sender_mac <= ip_mac_port_sink_payload_sender_mac;
			mac_crossbar_source_payload_target_mac <= ip_mac_port_sink_payload_target_mac;
			mac_crossbar_source_payload_data <= ip_mac_port_sink_payload_data;
			mac_crossbar_source_payload_last_be <= ip_mac_port_sink_payload_last_be;
			mac_crossbar_source_payload_error <= ip_mac_port_sink_payload_error;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethmac_status0_last <= 1'd0;
	if (arp_mac_port_sink_valid) begin
		liteethudpipcore_liteethmac_status0_last <= (arp_mac_port_sink_last & arp_mac_port_sink_ready);
	end
end
assign liteethudpipcore_liteethmac_status0_ongoing0 = ((arp_mac_port_sink_valid | liteethudpipcore_liteethmac_status0_ongoing1) & (~liteethudpipcore_liteethmac_status0_last));
always @(*) begin
	liteethudpipcore_liteethmac_status1_last <= 1'd0;
	if (ip_mac_port_sink_valid) begin
		liteethudpipcore_liteethmac_status1_last <= (ip_mac_port_sink_last & ip_mac_port_sink_ready);
	end
end
assign liteethudpipcore_liteethmac_status1_ongoing0 = ((ip_mac_port_sink_valid | liteethudpipcore_liteethmac_status1_ongoing1) & (~liteethudpipcore_liteethmac_status1_last));
always @(*) begin
	liteethudpipcore_liteethmac_sel1 <= 2'd0;
	if (liteethudpipcore_liteethmac_first) begin
		liteethudpipcore_liteethmac_sel1 <= liteethudpipcore_liteethmac_sel0;
	end else begin
		liteethudpipcore_liteethmac_sel1 <= liteethudpipcore_liteethmac_sel_ongoing;
	end
end
always @(*) begin
	arp_mac_port_source_first <= 1'd0;
	arp_mac_port_source_last <= 1'd0;
	arp_mac_port_source_payload_ethernet_type <= 16'd0;
	arp_mac_port_source_payload_sender_mac <= 48'd0;
	arp_mac_port_source_payload_target_mac <= 48'd0;
	arp_mac_port_source_payload_data <= 8'd0;
	ip_mac_port_source_valid <= 1'd0;
	arp_mac_port_source_payload_last_be <= 1'd0;
	arp_mac_port_source_payload_error <= 1'd0;
	ip_mac_port_source_first <= 1'd0;
	ip_mac_port_source_last <= 1'd0;
	ip_mac_port_source_payload_ethernet_type <= 16'd0;
	ip_mac_port_source_payload_sender_mac <= 48'd0;
	ip_mac_port_source_payload_target_mac <= 48'd0;
	ip_mac_port_source_payload_data <= 8'd0;
	ip_mac_port_source_payload_last_be <= 1'd0;
	ip_mac_port_source_payload_error <= 1'd0;
	mac_crossbar_sink_ready <= 1'd0;
	arp_mac_port_source_valid <= 1'd0;
	case (liteethudpipcore_liteethmac_sel1)
		1'd1: begin
			arp_mac_port_source_valid <= mac_crossbar_sink_valid;
			mac_crossbar_sink_ready <= arp_mac_port_source_ready;
			arp_mac_port_source_first <= mac_crossbar_sink_first;
			arp_mac_port_source_last <= mac_crossbar_sink_last;
			arp_mac_port_source_payload_ethernet_type <= mac_crossbar_sink_payload_ethernet_type;
			arp_mac_port_source_payload_sender_mac <= mac_crossbar_sink_payload_sender_mac;
			arp_mac_port_source_payload_target_mac <= mac_crossbar_sink_payload_target_mac;
			arp_mac_port_source_payload_data <= mac_crossbar_sink_payload_data;
			arp_mac_port_source_payload_last_be <= mac_crossbar_sink_payload_last_be;
			arp_mac_port_source_payload_error <= mac_crossbar_sink_payload_error;
		end
		2'd2: begin
			ip_mac_port_source_valid <= mac_crossbar_sink_valid;
			mac_crossbar_sink_ready <= ip_mac_port_source_ready;
			ip_mac_port_source_first <= mac_crossbar_sink_first;
			ip_mac_port_source_last <= mac_crossbar_sink_last;
			ip_mac_port_source_payload_ethernet_type <= mac_crossbar_sink_payload_ethernet_type;
			ip_mac_port_source_payload_sender_mac <= mac_crossbar_sink_payload_sender_mac;
			ip_mac_port_source_payload_target_mac <= mac_crossbar_sink_payload_target_mac;
			ip_mac_port_source_payload_data <= mac_crossbar_sink_payload_data;
			ip_mac_port_source_payload_last_be <= mac_crossbar_sink_payload_last_be;
			ip_mac_port_source_payload_error <= mac_crossbar_sink_payload_error;
		end
		default: begin
			mac_crossbar_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethmac_last <= 1'd0;
	if (mac_crossbar_sink_valid) begin
		liteethudpipcore_liteethmac_last <= (mac_crossbar_sink_last & mac_crossbar_sink_ready);
	end
end
assign liteethudpipcore_liteethmac_ongoing0 = ((mac_crossbar_sink_valid | liteethudpipcore_liteethmac_ongoing1) & (~liteethudpipcore_liteethmac_last));
always @(*) begin
	mac_packetizer_header <= 112'd0;
	mac_packetizer_header[111:96] <= {mac_packetizer_sink_payload_ethernet_type[7:0], mac_packetizer_sink_payload_ethernet_type[15:8]};
	mac_packetizer_header[95:48] <= {mac_packetizer_sink_payload_sender_mac[7:0], mac_packetizer_sink_payload_sender_mac[15:8], mac_packetizer_sink_payload_sender_mac[23:16], mac_packetizer_sink_payload_sender_mac[31:24], mac_packetizer_sink_payload_sender_mac[39:32], mac_packetizer_sink_payload_sender_mac[47:40]};
	mac_packetizer_header[47:0] <= {mac_packetizer_sink_payload_target_mac[7:0], mac_packetizer_sink_payload_target_mac[15:8], mac_packetizer_sink_payload_target_mac[23:16], mac_packetizer_sink_payload_target_mac[31:24], mac_packetizer_sink_payload_target_mac[39:32], mac_packetizer_sink_payload_target_mac[47:40]};
end
assign mac_packetizer_source_payload_error = mac_packetizer_sink_payload_error;
assign mac_packetizer_source_payload_last_be = {mac_packetizer_sink_payload_last_be};
always @(*) begin
	mac_packetizer_source_valid <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 2'd0;
	mac_packetizer_count_liteethmacpacketizer_next_value0 <= 4'd0;
	mac_packetizer_source_last <= 1'd0;
	mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd0;
	mac_packetizer_source_payload_data <= 8'd0;
	mac_packetizer_sink_ready <= 1'd0;
	mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd0;
	mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd0;
	mac_packetizer_sr_load <= 1'd0;
	mac_packetizer_sr_shift <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= liteethudpipcore_liteethmac_liteethmacpacketizer_state;
	case (liteethudpipcore_liteethmac_liteethmacpacketizer_state)
		1'd1: begin
			mac_packetizer_source_valid <= 1'd1;
			mac_packetizer_source_last <= 1'd0;
			mac_packetizer_source_payload_data <= mac_packetizer_sr[111:8];
			if ((mac_packetizer_source_valid & mac_packetizer_source_ready)) begin
				mac_packetizer_sr_shift <= 1'd1;
				if ((mac_packetizer_count == 4'd13)) begin
					mac_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 2'd3;
						mac_packetizer_count_liteethmacpacketizer_next_value0 <= (mac_packetizer_count + 1'd1);
						mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
					end else begin
						liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 2'd2;
					end
				end else begin
					mac_packetizer_count_liteethmacpacketizer_next_value0 <= (mac_packetizer_count + 1'd1);
					mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			mac_packetizer_source_valid <= mac_packetizer_sink_valid;
			mac_packetizer_source_last <= mac_packetizer_sink_last;
			mac_packetizer_source_payload_data <= mac_packetizer_sink_payload_data;
			if ((mac_packetizer_source_valid & mac_packetizer_source_ready)) begin
				mac_packetizer_sink_ready <= 1'd1;
				if (mac_packetizer_source_last) begin
					liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			mac_packetizer_source_valid <= (mac_packetizer_sink_valid | mac_packetizer_sink_d_last);
			mac_packetizer_source_last <= mac_packetizer_sink_d_last;
			if (mac_packetizer_fsm_from_idle) begin
				mac_packetizer_source_payload_data[0] <= mac_packetizer_sr[111:16];
			end else begin
				mac_packetizer_source_payload_data[0] <= mac_packetizer_sink_d_payload_data[7];
			end
			mac_packetizer_source_payload_data[7:0] <= mac_packetizer_sink_payload_data;
			if ((mac_packetizer_source_valid & mac_packetizer_source_ready)) begin
				mac_packetizer_sink_ready <= (~mac_packetizer_source_last);
				mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd0;
				mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd1;
				if (mac_packetizer_source_last) begin
					liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mac_packetizer_sink_ready <= 1'd1;
			mac_packetizer_count_liteethmacpacketizer_next_value0 <= 1'd1;
			mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
			if (mac_packetizer_sink_valid) begin
				mac_packetizer_sink_ready <= 1'd0;
				mac_packetizer_source_valid <= 1'd1;
				mac_packetizer_source_last <= 1'd0;
				mac_packetizer_source_payload_data <= mac_packetizer_header[7:0];
				if ((mac_packetizer_source_valid & mac_packetizer_source_ready)) begin
					mac_packetizer_sr_load <= 1'd1;
					mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd1;
					mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 2'd3;
						end else begin
							liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethudpipcore_liteethmac_liteethmacpacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
assign mac_depacketizer_header = mac_depacketizer_sr;
assign mac_depacketizer_source_payload_ethernet_type = {slice_proxy1[7:0], slice_proxy0[15:8]};
assign mac_depacketizer_source_payload_sender_mac = {slice_proxy7[7:0], slice_proxy6[15:8], slice_proxy5[23:16], slice_proxy4[31:24], slice_proxy3[39:32], slice_proxy2[47:40]};
assign mac_depacketizer_source_payload_target_mac = {slice_proxy13[7:0], slice_proxy12[15:8], slice_proxy11[23:16], slice_proxy10[31:24], slice_proxy9[39:32], slice_proxy8[47:40]};
assign mac_depacketizer_source_payload_error = mac_depacketizer_sink_payload_error;
assign mac_depacketizer_source_payload_last_be = {mac_depacketizer_sink_payload_last_be};
always @(*) begin
	mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd0;
	mac_depacketizer_source_last <= 1'd0;
	mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd0;
	mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd0;
	mac_depacketizer_source_payload_data <= 8'd0;
	mac_depacketizer_sink_ready <= 1'd0;
	mac_depacketizer_sr_shift <= 1'd0;
	mac_depacketizer_sr_shift_leftover <= 1'd0;
	mac_depacketizer_source_valid <= 1'd0;
	liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 2'd0;
	mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= 4'd0;
	liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= liteethudpipcore_liteethmac_liteethmacdepacketizer_state;
	case (liteethudpipcore_liteethmac_liteethmacdepacketizer_state)
		1'd1: begin
			mac_depacketizer_sink_ready <= 1'd1;
			if (mac_depacketizer_sink_valid) begin
				mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= (mac_depacketizer_count + 1'd1);
				mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
				mac_depacketizer_sr_shift <= 1'd1;
				if ((mac_depacketizer_count == 4'd13)) begin
					if (1'd0) begin
						mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= (mac_depacketizer_count + 1'd1);
						mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
						liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			mac_depacketizer_source_valid <= (mac_depacketizer_sink_valid | mac_depacketizer_sink_d_last);
			mac_depacketizer_source_last <= (mac_depacketizer_sink_last | mac_depacketizer_sink_d_last);
			mac_depacketizer_sink_ready <= mac_depacketizer_source_ready;
			mac_depacketizer_source_payload_data <= mac_depacketizer_sink_d_payload_data[7:0];
			mac_depacketizer_source_payload_data[7] <= mac_depacketizer_sink_payload_data;
			if (mac_depacketizer_fsm_from_idle) begin
				mac_depacketizer_source_valid <= mac_depacketizer_sink_d_last;
				mac_depacketizer_sink_ready <= 1'd1;
				if (mac_depacketizer_sink_valid) begin
					mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd0;
					mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd1;
					mac_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((mac_depacketizer_source_valid & mac_depacketizer_source_ready)) begin
				if (mac_depacketizer_source_last) begin
					liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			mac_depacketizer_source_valid <= (mac_depacketizer_sink_valid | mac_depacketizer_sink_d_last);
			mac_depacketizer_source_last <= (mac_depacketizer_sink_last | mac_depacketizer_sink_d_last);
			mac_depacketizer_sink_ready <= mac_depacketizer_source_ready;
			mac_depacketizer_source_payload_data <= mac_depacketizer_sink_payload_data;
			if ((mac_depacketizer_source_valid & mac_depacketizer_source_ready)) begin
				if (mac_depacketizer_source_last) begin
					liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			mac_depacketizer_sink_ready <= 1'd1;
			mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= 1'd1;
			mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
			if (mac_depacketizer_sink_valid) begin
				mac_depacketizer_sr_shift <= 1'd1;
				mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd1;
				mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign arp_table_sink_valid = arp_rx_source_source_valid;
assign arp_rx_source_source_ready = arp_table_sink_ready;
assign arp_table_sink_first = arp_rx_source_source_first;
assign arp_table_sink_last = arp_rx_source_source_last;
assign arp_table_sink_payload_reply = arp_rx_source_source_payload_reply;
assign arp_table_sink_payload_request = arp_rx_source_source_payload_request;
assign arp_table_sink_payload_ip_address = arp_rx_source_source_payload_ip_address;
assign arp_table_sink_payload_mac_address = arp_rx_source_source_payload_mac_address;
assign arp_tx_sink_sink_valid = arp_table_source_valid;
assign arp_table_source_ready = arp_tx_sink_sink_ready;
assign arp_tx_sink_sink_first = arp_table_source_first;
assign arp_tx_sink_sink_last = arp_table_source_last;
assign arp_tx_sink_sink_payload_reply = arp_table_source_payload_reply;
assign arp_tx_sink_sink_payload_request = arp_table_source_payload_request;
assign arp_tx_sink_sink_payload_ip_address = arp_table_source_payload_ip_address;
assign arp_tx_sink_sink_payload_mac_address = arp_table_source_payload_mac_address;
assign arp_mac_port_sink_valid = arp_tx_source_source_valid;
assign arp_tx_source_source_ready = arp_mac_port_sink_ready;
assign arp_mac_port_sink_first = arp_tx_source_source_first;
assign arp_mac_port_sink_last = arp_tx_source_source_last;
assign arp_mac_port_sink_payload_ethernet_type = arp_tx_source_source_payload_ethernet_type;
assign arp_mac_port_sink_payload_sender_mac = arp_tx_source_source_payload_sender_mac;
assign arp_mac_port_sink_payload_target_mac = arp_tx_source_source_payload_target_mac;
assign arp_mac_port_sink_payload_data = arp_tx_source_source_payload_data;
assign arp_mac_port_sink_payload_last_be = arp_tx_source_source_payload_last_be;
assign arp_mac_port_sink_payload_error = arp_tx_source_source_payload_error;
assign arp_rx_sink_sink_valid = arp_mac_port_source_valid;
assign arp_mac_port_source_ready = arp_rx_sink_sink_ready;
assign arp_rx_sink_sink_first = arp_mac_port_source_first;
assign arp_rx_sink_sink_last = arp_mac_port_source_last;
assign arp_rx_sink_sink_payload_ethernet_type = arp_mac_port_source_payload_ethernet_type;
assign arp_rx_sink_sink_payload_sender_mac = arp_mac_port_source_payload_sender_mac;
assign arp_rx_sink_sink_payload_target_mac = arp_mac_port_source_payload_target_mac;
assign arp_rx_sink_sink_payload_data = arp_mac_port_source_payload_data;
assign arp_rx_sink_sink_payload_last_be = arp_mac_port_source_payload_last_be;
assign arp_rx_sink_sink_payload_error = arp_mac_port_source_payload_error;
assign arp_tx_packetizer_sink_last = (arp_tx_counter == 6'd45);
assign arp_tx_packetizer_sink_param_hwtype = 1'd1;
assign arp_tx_packetizer_sink_param_proto = 12'd2048;
assign arp_tx_packetizer_sink_param_hwsize = 3'd6;
assign arp_tx_packetizer_sink_param_protosize = 3'd4;
assign arp_tx_packetizer_sink_param_sender_mac = 48'd186934156644303;
assign arp_tx_packetizer_sink_param_sender_ip = 28'd168428844;
always @(*) begin
	arp_tx_packetizer_sink_param_opcode <= 16'd0;
	arp_tx_packetizer_sink_param_target_ip <= 32'd0;
	arp_tx_packetizer_sink_param_target_mac <= 48'd0;
	if (arp_tx_sink_sink_payload_reply) begin
		arp_tx_packetizer_sink_param_opcode <= 2'd2;
		arp_tx_packetizer_sink_param_target_mac <= arp_tx_sink_sink_payload_mac_address;
		arp_tx_packetizer_sink_param_target_ip <= arp_tx_sink_sink_payload_ip_address;
	end else begin
		if (arp_tx_sink_sink_payload_request) begin
			arp_tx_packetizer_sink_param_opcode <= 1'd1;
			arp_tx_packetizer_sink_param_target_mac <= 48'd281474976710655;
			arp_tx_packetizer_sink_param_target_ip <= arp_tx_sink_sink_payload_ip_address;
		end
	end
end
always @(*) begin
	arp_tx_packetizer_header <= 224'd0;
	arp_tx_packetizer_header[39:32] <= {arp_tx_packetizer_sink_param_hwsize[7:0]};
	arp_tx_packetizer_header[15:0] <= {arp_tx_packetizer_sink_param_hwtype[7:0], arp_tx_packetizer_sink_param_hwtype[15:8]};
	arp_tx_packetizer_header[63:48] <= {arp_tx_packetizer_sink_param_opcode[7:0], arp_tx_packetizer_sink_param_opcode[15:8]};
	arp_tx_packetizer_header[31:16] <= {arp_tx_packetizer_sink_param_proto[7:0], arp_tx_packetizer_sink_param_proto[15:8]};
	arp_tx_packetizer_header[47:40] <= {arp_tx_packetizer_sink_param_protosize[7:0]};
	arp_tx_packetizer_header[143:112] <= {arp_tx_packetizer_sink_param_sender_ip[7:0], arp_tx_packetizer_sink_param_sender_ip[15:8], arp_tx_packetizer_sink_param_sender_ip[23:16], arp_tx_packetizer_sink_param_sender_ip[31:24]};
	arp_tx_packetizer_header[111:64] <= {arp_tx_packetizer_sink_param_sender_mac[7:0], arp_tx_packetizer_sink_param_sender_mac[15:8], arp_tx_packetizer_sink_param_sender_mac[23:16], arp_tx_packetizer_sink_param_sender_mac[31:24], arp_tx_packetizer_sink_param_sender_mac[39:32], arp_tx_packetizer_sink_param_sender_mac[47:40]};
	arp_tx_packetizer_header[223:192] <= {arp_tx_packetizer_sink_param_target_ip[7:0], arp_tx_packetizer_sink_param_target_ip[15:8], arp_tx_packetizer_sink_param_target_ip[23:16], arp_tx_packetizer_sink_param_target_ip[31:24]};
	arp_tx_packetizer_header[191:144] <= {arp_tx_packetizer_sink_param_target_mac[7:0], arp_tx_packetizer_sink_param_target_mac[15:8], arp_tx_packetizer_sink_param_target_mac[23:16], arp_tx_packetizer_sink_param_target_mac[31:24], arp_tx_packetizer_sink_param_target_mac[39:32], arp_tx_packetizer_sink_param_target_mac[47:40]};
end
assign arp_tx_packetizer_source_payload_error = arp_tx_packetizer_sink_payload_error;
always @(*) begin
	arp_tx_packetizer_source_valid <= 1'd0;
	arp_tx_packetizer_sink_ready <= 1'd0;
	arp_tx_packetizer_source_last <= 1'd0;
	liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 2'd0;
	arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= 5'd0;
	arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd0;
	arp_tx_packetizer_source_payload_data <= 8'd0;
	arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd0;
	arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd0;
	arp_tx_packetizer_sr_load <= 1'd0;
	arp_tx_packetizer_sr_shift <= 1'd0;
	liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= liteethudpipcore_liteetharptx_liteetharppacketizer_state;
	case (liteethudpipcore_liteetharptx_liteetharppacketizer_state)
		1'd1: begin
			arp_tx_packetizer_source_valid <= 1'd1;
			arp_tx_packetizer_source_last <= 1'd0;
			arp_tx_packetizer_source_payload_data <= arp_tx_packetizer_sr[223:8];
			if ((arp_tx_packetizer_source_valid & arp_tx_packetizer_source_ready)) begin
				arp_tx_packetizer_sr_shift <= 1'd1;
				if ((arp_tx_packetizer_count == 5'd27)) begin
					arp_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 2'd3;
						arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= (arp_tx_packetizer_count + 1'd1);
						arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
					end else begin
						liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 2'd2;
					end
				end else begin
					arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= (arp_tx_packetizer_count + 1'd1);
					arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			arp_tx_packetizer_source_valid <= arp_tx_packetizer_sink_valid;
			arp_tx_packetizer_source_last <= arp_tx_packetizer_sink_last;
			arp_tx_packetizer_source_payload_data <= arp_tx_packetizer_sink_payload_data;
			if ((arp_tx_packetizer_source_valid & arp_tx_packetizer_source_ready)) begin
				arp_tx_packetizer_sink_ready <= 1'd1;
				if (arp_tx_packetizer_source_last) begin
					liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			arp_tx_packetizer_source_valid <= (arp_tx_packetizer_sink_valid | arp_tx_packetizer_sink_d_last);
			arp_tx_packetizer_source_last <= arp_tx_packetizer_sink_d_last;
			if (arp_tx_packetizer_fsm_from_idle) begin
				arp_tx_packetizer_source_payload_data[0] <= arp_tx_packetizer_sr[223:16];
			end else begin
				arp_tx_packetizer_source_payload_data[0] <= arp_tx_packetizer_sink_d_payload_data[7];
			end
			arp_tx_packetizer_source_payload_data[7:0] <= arp_tx_packetizer_sink_payload_data;
			if ((arp_tx_packetizer_source_valid & arp_tx_packetizer_source_ready)) begin
				arp_tx_packetizer_sink_ready <= (~arp_tx_packetizer_source_last);
				arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd0;
				arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd1;
				if (arp_tx_packetizer_source_last) begin
					liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			arp_tx_packetizer_sink_ready <= 1'd1;
			arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= 1'd1;
			arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
			if (arp_tx_packetizer_sink_valid) begin
				arp_tx_packetizer_sink_ready <= 1'd0;
				arp_tx_packetizer_source_valid <= 1'd1;
				arp_tx_packetizer_source_last <= 1'd0;
				arp_tx_packetizer_source_payload_data <= arp_tx_packetizer_header[7:0];
				if ((arp_tx_packetizer_source_valid & arp_tx_packetizer_source_ready)) begin
					arp_tx_packetizer_sr_load <= 1'd1;
					arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd1;
					arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 2'd3;
						end else begin
							liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethudpipcore_liteetharptx_liteetharppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	arp_tx_packetizer_sink_valid <= 1'd0;
	arp_tx_packetizer_source_ready <= 1'd0;
	arp_tx_source_source_payload_error <= 1'd0;
	arp_tx_source_source_payload_last_be <= 1'd0;
	arp_tx_source_source_payload_target_mac <= 48'd0;
	arp_tx_source_source_valid <= 1'd0;
	arp_tx_source_source_first <= 1'd0;
	arp_tx_source_source_payload_data <= 8'd0;
	arp_tx_source_source_last <= 1'd0;
	arp_tx_source_source_payload_ethernet_type <= 16'd0;
	arp_tx_source_source_payload_sender_mac <= 48'd0;
	liteethudpipcore_liteetharptx_fsm_next_state <= 1'd0;
	arp_tx_counter_liteetharp_fsm_next_value <= 6'd0;
	arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd0;
	arp_tx_sink_sink_ready <= 1'd0;
	liteethudpipcore_liteetharptx_fsm_next_state <= liteethudpipcore_liteetharptx_fsm_state;
	case (liteethudpipcore_liteetharptx_fsm_state)
		1'd1: begin
			arp_tx_packetizer_sink_valid <= 1'd1;
			arp_tx_source_source_valid <= arp_tx_packetizer_source_valid;
			arp_tx_packetizer_source_ready <= arp_tx_source_source_ready;
			arp_tx_source_source_first <= arp_tx_packetizer_source_first;
			arp_tx_source_source_last <= arp_tx_packetizer_source_last;
			arp_tx_source_source_payload_ethernet_type <= arp_tx_packetizer_source_payload_ethernet_type;
			arp_tx_source_source_payload_sender_mac <= arp_tx_packetizer_source_payload_sender_mac;
			arp_tx_source_source_payload_target_mac <= arp_tx_packetizer_source_payload_target_mac;
			arp_tx_source_source_payload_data <= arp_tx_packetizer_source_payload_data;
			arp_tx_source_source_payload_last_be <= arp_tx_packetizer_source_payload_last_be;
			arp_tx_source_source_payload_error <= arp_tx_packetizer_source_payload_error;
			arp_tx_source_source_payload_target_mac <= arp_tx_packetizer_sink_param_target_mac;
			arp_tx_source_source_payload_sender_mac <= 48'd186934156644303;
			arp_tx_source_source_payload_ethernet_type <= 12'd2054;
			if ((arp_tx_source_source_valid & arp_tx_source_source_ready)) begin
				arp_tx_counter_liteetharp_fsm_next_value <= (arp_tx_counter + 1'd1);
				arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd1;
				if (arp_tx_source_source_last) begin
					arp_tx_sink_sink_ready <= 1'd1;
					liteethudpipcore_liteetharptx_fsm_next_state <= 1'd0;
				end
			end
		end
		default: begin
			arp_tx_sink_sink_ready <= 1'd1;
			arp_tx_counter_liteetharp_fsm_next_value <= 1'd0;
			arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd1;
			if (arp_tx_sink_sink_valid) begin
				arp_tx_sink_sink_ready <= 1'd0;
				liteethudpipcore_liteetharptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign arp_rx_depacketizer_sink_valid = arp_rx_sink_sink_valid;
assign arp_rx_sink_sink_ready = arp_rx_depacketizer_sink_ready;
assign arp_rx_depacketizer_sink_first = arp_rx_sink_sink_first;
assign arp_rx_depacketizer_sink_last = arp_rx_sink_sink_last;
assign arp_rx_depacketizer_sink_payload_ethernet_type = arp_rx_sink_sink_payload_ethernet_type;
assign arp_rx_depacketizer_sink_payload_sender_mac = arp_rx_sink_sink_payload_sender_mac;
assign arp_rx_depacketizer_sink_payload_target_mac = arp_rx_sink_sink_payload_target_mac;
assign arp_rx_depacketizer_sink_payload_data = arp_rx_sink_sink_payload_data;
assign arp_rx_depacketizer_sink_payload_last_be = arp_rx_sink_sink_payload_last_be;
assign arp_rx_depacketizer_sink_payload_error = arp_rx_sink_sink_payload_error;
always @(*) begin
	arp_rx_reply <= 1'd0;
	arp_rx_request <= 1'd0;
	case (arp_rx_depacketizer_source_param_opcode)
		1'd1: begin
			arp_rx_request <= 1'd1;
		end
		2'd2: begin
			arp_rx_reply <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign arp_rx_source_source_payload_ip_address = arp_rx_depacketizer_source_param_sender_ip;
assign arp_rx_source_source_payload_mac_address = arp_rx_depacketizer_source_param_sender_mac;
assign arp_rx_depacketizer_header = arp_rx_depacketizer_sr;
assign arp_rx_depacketizer_source_param_hwsize = {slice_proxy14[7:0]};
assign arp_rx_depacketizer_source_param_hwtype = {slice_proxy16[7:0], slice_proxy15[15:8]};
assign arp_rx_depacketizer_source_param_opcode = {slice_proxy18[7:0], slice_proxy17[15:8]};
assign arp_rx_depacketizer_source_param_proto = {slice_proxy20[7:0], slice_proxy19[15:8]};
assign arp_rx_depacketizer_source_param_protosize = {slice_proxy21[7:0]};
assign arp_rx_depacketizer_source_param_sender_ip = {slice_proxy25[7:0], slice_proxy24[15:8], slice_proxy23[23:16], slice_proxy22[31:24]};
assign arp_rx_depacketizer_source_param_sender_mac = {slice_proxy31[7:0], slice_proxy30[15:8], slice_proxy29[23:16], slice_proxy28[31:24], slice_proxy27[39:32], slice_proxy26[47:40]};
assign arp_rx_depacketizer_source_param_target_ip = {slice_proxy35[7:0], slice_proxy34[15:8], slice_proxy33[23:16], slice_proxy32[31:24]};
assign arp_rx_depacketizer_source_param_target_mac = {slice_proxy41[7:0], slice_proxy40[15:8], slice_proxy39[23:16], slice_proxy38[31:24], slice_proxy37[39:32], slice_proxy36[47:40]};
assign arp_rx_depacketizer_source_payload_error = arp_rx_depacketizer_sink_payload_error;
always @(*) begin
	arp_rx_depacketizer_source_payload_data <= 8'd0;
	arp_rx_depacketizer_sink_ready <= 1'd0;
	liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 2'd0;
	arp_rx_depacketizer_count_liteetharp_next_value0 <= 5'd0;
	arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd0;
	arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd0;
	arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd0;
	arp_rx_depacketizer_source_valid <= 1'd0;
	arp_rx_depacketizer_sr_shift <= 1'd0;
	arp_rx_depacketizer_sr_shift_leftover <= 1'd0;
	arp_rx_depacketizer_source_last <= 1'd0;
	liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= liteethudpipcore_liteetharprx_liteetharpdepacketizer_state;
	case (liteethudpipcore_liteetharprx_liteetharpdepacketizer_state)
		1'd1: begin
			arp_rx_depacketizer_sink_ready <= 1'd1;
			if (arp_rx_depacketizer_sink_valid) begin
				arp_rx_depacketizer_count_liteetharp_next_value0 <= (arp_rx_depacketizer_count + 1'd1);
				arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
				arp_rx_depacketizer_sr_shift <= 1'd1;
				if ((arp_rx_depacketizer_count == 5'd27)) begin
					if (1'd0) begin
						arp_rx_depacketizer_count_liteetharp_next_value0 <= (arp_rx_depacketizer_count + 1'd1);
						arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
						liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			arp_rx_depacketizer_source_valid <= (arp_rx_depacketizer_sink_valid | arp_rx_depacketizer_sink_d_last);
			arp_rx_depacketizer_source_last <= (arp_rx_depacketizer_sink_last | arp_rx_depacketizer_sink_d_last);
			arp_rx_depacketizer_sink_ready <= arp_rx_depacketizer_source_ready;
			arp_rx_depacketizer_source_payload_data <= arp_rx_depacketizer_sink_d_payload_data[7:0];
			arp_rx_depacketizer_source_payload_data[7] <= arp_rx_depacketizer_sink_payload_data;
			if (arp_rx_depacketizer_fsm_from_idle) begin
				arp_rx_depacketizer_source_valid <= arp_rx_depacketizer_sink_d_last;
				arp_rx_depacketizer_sink_ready <= 1'd1;
				if (arp_rx_depacketizer_sink_valid) begin
					arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd0;
					arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd1;
					arp_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((arp_rx_depacketizer_source_valid & arp_rx_depacketizer_source_ready)) begin
				if (arp_rx_depacketizer_source_last) begin
					liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			arp_rx_depacketizer_source_valid <= (arp_rx_depacketizer_sink_valid | arp_rx_depacketizer_sink_d_last);
			arp_rx_depacketizer_source_last <= (arp_rx_depacketizer_sink_last | arp_rx_depacketizer_sink_d_last);
			arp_rx_depacketizer_sink_ready <= arp_rx_depacketizer_source_ready;
			arp_rx_depacketizer_source_payload_data <= arp_rx_depacketizer_sink_payload_data;
			if ((arp_rx_depacketizer_source_valid & arp_rx_depacketizer_source_ready)) begin
				if (arp_rx_depacketizer_source_last) begin
					liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			arp_rx_depacketizer_sink_ready <= 1'd1;
			arp_rx_depacketizer_count_liteetharp_next_value0 <= 1'd1;
			arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
			if (arp_rx_depacketizer_sink_valid) begin
				arp_rx_depacketizer_sr_shift <= 1'd1;
				arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd1;
				arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	arp_rx_source_source_valid <= 1'd0;
	liteethudpipcore_liteetharprx_fsm_next_state <= 2'd0;
	arp_rx_depacketizer_source_ready <= 1'd0;
	arp_rx_source_source_payload_reply <= 1'd0;
	arp_rx_source_source_payload_request <= 1'd0;
	liteethudpipcore_liteetharprx_fsm_next_state <= liteethudpipcore_liteetharprx_fsm_state;
	case (liteethudpipcore_liteetharprx_fsm_state)
		1'd1: begin
			if (arp_rx_valid) begin
				arp_rx_source_source_valid <= 1'd1;
				arp_rx_source_source_payload_reply <= arp_rx_reply;
				arp_rx_source_source_payload_request <= arp_rx_request;
			end
			liteethudpipcore_liteetharprx_fsm_next_state <= 2'd2;
		end
		2'd2: begin
			arp_rx_depacketizer_source_ready <= 1'd1;
			if ((arp_rx_depacketizer_source_valid & arp_rx_depacketizer_source_last)) begin
				liteethudpipcore_liteetharprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			arp_rx_depacketizer_source_ready <= 1'd1;
			if (arp_rx_depacketizer_source_valid) begin
				arp_rx_depacketizer_source_ready <= 1'd0;
				liteethudpipcore_liteetharprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign arp_table_request_timer_wait = (arp_table_request_pending & (~arp_table_request_counter_ce));
assign arp_table_cached_timer_wait = (~arp_table_update);
assign arp_table_response_payload_mac_address = arp_table_cached_mac_address;
assign arp_table_request_timer_done = (arp_table_request_timer_count == 1'd0);
assign arp_table_cached_timer_done = (arp_table_cached_timer_count == 1'd0);
always @(*) begin
	arp_table_request_ready <= 1'd0;
	arp_table_request_ip_address_update <= 1'd0;
	liteethudpipcore_next_state <= 3'd0;
	arp_table_request_pending_set <= 1'd0;
	arp_table_response_valid <= 1'd0;
	arp_table_source_valid <= 1'd0;
	arp_table_request_pending_clr <= 1'd0;
	arp_table_request_counter_reset <= 1'd0;
	arp_table_response_payload_failed <= 1'd0;
	arp_table_request_counter_ce <= 1'd0;
	arp_table_source_payload_reply <= 1'd0;
	arp_table_source_payload_request <= 1'd0;
	arp_table_update <= 1'd0;
	arp_table_source_payload_ip_address <= 32'd0;
	arp_table_source_payload_mac_address <= 48'd0;
	arp_table_request_ip_address_reset <= 1'd0;
	if ((arp_table_request_counter == 3'd7)) begin
		arp_table_response_payload_failed <= 1'd1;
		arp_table_request_counter_reset <= 1'd1;
		arp_table_request_pending_clr <= 1'd1;
	end
	liteethudpipcore_next_state <= liteethudpipcore_state;
	case (liteethudpipcore_state)
		1'd1: begin
			arp_table_source_valid <= 1'd1;
			arp_table_source_payload_reply <= 1'd1;
			arp_table_source_payload_ip_address <= arp_table_sink_payload_ip_address;
			arp_table_source_payload_mac_address <= arp_table_sink_payload_mac_address;
			if (arp_table_source_ready) begin
				liteethudpipcore_next_state <= 1'd0;
			end
		end
		2'd2: begin
			arp_table_request_pending_clr <= 1'd1;
			arp_table_update <= 1'd1;
			liteethudpipcore_next_state <= 2'd3;
		end
		2'd3: begin
			if (arp_table_cached_valid) begin
				if ((arp_table_request_ip_address == arp_table_cached_ip_address)) begin
					arp_table_request_ip_address_reset <= 1'd1;
					liteethudpipcore_next_state <= 3'd5;
				end else begin
					if ((arp_table_request_payload_ip_address == arp_table_cached_ip_address)) begin
						arp_table_request_ready <= arp_table_request_valid;
						liteethudpipcore_next_state <= 3'd5;
					end else begin
						arp_table_request_ip_address_update <= arp_table_request_valid;
						liteethudpipcore_next_state <= 3'd4;
					end
				end
			end else begin
				arp_table_request_ip_address_update <= arp_table_request_valid;
				liteethudpipcore_next_state <= 3'd4;
			end
		end
		3'd4: begin
			arp_table_source_valid <= 1'd1;
			arp_table_source_payload_request <= 1'd1;
			arp_table_source_payload_ip_address <= arp_table_request_ip_address;
			if (arp_table_source_ready) begin
				arp_table_request_counter_reset <= arp_table_request_valid;
				arp_table_request_counter_ce <= 1'd1;
				arp_table_request_pending_set <= 1'd1;
				arp_table_request_ready <= 1'd1;
				liteethudpipcore_next_state <= 1'd0;
			end
		end
		3'd5: begin
			arp_table_response_valid <= 1'd1;
			if (arp_table_response_ready) begin
				liteethudpipcore_next_state <= 1'd0;
			end
		end
		default: begin
			if ((arp_table_sink_valid & arp_table_sink_payload_request)) begin
				liteethudpipcore_next_state <= 1'd1;
			end else begin
				if (((arp_table_sink_valid & arp_table_sink_payload_reply) & arp_table_request_pending)) begin
					liteethudpipcore_next_state <= 2'd2;
				end else begin
					if ((arp_table_request_counter == 3'd7)) begin
						liteethudpipcore_next_state <= 3'd5;
					end else begin
						if ((arp_table_request_valid | (arp_table_request_pending & arp_table_request_timer_done))) begin
							liteethudpipcore_next_state <= 2'd3;
						end
					end
				end
			end
		end
	endcase
end
assign ip_mac_port_sink_valid = ip_tx_source_source_valid;
assign ip_tx_source_source_ready = ip_mac_port_sink_ready;
assign ip_mac_port_sink_first = ip_tx_source_source_first;
assign ip_mac_port_sink_last = ip_tx_source_source_last;
assign ip_mac_port_sink_payload_ethernet_type = ip_tx_source_source_payload_ethernet_type;
assign ip_mac_port_sink_payload_sender_mac = ip_tx_source_source_payload_sender_mac;
assign ip_mac_port_sink_payload_target_mac = ip_tx_source_source_payload_target_mac;
assign ip_mac_port_sink_payload_data = ip_tx_source_source_payload_data;
assign ip_mac_port_sink_payload_last_be = ip_tx_source_source_payload_last_be;
assign ip_mac_port_sink_payload_error = ip_tx_source_source_payload_error;
assign ip_rx_sink_sink_valid = ip_mac_port_source_valid;
assign ip_mac_port_source_ready = ip_rx_sink_sink_ready;
assign ip_rx_sink_sink_first = ip_mac_port_source_first;
assign ip_rx_sink_sink_last = ip_mac_port_source_last;
assign ip_rx_sink_sink_payload_ethernet_type = ip_mac_port_source_payload_ethernet_type;
assign ip_rx_sink_sink_payload_sender_mac = ip_mac_port_source_payload_sender_mac;
assign ip_rx_sink_sink_payload_target_mac = ip_mac_port_source_payload_target_mac;
assign ip_rx_sink_sink_payload_data = ip_mac_port_source_payload_data;
assign ip_rx_sink_sink_payload_last_be = ip_mac_port_source_payload_last_be;
assign ip_rx_sink_sink_payload_error = ip_mac_port_source_payload_error;
assign ip_tx_sink_sink_valid = ip_crossbar_source_valid;
assign ip_crossbar_source_ready = ip_tx_sink_sink_ready;
assign ip_tx_sink_sink_first = ip_crossbar_source_first;
assign ip_tx_sink_sink_last = ip_crossbar_source_last;
assign ip_tx_sink_sink_payload_data = ip_crossbar_source_payload_data;
assign ip_tx_sink_sink_payload_error = ip_crossbar_source_payload_error;
assign ip_tx_sink_sink_param_length = ip_crossbar_source_param_length;
assign ip_tx_sink_sink_param_protocol = ip_crossbar_source_param_protocol;
assign ip_tx_sink_sink_param_ip_address = ip_crossbar_source_param_ip_address;
assign ip_crossbar_sink_valid = ip_rx_source_source_valid;
assign ip_rx_source_source_ready = ip_crossbar_sink_ready;
assign ip_crossbar_sink_first = ip_rx_source_source_first;
assign ip_crossbar_sink_last = ip_rx_source_source_last;
assign ip_crossbar_sink_payload_data = ip_rx_source_source_payload_data;
assign ip_crossbar_sink_payload_error = ip_rx_source_source_payload_error;
assign ip_crossbar_sink_param_length = ip_rx_source_source_param_length;
assign ip_crossbar_sink_param_protocol = ip_rx_source_source_param_protocol;
assign ip_crossbar_sink_param_ip_address = ip_rx_source_source_param_ip_address;
assign ip_tx_ce = ip_tx_sink_sink_valid;
assign ip_tx_reset = ((ip_tx_source_source_valid & ip_tx_source_source_last) & ip_tx_source_source_ready);
assign ip_tx_packetizer_sink_valid = (ip_tx_sink_sink_valid & ip_tx_liteethipv4checksum_done);
assign ip_tx_packetizer_sink_last = ip_tx_sink_sink_last;
assign ip_tx_sink_sink_ready = (ip_tx_packetizer_sink_ready & ip_tx_liteethipv4checksum_done);
assign ip_tx_packetizer_sink_param_target_ip = ip_tx_sink_sink_param_ip_address;
assign ip_tx_packetizer_sink_param_protocol = ip_tx_sink_sink_param_protocol;
assign ip_tx_packetizer_sink_param_total_length = (5'd20 + ip_tx_sink_sink_param_length);
assign ip_tx_packetizer_sink_param_version = 3'd4;
assign ip_tx_packetizer_sink_param_ihl = 3'd5;
assign ip_tx_packetizer_sink_param_identification = 1'd0;
assign ip_tx_packetizer_sink_param_ttl = 8'd128;
assign ip_tx_packetizer_sink_param_sender_ip = 28'd168428844;
assign ip_tx_packetizer_sink_payload_data = ip_tx_sink_sink_payload_data;
assign ip_tx_liteethipv4checksum_header = ip_tx_packetizer_header;
assign ip_tx_packetizer_sink_param_checksum = ip_tx_liteethipv4checksum_value;
assign arp_table_request_payload_ip_address = ip_tx_sink_sink_param_ip_address;
assign ip_tx_liteethipv4checksum_s_next0 = (ip_tx_liteethipv4checksum_r + ip_tx_liteethipv4checksum_header[15:0]);
assign ip_tx_liteethipv4checksum_s_next1 = (ip_tx_liteethipv4checksum_r_next0 + ip_tx_liteethipv4checksum_header[31:16]);
assign ip_tx_liteethipv4checksum_s_next2 = (ip_tx_liteethipv4checksum_r_next1 + ip_tx_liteethipv4checksum_header[47:32]);
assign ip_tx_liteethipv4checksum_s_next3 = (ip_tx_liteethipv4checksum_r_next2 + ip_tx_liteethipv4checksum_header[63:48]);
assign ip_tx_liteethipv4checksum_s_next4 = (ip_tx_liteethipv4checksum_r_next3 + ip_tx_liteethipv4checksum_header[79:64]);
assign ip_tx_liteethipv4checksum_s_next5 = (ip_tx_liteethipv4checksum_r_next4 + ip_tx_liteethipv4checksum_header[111:96]);
assign ip_tx_liteethipv4checksum_s_next6 = (ip_tx_liteethipv4checksum_r_next5 + ip_tx_liteethipv4checksum_header[127:112]);
assign ip_tx_liteethipv4checksum_s_next7 = (ip_tx_liteethipv4checksum_r_next6 + ip_tx_liteethipv4checksum_header[143:128]);
assign ip_tx_liteethipv4checksum_s_next8 = (ip_tx_liteethipv4checksum_r_next7 + ip_tx_liteethipv4checksum_header[159:144]);
assign ip_tx_liteethipv4checksum_value = (~{ip_tx_liteethipv4checksum_r_next8[7:0], ip_tx_liteethipv4checksum_r_next8[15:8]});
assign ip_tx_liteethipv4checksum_counter_ce = (~ip_tx_liteethipv4checksum_done);
assign ip_tx_liteethipv4checksum_done = (ip_tx_liteethipv4checksum_counter == 4'd9);
always @(*) begin
	ip_tx_packetizer_header <= 160'd0;
	ip_tx_packetizer_header[95:80] <= {ip_tx_packetizer_sink_param_checksum[7:0], ip_tx_packetizer_sink_param_checksum[15:8]};
	ip_tx_packetizer_header[47:32] <= {ip_tx_packetizer_sink_param_identification[7:0], ip_tx_packetizer_sink_param_identification[15:8]};
	ip_tx_packetizer_header[3:0] <= {ip_tx_packetizer_sink_param_ihl[3:0]};
	ip_tx_packetizer_header[79:72] <= {ip_tx_packetizer_sink_param_protocol[7:0]};
	ip_tx_packetizer_header[127:96] <= {ip_tx_packetizer_sink_param_sender_ip[7:0], ip_tx_packetizer_sink_param_sender_ip[15:8], ip_tx_packetizer_sink_param_sender_ip[23:16], ip_tx_packetizer_sink_param_sender_ip[31:24]};
	ip_tx_packetizer_header[159:128] <= {ip_tx_packetizer_sink_param_target_ip[7:0], ip_tx_packetizer_sink_param_target_ip[15:8], ip_tx_packetizer_sink_param_target_ip[23:16], ip_tx_packetizer_sink_param_target_ip[31:24]};
	ip_tx_packetizer_header[31:16] <= {ip_tx_packetizer_sink_param_total_length[7:0], ip_tx_packetizer_sink_param_total_length[15:8]};
	ip_tx_packetizer_header[71:64] <= {ip_tx_packetizer_sink_param_ttl[7:0]};
	ip_tx_packetizer_header[7:4] <= {ip_tx_packetizer_sink_param_version[3:0]};
end
assign ip_tx_packetizer_source_payload_error = ip_tx_packetizer_sink_payload_error;
always @(*) begin
	ip_tx_packetizer_sr_load <= 1'd0;
	ip_tx_packetizer_sr_shift <= 1'd0;
	liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd0;
	ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= 5'd0;
	ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd0;
	ip_tx_packetizer_source_valid <= 1'd0;
	ip_tx_packetizer_sink_ready <= 1'd0;
	ip_tx_packetizer_source_last <= 1'd0;
	ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd0;
	ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd0;
	ip_tx_packetizer_source_payload_data <= 8'd0;
	liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_state;
	case (liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_state)
		1'd1: begin
			ip_tx_packetizer_source_valid <= 1'd1;
			ip_tx_packetizer_source_last <= 1'd0;
			ip_tx_packetizer_source_payload_data <= ip_tx_packetizer_sr[159:8];
			if ((ip_tx_packetizer_source_valid & ip_tx_packetizer_source_ready)) begin
				ip_tx_packetizer_sr_shift <= 1'd1;
				if ((ip_tx_packetizer_count == 5'd19)) begin
					ip_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd3;
						ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= (ip_tx_packetizer_count + 1'd1);
						ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
					end else begin
						liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd2;
					end
				end else begin
					ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= (ip_tx_packetizer_count + 1'd1);
					ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			ip_tx_packetizer_source_valid <= ip_tx_packetizer_sink_valid;
			ip_tx_packetizer_source_last <= ip_tx_packetizer_sink_last;
			ip_tx_packetizer_source_payload_data <= ip_tx_packetizer_sink_payload_data;
			if ((ip_tx_packetizer_source_valid & ip_tx_packetizer_source_ready)) begin
				ip_tx_packetizer_sink_ready <= 1'd1;
				if (ip_tx_packetizer_source_last) begin
					liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			ip_tx_packetizer_source_valid <= (ip_tx_packetizer_sink_valid | ip_tx_packetizer_sink_d_last);
			ip_tx_packetizer_source_last <= ip_tx_packetizer_sink_d_last;
			if (ip_tx_packetizer_fsm_from_idle) begin
				ip_tx_packetizer_source_payload_data[0] <= ip_tx_packetizer_sr[159:16];
			end else begin
				ip_tx_packetizer_source_payload_data[0] <= ip_tx_packetizer_sink_d_payload_data[7];
			end
			ip_tx_packetizer_source_payload_data[7:0] <= ip_tx_packetizer_sink_payload_data;
			if ((ip_tx_packetizer_source_valid & ip_tx_packetizer_source_ready)) begin
				ip_tx_packetizer_sink_ready <= (~ip_tx_packetizer_source_last);
				ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd0;
				ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd1;
				if (ip_tx_packetizer_source_last) begin
					liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			ip_tx_packetizer_sink_ready <= 1'd1;
			ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= 1'd1;
			ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
			if (ip_tx_packetizer_sink_valid) begin
				ip_tx_packetizer_sink_ready <= 1'd0;
				ip_tx_packetizer_source_valid <= 1'd1;
				ip_tx_packetizer_source_last <= 1'd0;
				ip_tx_packetizer_source_payload_data <= ip_tx_packetizer_header[7:0];
				if ((ip_tx_packetizer_source_valid & ip_tx_packetizer_source_ready)) begin
					ip_tx_packetizer_sr_load <= 1'd1;
					ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd1;
					ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd3;
						end else begin
							liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd2;
						end
					end else begin
						liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	arp_table_response_ready <= 1'd0;
	ip_tx_source_source_valid <= 1'd0;
	ip_tx_source_source_first <= 1'd0;
	ip_tx_source_source_last <= 1'd0;
	ip_tx_packetizer_source_ready <= 1'd0;
	ip_tx_source_source_payload_ethernet_type <= 16'd0;
	ip_tx_source_source_payload_sender_mac <= 48'd0;
	ip_tx_source_source_payload_target_mac <= 48'd0;
	ip_tx_source_source_payload_data <= 8'd0;
	ip_tx_source_source_payload_last_be <= 1'd0;
	liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 3'd0;
	ip_tx_source_source_payload_error <= 1'd0;
	ip_tx_target_unreachable <= 1'd0;
	ip_tx_target_mac_liteethip_fsm_next_value <= 48'd0;
	ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd0;
	arp_table_request_valid <= 1'd0;
	liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= liteethudpipcore_liteethip_liteethiptx_fsm_state;
	case (liteethudpipcore_liteethip_liteethiptx_fsm_state)
		1'd1: begin
			arp_table_request_valid <= 1'd1;
			if ((arp_table_request_valid & arp_table_request_ready)) begin
				liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (arp_table_response_valid) begin
				ip_tx_target_mac_liteethip_fsm_next_value <= arp_table_response_payload_mac_address;
				ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd1;
				arp_table_response_ready <= 1'd1;
				if (arp_table_response_payload_failed) begin
					ip_tx_target_unreachable <= 1'd1;
					liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 3'd4;
				end else begin
					liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			ip_tx_source_source_valid <= ip_tx_packetizer_source_valid;
			ip_tx_packetizer_source_ready <= ip_tx_source_source_ready;
			ip_tx_source_source_first <= ip_tx_packetizer_source_first;
			ip_tx_source_source_last <= ip_tx_packetizer_source_last;
			ip_tx_source_source_payload_ethernet_type <= ip_tx_packetizer_source_payload_ethernet_type;
			ip_tx_source_source_payload_sender_mac <= ip_tx_packetizer_source_payload_sender_mac;
			ip_tx_source_source_payload_target_mac <= ip_tx_packetizer_source_payload_target_mac;
			ip_tx_source_source_payload_data <= ip_tx_packetizer_source_payload_data;
			ip_tx_source_source_payload_last_be <= ip_tx_packetizer_source_payload_last_be;
			ip_tx_source_source_payload_error <= ip_tx_packetizer_source_payload_error;
			ip_tx_source_source_payload_ethernet_type <= 12'd2048;
			ip_tx_source_source_payload_target_mac <= ip_tx_target_mac;
			ip_tx_source_source_payload_sender_mac <= 48'd186934156644303;
			if (((ip_tx_source_source_valid & ip_tx_source_source_last) & ip_tx_source_source_ready)) begin
				liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 1'd0;
			end
		end
		3'd4: begin
			ip_tx_packetizer_source_ready <= 1'd1;
			if (((ip_tx_packetizer_source_valid & ip_tx_packetizer_source_last) & ip_tx_packetizer_source_ready)) begin
				liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			ip_tx_packetizer_source_ready <= 1'd1;
			if (ip_tx_packetizer_source_valid) begin
				ip_tx_packetizer_source_ready <= 1'd0;
				if ((ip_tx_sink_sink_param_ip_address[31:28] == 4'd14)) begin
					ip_tx_target_mac_liteethip_fsm_next_value <= {24'd65630, 1'd0, ip_tx_sink_sink_param_ip_address[22:0]};
					ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd1;
					liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 2'd3;
				end else begin
					liteethudpipcore_liteethip_liteethiptx_fsm_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign ip_rx_depacketizer_sink_valid = ip_rx_sink_sink_valid;
assign ip_rx_sink_sink_ready = ip_rx_depacketizer_sink_ready;
assign ip_rx_depacketizer_sink_first = ip_rx_sink_sink_first;
assign ip_rx_depacketizer_sink_last = ip_rx_sink_sink_last;
assign ip_rx_depacketizer_sink_payload_ethernet_type = ip_rx_sink_sink_payload_ethernet_type;
assign ip_rx_depacketizer_sink_payload_sender_mac = ip_rx_sink_sink_payload_sender_mac;
assign ip_rx_depacketizer_sink_payload_target_mac = ip_rx_sink_sink_payload_target_mac;
assign ip_rx_depacketizer_sink_payload_data = ip_rx_sink_sink_payload_data;
assign ip_rx_depacketizer_sink_payload_last_be = ip_rx_sink_sink_payload_last_be;
assign ip_rx_depacketizer_sink_payload_error = ip_rx_sink_sink_payload_error;
assign ip_rx_liteethipv4checksum_header = ip_rx_depacketizer_header;
assign ip_rx_reset = (~ip_rx_depacketizer_source_valid);
assign ip_rx_ce = 1'd1;
assign ip_rx_source_source_last = ip_rx_depacketizer_source_last;
assign ip_rx_source_source_param_length = (ip_rx_depacketizer_source_param_total_length - 5'd20);
assign ip_rx_source_source_param_protocol = ip_rx_depacketizer_source_param_protocol;
assign ip_rx_source_source_param_ip_address = ip_rx_depacketizer_source_param_sender_ip;
assign ip_rx_source_source_payload_data = ip_rx_depacketizer_source_payload_data;
assign ip_rx_source_source_payload_error = ip_rx_depacketizer_source_payload_error;
assign ip_rx_depacketizer_header = ip_rx_depacketizer_sr;
assign ip_rx_depacketizer_source_param_checksum = {slice_proxy43[7:0], slice_proxy42[15:8]};
assign ip_rx_depacketizer_source_param_identification = {slice_proxy45[7:0], slice_proxy44[15:8]};
assign ip_rx_depacketizer_source_param_ihl = {slice_proxy46[3:0]};
assign ip_rx_depacketizer_source_param_protocol = {slice_proxy47[7:0]};
assign ip_rx_depacketizer_source_param_sender_ip = {slice_proxy51[7:0], slice_proxy50[15:8], slice_proxy49[23:16], slice_proxy48[31:24]};
assign ip_rx_depacketizer_source_param_target_ip = {slice_proxy55[7:0], slice_proxy54[15:8], slice_proxy53[23:16], slice_proxy52[31:24]};
assign ip_rx_depacketizer_source_param_total_length = {slice_proxy57[7:0], slice_proxy56[15:8]};
assign ip_rx_depacketizer_source_param_ttl = {slice_proxy58[7:0]};
assign ip_rx_depacketizer_source_param_version = {slice_proxy59[3:0]};
assign ip_rx_depacketizer_source_payload_error = ip_rx_depacketizer_sink_payload_error;
always @(*) begin
	ip_rx_depacketizer_source_valid <= 1'd0;
	ip_rx_depacketizer_sr_shift <= 1'd0;
	ip_rx_depacketizer_sr_shift_leftover <= 1'd0;
	ip_rx_depacketizer_source_last <= 1'd0;
	ip_rx_depacketizer_source_payload_data <= 8'd0;
	ip_rx_depacketizer_sink_ready <= 1'd0;
	liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd0;
	ip_rx_depacketizer_count_liteethip_next_value0 <= 5'd0;
	ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd0;
	ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd0;
	ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd0;
	liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_state;
	case (liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_state)
		1'd1: begin
			ip_rx_depacketizer_sink_ready <= 1'd1;
			if (ip_rx_depacketizer_sink_valid) begin
				ip_rx_depacketizer_count_liteethip_next_value0 <= (ip_rx_depacketizer_count + 1'd1);
				ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
				ip_rx_depacketizer_sr_shift <= 1'd1;
				if ((ip_rx_depacketizer_count == 5'd19)) begin
					if (1'd0) begin
						ip_rx_depacketizer_count_liteethip_next_value0 <= (ip_rx_depacketizer_count + 1'd1);
						ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
						liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			ip_rx_depacketizer_source_valid <= (ip_rx_depacketizer_sink_valid | ip_rx_depacketizer_sink_d_last);
			ip_rx_depacketizer_source_last <= (ip_rx_depacketizer_sink_last | ip_rx_depacketizer_sink_d_last);
			ip_rx_depacketizer_sink_ready <= ip_rx_depacketizer_source_ready;
			ip_rx_depacketizer_source_payload_data <= ip_rx_depacketizer_sink_d_payload_data[7:0];
			ip_rx_depacketizer_source_payload_data[7] <= ip_rx_depacketizer_sink_payload_data;
			if (ip_rx_depacketizer_fsm_from_idle) begin
				ip_rx_depacketizer_source_valid <= ip_rx_depacketizer_sink_d_last;
				ip_rx_depacketizer_sink_ready <= 1'd1;
				if (ip_rx_depacketizer_sink_valid) begin
					ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd0;
					ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd1;
					ip_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((ip_rx_depacketizer_source_valid & ip_rx_depacketizer_source_ready)) begin
				if (ip_rx_depacketizer_source_last) begin
					liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			ip_rx_depacketizer_source_valid <= (ip_rx_depacketizer_sink_valid | ip_rx_depacketizer_sink_d_last);
			ip_rx_depacketizer_source_last <= (ip_rx_depacketizer_sink_last | ip_rx_depacketizer_sink_d_last);
			ip_rx_depacketizer_sink_ready <= ip_rx_depacketizer_source_ready;
			ip_rx_depacketizer_source_payload_data <= ip_rx_depacketizer_sink_payload_data;
			if ((ip_rx_depacketizer_source_valid & ip_rx_depacketizer_source_ready)) begin
				if (ip_rx_depacketizer_source_last) begin
					liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			ip_rx_depacketizer_sink_ready <= 1'd1;
			ip_rx_depacketizer_count_liteethip_next_value0 <= 1'd1;
			ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
			if (ip_rx_depacketizer_sink_valid) begin
				ip_rx_depacketizer_sr_shift <= 1'd1;
				ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd1;
				ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign ip_rx_liteethipv4checksum_s_next0 = (ip_rx_liteethipv4checksum_r + ip_rx_liteethipv4checksum_header[15:0]);
assign ip_rx_liteethipv4checksum_s_next1 = (ip_rx_liteethipv4checksum_r_next0 + ip_rx_liteethipv4checksum_header[31:16]);
assign ip_rx_liteethipv4checksum_s_next2 = (ip_rx_liteethipv4checksum_r_next1 + ip_rx_liteethipv4checksum_header[47:32]);
assign ip_rx_liteethipv4checksum_s_next3 = (ip_rx_liteethipv4checksum_r_next2 + ip_rx_liteethipv4checksum_header[63:48]);
assign ip_rx_liteethipv4checksum_s_next4 = (ip_rx_liteethipv4checksum_r_next3 + ip_rx_liteethipv4checksum_header[79:64]);
assign ip_rx_liteethipv4checksum_s_next5 = (ip_rx_liteethipv4checksum_r_next4 + ip_rx_liteethipv4checksum_header[95:80]);
assign ip_rx_liteethipv4checksum_s_next6 = (ip_rx_liteethipv4checksum_r_next5 + ip_rx_liteethipv4checksum_header[111:96]);
assign ip_rx_liteethipv4checksum_s_next7 = (ip_rx_liteethipv4checksum_r_next6 + ip_rx_liteethipv4checksum_header[127:112]);
assign ip_rx_liteethipv4checksum_s_next8 = (ip_rx_liteethipv4checksum_r_next7 + ip_rx_liteethipv4checksum_header[143:128]);
assign ip_rx_liteethipv4checksum_s_next9 = (ip_rx_liteethipv4checksum_r_next8 + ip_rx_liteethipv4checksum_header[159:144]);
assign ip_rx_liteethipv4checksum_value = (~{ip_rx_liteethipv4checksum_r_next9[7:0], ip_rx_liteethipv4checksum_r_next9[15:8]});
assign ip_rx_liteethipv4checksum_counter_ce = (~ip_rx_liteethipv4checksum_done);
assign ip_rx_liteethipv4checksum_done = (ip_rx_liteethipv4checksum_counter == 4'd11);
always @(*) begin
	liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 2'd0;
	ip_rx_source_source_valid <= 1'd0;
	ip_rx_depacketizer_source_ready <= 1'd0;
	liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= liteethudpipcore_liteethip_liteethiprx_fsm_state;
	case (liteethudpipcore_liteethip_liteethiprx_fsm_state)
		1'd1: begin
			if (ip_rx_liteethipv4checksum_done) begin
				if (ip_rx_valid) begin
					liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 2'd2;
				end else begin
					liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			ip_rx_source_source_valid <= ip_rx_depacketizer_source_valid;
			ip_rx_depacketizer_source_ready <= ip_rx_source_source_ready;
			if (((ip_rx_source_source_valid & ip_rx_source_source_last) & ip_rx_source_source_ready)) begin
				liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			ip_rx_depacketizer_source_ready <= 1'd1;
			if (((ip_rx_depacketizer_source_valid & ip_rx_depacketizer_source_last) & ip_rx_depacketizer_source_ready)) begin
				liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			ip_rx_depacketizer_source_ready <= 1'd1;
			if (ip_rx_depacketizer_source_valid) begin
				ip_rx_depacketizer_source_ready <= 1'd0;
				liteethudpipcore_liteethip_liteethiprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethip_sel0 <= 2'd0;
	case (ip_crossbar_sink_param_protocol)
		1'd1: begin
			liteethudpipcore_liteethip_sel0 <= 1'd1;
		end
		5'd17: begin
			liteethudpipcore_liteethip_sel0 <= 2'd2;
		end
		default: begin
			liteethudpipcore_liteethip_sel0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethip_request <= 2'd0;
	liteethudpipcore_liteethip_request[0] <= liteethudpipcore_liteethip_status0_ongoing0;
	liteethudpipcore_liteethip_request[1] <= liteethudpipcore_liteethip_status1_ongoing0;
end
always @(*) begin
	ip_crossbar_source_valid <= 1'd0;
	ip_crossbar_source_first <= 1'd0;
	ip_crossbar_source_last <= 1'd0;
	ip_crossbar_source_payload_data <= 8'd0;
	ip_port_sink_ready <= 1'd0;
	ip_crossbar_source_payload_error <= 1'd0;
	ip_crossbar_source_param_length <= 16'd0;
	ip_crossbar_source_param_protocol <= 8'd0;
	ip_crossbar_source_param_ip_address <= 32'd0;
	icmp_sink_ready <= 1'd0;
	case (liteethudpipcore_liteethip_grant)
		1'd0: begin
			ip_crossbar_source_valid <= icmp_sink_valid;
			icmp_sink_ready <= ip_crossbar_source_ready;
			ip_crossbar_source_first <= icmp_sink_first;
			ip_crossbar_source_last <= icmp_sink_last;
			ip_crossbar_source_payload_data <= icmp_sink_payload_data;
			ip_crossbar_source_payload_error <= icmp_sink_payload_error;
			ip_crossbar_source_param_length <= icmp_sink_param_length;
			ip_crossbar_source_param_protocol <= icmp_sink_param_protocol;
			ip_crossbar_source_param_ip_address <= icmp_sink_param_ip_address;
		end
		1'd1: begin
			ip_crossbar_source_valid <= ip_port_sink_valid;
			ip_port_sink_ready <= ip_crossbar_source_ready;
			ip_crossbar_source_first <= ip_port_sink_first;
			ip_crossbar_source_last <= ip_port_sink_last;
			ip_crossbar_source_payload_data <= ip_port_sink_payload_data;
			ip_crossbar_source_payload_error <= ip_port_sink_payload_error;
			ip_crossbar_source_param_length <= ip_port_sink_param_length;
			ip_crossbar_source_param_protocol <= ip_port_sink_param_protocol;
			ip_crossbar_source_param_ip_address <= ip_port_sink_param_ip_address;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethip_status0_last <= 1'd0;
	if (icmp_sink_valid) begin
		liteethudpipcore_liteethip_status0_last <= (icmp_sink_last & icmp_sink_ready);
	end
end
assign liteethudpipcore_liteethip_status0_ongoing0 = ((icmp_sink_valid | liteethudpipcore_liteethip_status0_ongoing1) & (~liteethudpipcore_liteethip_status0_last));
always @(*) begin
	liteethudpipcore_liteethip_status1_last <= 1'd0;
	if (ip_port_sink_valid) begin
		liteethudpipcore_liteethip_status1_last <= (ip_port_sink_last & ip_port_sink_ready);
	end
end
assign liteethudpipcore_liteethip_status1_ongoing0 = ((ip_port_sink_valid | liteethudpipcore_liteethip_status1_ongoing1) & (~liteethudpipcore_liteethip_status1_last));
always @(*) begin
	liteethudpipcore_liteethip_sel1 <= 2'd0;
	if (liteethudpipcore_liteethip_first) begin
		liteethudpipcore_liteethip_sel1 <= liteethudpipcore_liteethip_sel0;
	end else begin
		liteethudpipcore_liteethip_sel1 <= liteethudpipcore_liteethip_sel_ongoing;
	end
end
always @(*) begin
	ip_port_source_payload_data <= 8'd0;
	ip_port_source_payload_error <= 1'd0;
	ip_port_source_param_length <= 16'd0;
	ip_port_source_param_protocol <= 8'd0;
	ip_port_source_param_ip_address <= 32'd0;
	icmp_source_valid <= 1'd0;
	icmp_source_first <= 1'd0;
	icmp_source_last <= 1'd0;
	icmp_source_payload_data <= 8'd0;
	icmp_source_payload_error <= 1'd0;
	icmp_source_param_length <= 16'd0;
	icmp_source_param_protocol <= 8'd0;
	icmp_source_param_ip_address <= 32'd0;
	ip_crossbar_sink_ready <= 1'd0;
	ip_port_source_valid <= 1'd0;
	ip_port_source_first <= 1'd0;
	ip_port_source_last <= 1'd0;
	case (liteethudpipcore_liteethip_sel1)
		1'd1: begin
			icmp_source_valid <= ip_crossbar_sink_valid;
			ip_crossbar_sink_ready <= icmp_source_ready;
			icmp_source_first <= ip_crossbar_sink_first;
			icmp_source_last <= ip_crossbar_sink_last;
			icmp_source_payload_data <= ip_crossbar_sink_payload_data;
			icmp_source_payload_error <= ip_crossbar_sink_payload_error;
			icmp_source_param_length <= ip_crossbar_sink_param_length;
			icmp_source_param_protocol <= ip_crossbar_sink_param_protocol;
			icmp_source_param_ip_address <= ip_crossbar_sink_param_ip_address;
		end
		2'd2: begin
			ip_port_source_valid <= ip_crossbar_sink_valid;
			ip_crossbar_sink_ready <= ip_port_source_ready;
			ip_port_source_first <= ip_crossbar_sink_first;
			ip_port_source_last <= ip_crossbar_sink_last;
			ip_port_source_payload_data <= ip_crossbar_sink_payload_data;
			ip_port_source_payload_error <= ip_crossbar_sink_payload_error;
			ip_port_source_param_length <= ip_crossbar_sink_param_length;
			ip_port_source_param_protocol <= ip_crossbar_sink_param_protocol;
			ip_port_source_param_ip_address <= ip_crossbar_sink_param_ip_address;
		end
		default: begin
			ip_crossbar_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	liteethudpipcore_liteethip_last <= 1'd0;
	if (ip_crossbar_sink_valid) begin
		liteethudpipcore_liteethip_last <= (ip_crossbar_sink_last & ip_crossbar_sink_ready);
	end
end
assign liteethudpipcore_liteethip_ongoing0 = ((ip_crossbar_sink_valid | liteethudpipcore_liteethip_ongoing1) & (~liteethudpipcore_liteethip_last));
assign icmp_echo_sink_sink_valid = icmp_rx_source_source_valid;
assign icmp_rx_source_source_ready = icmp_echo_sink_sink_ready;
assign icmp_echo_sink_sink_first = icmp_rx_source_source_first;
assign icmp_echo_sink_sink_last = icmp_rx_source_source_last;
assign icmp_echo_sink_sink_payload_data = icmp_rx_source_source_payload_data;
assign icmp_echo_sink_sink_payload_error = icmp_rx_source_source_payload_error;
assign icmp_echo_sink_sink_param_checksum = icmp_rx_source_source_param_checksum;
assign icmp_echo_sink_sink_param_code = icmp_rx_source_source_param_code;
assign icmp_echo_sink_sink_param_msgtype = icmp_rx_source_source_param_msgtype;
assign icmp_echo_sink_sink_param_quench = icmp_rx_source_source_param_quench;
assign icmp_echo_sink_sink_param_ip_address = icmp_rx_source_source_param_ip_address;
assign icmp_echo_sink_sink_param_length = icmp_rx_source_source_param_length;
assign icmp_tx_sink_sink_valid = icmp_echo_source_source_valid;
assign icmp_echo_source_source_ready = icmp_tx_sink_sink_ready;
assign icmp_tx_sink_sink_first = icmp_echo_source_source_first;
assign icmp_tx_sink_sink_last = icmp_echo_source_source_last;
assign icmp_tx_sink_sink_payload_data = icmp_echo_source_source_payload_data;
assign icmp_tx_sink_sink_payload_error = icmp_echo_source_source_payload_error;
assign icmp_tx_sink_sink_param_checksum = icmp_echo_source_source_param_checksum;
assign icmp_tx_sink_sink_param_code = icmp_echo_source_source_param_code;
assign icmp_tx_sink_sink_param_msgtype = icmp_echo_source_source_param_msgtype;
assign icmp_tx_sink_sink_param_quench = icmp_echo_source_source_param_quench;
assign icmp_tx_sink_sink_param_ip_address = icmp_echo_source_source_param_ip_address;
assign icmp_tx_sink_sink_param_length = icmp_echo_source_source_param_length;
assign icmp_sink_valid = icmp_tx_source_source_valid;
assign icmp_tx_source_source_ready = icmp_sink_ready;
assign icmp_sink_first = icmp_tx_source_source_first;
assign icmp_sink_last = icmp_tx_source_source_last;
assign icmp_sink_payload_data = icmp_tx_source_source_payload_data;
assign icmp_sink_payload_error = icmp_tx_source_source_payload_error;
assign icmp_sink_param_length = icmp_tx_source_source_param_length;
assign icmp_sink_param_protocol = icmp_tx_source_source_param_protocol;
assign icmp_sink_param_ip_address = icmp_tx_source_source_param_ip_address;
assign icmp_rx_sink_sink_valid = icmp_source_valid;
assign icmp_source_ready = icmp_rx_sink_sink_ready;
assign icmp_rx_sink_sink_first = icmp_source_first;
assign icmp_rx_sink_sink_last = icmp_source_last;
assign icmp_rx_sink_sink_payload_data = icmp_source_payload_data;
assign icmp_rx_sink_sink_payload_error = icmp_source_payload_error;
assign icmp_rx_sink_sink_param_length = icmp_source_param_length;
assign icmp_rx_sink_sink_param_protocol = icmp_source_param_protocol;
assign icmp_rx_sink_sink_param_ip_address = icmp_source_param_ip_address;
assign icmp_tx_packetizer_sink_valid = icmp_tx_sink_sink_valid;
assign icmp_tx_packetizer_sink_last = icmp_tx_sink_sink_last;
assign icmp_tx_sink_sink_ready = icmp_tx_packetizer_sink_ready;
assign icmp_tx_packetizer_sink_param_msgtype = icmp_tx_sink_sink_param_msgtype;
assign icmp_tx_packetizer_sink_param_code = icmp_tx_sink_sink_param_code;
assign icmp_tx_packetizer_sink_param_checksum = icmp_tx_sink_sink_param_checksum;
assign icmp_tx_packetizer_sink_param_quench = icmp_tx_sink_sink_param_quench;
assign icmp_tx_packetizer_sink_payload_data = icmp_tx_sink_sink_payload_data;
always @(*) begin
	icmp_tx_packetizer_header <= 64'd0;
	icmp_tx_packetizer_header[31:16] <= {icmp_tx_packetizer_sink_param_checksum[7:0], icmp_tx_packetizer_sink_param_checksum[15:8]};
	icmp_tx_packetizer_header[15:8] <= {icmp_tx_packetizer_sink_param_code[7:0]};
	icmp_tx_packetizer_header[7:0] <= {icmp_tx_packetizer_sink_param_msgtype[7:0]};
	icmp_tx_packetizer_header[63:32] <= {icmp_tx_packetizer_sink_param_quench[7:0], icmp_tx_packetizer_sink_param_quench[15:8], icmp_tx_packetizer_sink_param_quench[23:16], icmp_tx_packetizer_sink_param_quench[31:24]};
end
assign icmp_tx_packetizer_source_payload_error = icmp_tx_packetizer_sink_payload_error;
always @(*) begin
	icmp_tx_packetizer_source_valid <= 1'd0;
	icmp_tx_packetizer_source_last <= 1'd0;
	icmp_tx_packetizer_source_payload_data <= 8'd0;
	liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 2'd0;
	icmp_tx_packetizer_count_liteethicmptx_next_value0 <= 3'd0;
	icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd0;
	icmp_tx_packetizer_sink_ready <= 1'd0;
	icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd0;
	icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd0;
	icmp_tx_packetizer_sr_load <= 1'd0;
	icmp_tx_packetizer_sr_shift <= 1'd0;
	liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= liteethudpipcore_liteethicmptx_liteethicmppacketizer_state;
	case (liteethudpipcore_liteethicmptx_liteethicmppacketizer_state)
		1'd1: begin
			icmp_tx_packetizer_source_valid <= 1'd1;
			icmp_tx_packetizer_source_last <= 1'd0;
			icmp_tx_packetizer_source_payload_data <= icmp_tx_packetizer_sr[63:8];
			if ((icmp_tx_packetizer_source_valid & icmp_tx_packetizer_source_ready)) begin
				icmp_tx_packetizer_sr_shift <= 1'd1;
				if ((icmp_tx_packetizer_count == 3'd7)) begin
					icmp_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 2'd3;
						icmp_tx_packetizer_count_liteethicmptx_next_value0 <= (icmp_tx_packetizer_count + 1'd1);
						icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
					end else begin
						liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 2'd2;
					end
				end else begin
					icmp_tx_packetizer_count_liteethicmptx_next_value0 <= (icmp_tx_packetizer_count + 1'd1);
					icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			icmp_tx_packetizer_source_valid <= icmp_tx_packetizer_sink_valid;
			icmp_tx_packetizer_source_last <= icmp_tx_packetizer_sink_last;
			icmp_tx_packetizer_source_payload_data <= icmp_tx_packetizer_sink_payload_data;
			if ((icmp_tx_packetizer_source_valid & icmp_tx_packetizer_source_ready)) begin
				icmp_tx_packetizer_sink_ready <= 1'd1;
				if (icmp_tx_packetizer_source_last) begin
					liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			icmp_tx_packetizer_source_valid <= (icmp_tx_packetizer_sink_valid | icmp_tx_packetizer_sink_d_last);
			icmp_tx_packetizer_source_last <= icmp_tx_packetizer_sink_d_last;
			if (icmp_tx_packetizer_fsm_from_idle) begin
				icmp_tx_packetizer_source_payload_data[0] <= icmp_tx_packetizer_sr[63:16];
			end else begin
				icmp_tx_packetizer_source_payload_data[0] <= icmp_tx_packetizer_sink_d_payload_data[7];
			end
			icmp_tx_packetizer_source_payload_data[7:0] <= icmp_tx_packetizer_sink_payload_data;
			if ((icmp_tx_packetizer_source_valid & icmp_tx_packetizer_source_ready)) begin
				icmp_tx_packetizer_sink_ready <= (~icmp_tx_packetizer_source_last);
				icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd0;
				icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd1;
				if (icmp_tx_packetizer_source_last) begin
					liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			icmp_tx_packetizer_sink_ready <= 1'd1;
			icmp_tx_packetizer_count_liteethicmptx_next_value0 <= 1'd1;
			icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
			if (icmp_tx_packetizer_sink_valid) begin
				icmp_tx_packetizer_sink_ready <= 1'd0;
				icmp_tx_packetizer_source_valid <= 1'd1;
				icmp_tx_packetizer_source_last <= 1'd0;
				icmp_tx_packetizer_source_payload_data <= icmp_tx_packetizer_header[7:0];
				if ((icmp_tx_packetizer_source_valid & icmp_tx_packetizer_source_ready)) begin
					icmp_tx_packetizer_sr_load <= 1'd1;
					icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd1;
					icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 2'd3;
						end else begin
							liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	icmp_tx_source_source_first <= 1'd0;
	icmp_tx_source_source_last <= 1'd0;
	icmp_tx_packetizer_source_ready <= 1'd0;
	icmp_tx_source_source_payload_data <= 8'd0;
	icmp_tx_source_source_payload_error <= 1'd0;
	icmp_tx_source_source_param_length <= 16'd0;
	icmp_tx_source_source_param_protocol <= 8'd0;
	icmp_tx_source_source_param_ip_address <= 32'd0;
	liteethudpipcore_liteethicmptx_fsm_next_state <= 1'd0;
	icmp_tx_source_source_valid <= 1'd0;
	liteethudpipcore_liteethicmptx_fsm_next_state <= liteethudpipcore_liteethicmptx_fsm_state;
	case (liteethudpipcore_liteethicmptx_fsm_state)
		1'd1: begin
			icmp_tx_source_source_valid <= icmp_tx_packetizer_source_valid;
			icmp_tx_packetizer_source_ready <= icmp_tx_source_source_ready;
			icmp_tx_source_source_first <= icmp_tx_packetizer_source_first;
			icmp_tx_source_source_last <= icmp_tx_packetizer_source_last;
			icmp_tx_source_source_payload_data <= icmp_tx_packetizer_source_payload_data;
			icmp_tx_source_source_payload_error <= icmp_tx_packetizer_source_payload_error;
			icmp_tx_source_source_param_length <= icmp_tx_packetizer_source_param_length;
			icmp_tx_source_source_param_protocol <= icmp_tx_packetizer_source_param_protocol;
			icmp_tx_source_source_param_ip_address <= icmp_tx_packetizer_source_param_ip_address;
			icmp_tx_source_source_param_length <= (icmp_tx_sink_sink_param_length + 4'd8);
			icmp_tx_source_source_param_protocol <= 1'd1;
			icmp_tx_source_source_param_ip_address <= icmp_tx_sink_sink_param_ip_address;
			if (((icmp_tx_source_source_valid & icmp_tx_source_source_last) & icmp_tx_source_source_ready)) begin
				liteethudpipcore_liteethicmptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			icmp_tx_packetizer_source_ready <= 1'd1;
			if (icmp_tx_packetizer_source_valid) begin
				icmp_tx_packetizer_source_ready <= 1'd0;
				liteethudpipcore_liteethicmptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign icmp_rx_depacketizer_sink_valid = icmp_rx_sink_sink_valid;
assign icmp_rx_sink_sink_ready = icmp_rx_depacketizer_sink_ready;
assign icmp_rx_depacketizer_sink_first = icmp_rx_sink_sink_first;
assign icmp_rx_depacketizer_sink_last = icmp_rx_sink_sink_last;
assign icmp_rx_depacketizer_sink_payload_data = icmp_rx_sink_sink_payload_data;
assign icmp_rx_depacketizer_sink_payload_error = icmp_rx_sink_sink_payload_error;
assign icmp_rx_depacketizer_sink_param_length = icmp_rx_sink_sink_param_length;
assign icmp_rx_depacketizer_sink_param_protocol = icmp_rx_sink_sink_param_protocol;
assign icmp_rx_depacketizer_sink_param_ip_address = icmp_rx_sink_sink_param_ip_address;
assign icmp_rx_source_source_last = icmp_rx_depacketizer_source_last;
assign icmp_rx_source_source_param_msgtype = icmp_rx_depacketizer_source_param_msgtype;
assign icmp_rx_source_source_param_code = icmp_rx_depacketizer_source_param_code;
assign icmp_rx_source_source_param_checksum = icmp_rx_depacketizer_source_param_checksum;
assign icmp_rx_source_source_param_quench = icmp_rx_depacketizer_source_param_quench;
assign icmp_rx_source_source_param_ip_address = icmp_rx_sink_sink_param_ip_address;
assign icmp_rx_source_source_param_length = (icmp_rx_sink_sink_param_length - 4'd8);
assign icmp_rx_source_source_payload_data = icmp_rx_depacketizer_source_payload_data;
assign icmp_rx_source_source_payload_error = icmp_rx_depacketizer_source_payload_error;
assign icmp_rx_depacketizer_header = icmp_rx_depacketizer_sr;
assign icmp_rx_depacketizer_source_param_checksum = {slice_proxy61[7:0], slice_proxy60[15:8]};
assign icmp_rx_depacketizer_source_param_code = {slice_proxy62[7:0]};
assign icmp_rx_depacketizer_source_param_msgtype = {slice_proxy63[7:0]};
assign icmp_rx_depacketizer_source_param_quench = {slice_proxy67[7:0], slice_proxy66[15:8], slice_proxy65[23:16], slice_proxy64[31:24]};
assign icmp_rx_depacketizer_source_payload_error = icmp_rx_depacketizer_sink_payload_error;
always @(*) begin
	icmp_rx_depacketizer_sr_shift <= 1'd0;
	icmp_rx_depacketizer_sr_shift_leftover <= 1'd0;
	liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd0;
	icmp_rx_depacketizer_source_valid <= 1'd0;
	icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= 3'd0;
	icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd0;
	icmp_rx_depacketizer_source_last <= 1'd0;
	icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd0;
	icmp_rx_depacketizer_source_payload_data <= 8'd0;
	icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd0;
	icmp_rx_depacketizer_sink_ready <= 1'd0;
	liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_state;
	case (liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_state)
		1'd1: begin
			icmp_rx_depacketizer_sink_ready <= 1'd1;
			if (icmp_rx_depacketizer_sink_valid) begin
				icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= (icmp_rx_depacketizer_count + 1'd1);
				icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
				icmp_rx_depacketizer_sr_shift <= 1'd1;
				if ((icmp_rx_depacketizer_count == 3'd7)) begin
					if (1'd0) begin
						icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= (icmp_rx_depacketizer_count + 1'd1);
						icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
						liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			icmp_rx_depacketizer_source_valid <= (icmp_rx_depacketizer_sink_valid | icmp_rx_depacketizer_sink_d_last);
			icmp_rx_depacketizer_source_last <= (icmp_rx_depacketizer_sink_last | icmp_rx_depacketizer_sink_d_last);
			icmp_rx_depacketizer_sink_ready <= icmp_rx_depacketizer_source_ready;
			icmp_rx_depacketizer_source_payload_data <= icmp_rx_depacketizer_sink_d_payload_data[7:0];
			icmp_rx_depacketizer_source_payload_data[7] <= icmp_rx_depacketizer_sink_payload_data;
			if (icmp_rx_depacketizer_fsm_from_idle) begin
				icmp_rx_depacketizer_source_valid <= icmp_rx_depacketizer_sink_d_last;
				icmp_rx_depacketizer_sink_ready <= 1'd1;
				if (icmp_rx_depacketizer_sink_valid) begin
					icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd0;
					icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd1;
					icmp_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((icmp_rx_depacketizer_source_valid & icmp_rx_depacketizer_source_ready)) begin
				if (icmp_rx_depacketizer_source_last) begin
					liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			icmp_rx_depacketizer_source_valid <= (icmp_rx_depacketizer_sink_valid | icmp_rx_depacketizer_sink_d_last);
			icmp_rx_depacketizer_source_last <= (icmp_rx_depacketizer_sink_last | icmp_rx_depacketizer_sink_d_last);
			icmp_rx_depacketizer_sink_ready <= icmp_rx_depacketizer_source_ready;
			icmp_rx_depacketizer_source_payload_data <= icmp_rx_depacketizer_sink_payload_data;
			if ((icmp_rx_depacketizer_source_valid & icmp_rx_depacketizer_source_ready)) begin
				if (icmp_rx_depacketizer_source_last) begin
					liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			icmp_rx_depacketizer_sink_ready <= 1'd1;
			icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= 1'd1;
			icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
			if (icmp_rx_depacketizer_sink_valid) begin
				icmp_rx_depacketizer_sr_shift <= 1'd1;
				icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd1;
				icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	icmp_rx_depacketizer_source_ready <= 1'd0;
	liteethudpipcore_liteethicmprx_fsm_next_state <= 2'd0;
	icmp_rx_source_source_valid <= 1'd0;
	liteethudpipcore_liteethicmprx_fsm_next_state <= liteethudpipcore_liteethicmprx_fsm_state;
	case (liteethudpipcore_liteethicmprx_fsm_state)
		1'd1: begin
			if (icmp_rx_valid) begin
				liteethudpipcore_liteethicmprx_fsm_next_state <= 2'd2;
			end else begin
				liteethudpipcore_liteethicmprx_fsm_next_state <= 2'd3;
			end
		end
		2'd2: begin
			icmp_rx_source_source_valid <= icmp_rx_depacketizer_source_valid;
			icmp_rx_depacketizer_source_ready <= icmp_rx_source_source_ready;
			if (((icmp_rx_source_source_valid & icmp_rx_source_source_last) & icmp_rx_source_source_ready)) begin
				liteethudpipcore_liteethicmprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			icmp_rx_depacketizer_source_ready <= 1'd1;
			if (((icmp_rx_depacketizer_source_valid & icmp_rx_depacketizer_source_last) & icmp_rx_depacketizer_source_ready)) begin
				liteethudpipcore_liteethicmprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			icmp_rx_depacketizer_source_ready <= 1'd1;
			if (icmp_rx_depacketizer_source_valid) begin
				icmp_rx_depacketizer_source_ready <= 1'd0;
				liteethudpipcore_liteethicmprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign icmp_echo_buffer_sink_valid = icmp_echo_sink_sink_valid;
assign icmp_echo_sink_sink_ready = icmp_echo_buffer_sink_ready;
assign icmp_echo_buffer_sink_first = icmp_echo_sink_sink_first;
assign icmp_echo_buffer_sink_last = icmp_echo_sink_sink_last;
assign icmp_echo_buffer_sink_payload_data = icmp_echo_sink_sink_payload_data;
assign icmp_echo_buffer_sink_payload_error = icmp_echo_sink_sink_payload_error;
assign icmp_echo_buffer_sink_param_checksum = icmp_echo_sink_sink_param_checksum;
assign icmp_echo_buffer_sink_param_code = icmp_echo_sink_sink_param_code;
assign icmp_echo_buffer_sink_param_msgtype = icmp_echo_sink_sink_param_msgtype;
assign icmp_echo_buffer_sink_param_quench = icmp_echo_sink_sink_param_quench;
assign icmp_echo_buffer_sink_param_ip_address = icmp_echo_sink_sink_param_ip_address;
assign icmp_echo_buffer_sink_param_length = icmp_echo_sink_sink_param_length;
assign icmp_echo_source_source_valid = icmp_echo_buffer_source_valid;
assign icmp_echo_buffer_source_ready = icmp_echo_source_source_ready;
assign icmp_echo_source_source_first = icmp_echo_buffer_source_first;
assign icmp_echo_source_source_last = icmp_echo_buffer_source_last;
assign icmp_echo_source_source_payload_data = icmp_echo_buffer_source_payload_data;
assign icmp_echo_source_source_payload_error = icmp_echo_buffer_source_payload_error;
assign icmp_echo_source_source_param_code = icmp_echo_buffer_source_param_code;
assign icmp_echo_source_source_param_quench = icmp_echo_buffer_source_param_quench;
assign icmp_echo_source_source_param_ip_address = icmp_echo_buffer_source_param_ip_address;
assign icmp_echo_source_source_param_length = icmp_echo_buffer_source_param_length;
always @(*) begin
	icmp_echo_source_source_param_msgtype <= 8'd0;
	icmp_echo_source_source_param_msgtype <= icmp_echo_buffer_source_param_msgtype;
	icmp_echo_source_source_param_msgtype <= 1'd0;
end
always @(*) begin
	icmp_echo_source_source_param_checksum <= 16'd0;
	icmp_echo_source_source_param_checksum <= icmp_echo_buffer_source_param_checksum;
	icmp_echo_source_source_param_checksum <= ((icmp_echo_buffer_source_param_checksum + 12'd2048) + (icmp_echo_buffer_source_param_checksum >= 16'd63488));
end
assign icmp_echo_buffer_syncfifo_din = {icmp_echo_buffer_fifo_in_last, icmp_echo_buffer_fifo_in_first, icmp_echo_buffer_fifo_in_param_length, icmp_echo_buffer_fifo_in_param_ip_address, icmp_echo_buffer_fifo_in_param_quench, icmp_echo_buffer_fifo_in_param_msgtype, icmp_echo_buffer_fifo_in_param_code, icmp_echo_buffer_fifo_in_param_checksum, icmp_echo_buffer_fifo_in_payload_error, icmp_echo_buffer_fifo_in_payload_data};
assign {icmp_echo_buffer_fifo_out_last, icmp_echo_buffer_fifo_out_first, icmp_echo_buffer_fifo_out_param_length, icmp_echo_buffer_fifo_out_param_ip_address, icmp_echo_buffer_fifo_out_param_quench, icmp_echo_buffer_fifo_out_param_msgtype, icmp_echo_buffer_fifo_out_param_code, icmp_echo_buffer_fifo_out_param_checksum, icmp_echo_buffer_fifo_out_payload_error, icmp_echo_buffer_fifo_out_payload_data} = icmp_echo_buffer_syncfifo_dout;
assign icmp_echo_buffer_sink_ready = icmp_echo_buffer_syncfifo_writable;
assign icmp_echo_buffer_syncfifo_we = icmp_echo_buffer_sink_valid;
assign icmp_echo_buffer_fifo_in_first = icmp_echo_buffer_sink_first;
assign icmp_echo_buffer_fifo_in_last = icmp_echo_buffer_sink_last;
assign icmp_echo_buffer_fifo_in_payload_data = icmp_echo_buffer_sink_payload_data;
assign icmp_echo_buffer_fifo_in_payload_error = icmp_echo_buffer_sink_payload_error;
assign icmp_echo_buffer_fifo_in_param_checksum = icmp_echo_buffer_sink_param_checksum;
assign icmp_echo_buffer_fifo_in_param_code = icmp_echo_buffer_sink_param_code;
assign icmp_echo_buffer_fifo_in_param_msgtype = icmp_echo_buffer_sink_param_msgtype;
assign icmp_echo_buffer_fifo_in_param_quench = icmp_echo_buffer_sink_param_quench;
assign icmp_echo_buffer_fifo_in_param_ip_address = icmp_echo_buffer_sink_param_ip_address;
assign icmp_echo_buffer_fifo_in_param_length = icmp_echo_buffer_sink_param_length;
assign icmp_echo_buffer_source_valid = icmp_echo_buffer_readable;
assign icmp_echo_buffer_source_first = icmp_echo_buffer_fifo_out_first;
assign icmp_echo_buffer_source_last = icmp_echo_buffer_fifo_out_last;
assign icmp_echo_buffer_source_payload_data = icmp_echo_buffer_fifo_out_payload_data;
assign icmp_echo_buffer_source_payload_error = icmp_echo_buffer_fifo_out_payload_error;
assign icmp_echo_buffer_source_param_checksum = icmp_echo_buffer_fifo_out_param_checksum;
assign icmp_echo_buffer_source_param_code = icmp_echo_buffer_fifo_out_param_code;
assign icmp_echo_buffer_source_param_msgtype = icmp_echo_buffer_fifo_out_param_msgtype;
assign icmp_echo_buffer_source_param_quench = icmp_echo_buffer_fifo_out_param_quench;
assign icmp_echo_buffer_source_param_ip_address = icmp_echo_buffer_fifo_out_param_ip_address;
assign icmp_echo_buffer_source_param_length = icmp_echo_buffer_fifo_out_param_length;
assign icmp_echo_buffer_re = icmp_echo_buffer_source_ready;
assign icmp_echo_buffer_syncfifo_re = (icmp_echo_buffer_syncfifo_readable & ((~icmp_echo_buffer_readable) | icmp_echo_buffer_re));
assign icmp_echo_buffer_level1 = (icmp_echo_buffer_level0 + icmp_echo_buffer_readable);
always @(*) begin
	icmp_echo_buffer_wrport_adr <= 7'd0;
	if (icmp_echo_buffer_replace) begin
		icmp_echo_buffer_wrport_adr <= (icmp_echo_buffer_produce - 1'd1);
	end else begin
		icmp_echo_buffer_wrport_adr <= icmp_echo_buffer_produce;
	end
end
assign icmp_echo_buffer_wrport_dat_w = icmp_echo_buffer_syncfifo_din;
assign icmp_echo_buffer_wrport_we = (icmp_echo_buffer_syncfifo_we & (icmp_echo_buffer_syncfifo_writable | icmp_echo_buffer_replace));
assign icmp_echo_buffer_do_read = (icmp_echo_buffer_syncfifo_readable & icmp_echo_buffer_syncfifo_re);
assign icmp_echo_buffer_rdport_adr = icmp_echo_buffer_consume;
assign icmp_echo_buffer_syncfifo_dout = icmp_echo_buffer_rdport_dat_r;
assign icmp_echo_buffer_rdport_re = icmp_echo_buffer_do_read;
assign icmp_echo_buffer_syncfifo_writable = (icmp_echo_buffer_level0 != 8'd128);
assign icmp_echo_buffer_syncfifo_readable = (icmp_echo_buffer_level0 != 1'd0);
assign ip_port_sink_valid = tx_source_source_valid;
assign tx_source_source_ready = ip_port_sink_ready;
assign ip_port_sink_first = tx_source_source_first;
assign ip_port_sink_last = tx_source_source_last;
assign ip_port_sink_payload_data = tx_source_source_payload_data;
assign ip_port_sink_payload_error = tx_source_source_payload_error;
assign ip_port_sink_param_length = tx_source_source_param_length;
assign ip_port_sink_param_protocol = tx_source_source_param_protocol;
assign ip_port_sink_param_ip_address = tx_source_source_param_ip_address;
assign rx_sink_sink_valid = ip_port_source_valid;
assign ip_port_source_ready = rx_sink_sink_ready;
assign rx_sink_sink_first = ip_port_source_first;
assign rx_sink_sink_last = ip_port_source_last;
assign rx_sink_sink_payload_data = ip_port_source_payload_data;
assign rx_sink_sink_payload_error = ip_port_source_payload_error;
assign rx_sink_sink_param_length = ip_port_source_param_length;
assign rx_sink_sink_param_protocol = ip_port_source_param_protocol;
assign rx_sink_sink_param_ip_address = ip_port_source_param_ip_address;
assign tx_sink_sink_valid = crossbar_source_valid;
assign crossbar_source_ready = tx_sink_sink_ready;
assign tx_sink_sink_first = crossbar_source_first;
assign tx_sink_sink_last = crossbar_source_last;
assign tx_sink_sink_payload_data = crossbar_source_payload_data;
assign tx_sink_sink_payload_error = crossbar_source_payload_error;
assign tx_sink_sink_param_src_port = crossbar_source_param_src_port;
assign tx_sink_sink_param_dst_port = crossbar_source_param_dst_port;
assign tx_sink_sink_param_ip_address = crossbar_source_param_ip_address;
assign tx_sink_sink_param_length = crossbar_source_param_length;
assign crossbar_sink_valid = rx_source_source_valid;
assign rx_source_source_ready = crossbar_sink_ready;
assign crossbar_sink_first = rx_source_source_first;
assign crossbar_sink_last = rx_source_source_last;
assign crossbar_sink_payload_data = rx_source_source_payload_data;
assign crossbar_sink_payload_error = rx_source_source_payload_error;
assign crossbar_sink_param_src_port = rx_source_source_param_src_port;
assign crossbar_sink_param_dst_port = rx_source_source_param_dst_port;
assign crossbar_sink_param_ip_address = rx_source_source_param_ip_address;
assign crossbar_sink_param_length = rx_source_source_param_length;
assign tx_packetizer_sink_valid = tx_sink_sink_valid;
assign tx_packetizer_sink_last = tx_sink_sink_last;
assign tx_sink_sink_ready = tx_packetizer_sink_ready;
assign tx_packetizer_sink_param_src_port = tx_sink_sink_param_src_port;
assign tx_packetizer_sink_param_dst_port = tx_sink_sink_param_dst_port;
assign tx_packetizer_sink_param_length = (tx_sink_sink_param_length + 4'd8);
assign tx_packetizer_sink_param_checksum = 1'd0;
assign tx_packetizer_sink_payload_data = tx_sink_sink_payload_data;
always @(*) begin
	tx_packetizer_header <= 64'd0;
	tx_packetizer_header[63:48] <= {tx_packetizer_sink_param_checksum[7:0], tx_packetizer_sink_param_checksum[15:8]};
	tx_packetizer_header[31:16] <= {tx_packetizer_sink_param_dst_port[7:0], tx_packetizer_sink_param_dst_port[15:8]};
	tx_packetizer_header[47:32] <= {tx_packetizer_sink_param_length[7:0], tx_packetizer_sink_param_length[15:8]};
	tx_packetizer_header[15:0] <= {tx_packetizer_sink_param_src_port[7:0], tx_packetizer_sink_param_src_port[15:8]};
end
assign tx_packetizer_source_payload_error = tx_packetizer_sink_payload_error;
always @(*) begin
	tx_packetizer_sink_ready <= 1'd0;
	liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd0;
	tx_packetizer_count_liteethudptx_next_value0 <= 3'd0;
	tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd0;
	tx_packetizer_sr_load <= 1'd0;
	tx_packetizer_sr_shift <= 1'd0;
	tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd0;
	tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd0;
	tx_packetizer_source_valid <= 1'd0;
	tx_packetizer_source_last <= 1'd0;
	tx_packetizer_source_payload_data <= 8'd0;
	liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_state;
	case (liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_state)
		1'd1: begin
			tx_packetizer_source_valid <= 1'd1;
			tx_packetizer_source_last <= 1'd0;
			tx_packetizer_source_payload_data <= tx_packetizer_sr[63:8];
			if ((tx_packetizer_source_valid & tx_packetizer_source_ready)) begin
				tx_packetizer_sr_shift <= 1'd1;
				if ((tx_packetizer_count == 3'd7)) begin
					tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd3;
						tx_packetizer_count_liteethudptx_next_value0 <= (tx_packetizer_count + 1'd1);
						tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
					end else begin
						liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd2;
					end
				end else begin
					tx_packetizer_count_liteethudptx_next_value0 <= (tx_packetizer_count + 1'd1);
					tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			tx_packetizer_source_valid <= tx_packetizer_sink_valid;
			tx_packetizer_source_last <= tx_packetizer_sink_last;
			tx_packetizer_source_payload_data <= tx_packetizer_sink_payload_data;
			if ((tx_packetizer_source_valid & tx_packetizer_source_ready)) begin
				tx_packetizer_sink_ready <= 1'd1;
				if (tx_packetizer_source_last) begin
					liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			tx_packetizer_source_valid <= (tx_packetizer_sink_valid | tx_packetizer_sink_d_last);
			tx_packetizer_source_last <= tx_packetizer_sink_d_last;
			if (tx_packetizer_fsm_from_idle) begin
				tx_packetizer_source_payload_data[0] <= tx_packetizer_sr[63:16];
			end else begin
				tx_packetizer_source_payload_data[0] <= tx_packetizer_sink_d_payload_data[7];
			end
			tx_packetizer_source_payload_data[7:0] <= tx_packetizer_sink_payload_data;
			if ((tx_packetizer_source_valid & tx_packetizer_source_ready)) begin
				tx_packetizer_sink_ready <= (~tx_packetizer_source_last);
				tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd0;
				tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd1;
				if (tx_packetizer_source_last) begin
					liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_packetizer_sink_ready <= 1'd1;
			tx_packetizer_count_liteethudptx_next_value0 <= 1'd1;
			tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
			if (tx_packetizer_sink_valid) begin
				tx_packetizer_sink_ready <= 1'd0;
				tx_packetizer_source_valid <= 1'd1;
				tx_packetizer_source_last <= 1'd0;
				tx_packetizer_source_payload_data <= tx_packetizer_header[7:0];
				if ((tx_packetizer_source_valid & tx_packetizer_source_ready)) begin
					tx_packetizer_sr_load <= 1'd1;
					tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd1;
					tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd3;
						end else begin
							liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	tx_source_source_param_ip_address <= 32'd0;
	tx_source_source_payload_data <= 8'd0;
	liteethudpipcore_liteethudp_liteethudptx_fsm_next_state <= 1'd0;
	tx_source_source_valid <= 1'd0;
	tx_source_source_first <= 1'd0;
	tx_source_source_last <= 1'd0;
	tx_packetizer_source_ready <= 1'd0;
	tx_source_source_payload_error <= 1'd0;
	tx_source_source_param_length <= 16'd0;
	tx_source_source_param_protocol <= 8'd0;
	liteethudpipcore_liteethudp_liteethudptx_fsm_next_state <= liteethudpipcore_liteethudp_liteethudptx_fsm_state;
	case (liteethudpipcore_liteethudp_liteethudptx_fsm_state)
		1'd1: begin
			tx_source_source_valid <= tx_packetizer_source_valid;
			tx_packetizer_source_ready <= tx_source_source_ready;
			tx_source_source_first <= tx_packetizer_source_first;
			tx_source_source_last <= tx_packetizer_source_last;
			tx_source_source_payload_data <= tx_packetizer_source_payload_data;
			tx_source_source_payload_error <= tx_packetizer_source_payload_error;
			tx_source_source_param_length <= tx_packetizer_source_param_length;
			tx_source_source_param_protocol <= tx_packetizer_source_param_protocol;
			tx_source_source_param_ip_address <= tx_packetizer_source_param_ip_address;
			tx_source_source_param_length <= tx_packetizer_sink_param_length;
			tx_source_source_param_protocol <= 5'd17;
			tx_source_source_param_ip_address <= tx_sink_sink_param_ip_address;
			if (((tx_source_source_valid & tx_source_source_last) & tx_source_source_ready)) begin
				liteethudpipcore_liteethudp_liteethudptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			tx_packetizer_source_ready <= 1'd1;
			if (tx_packetizer_source_valid) begin
				tx_packetizer_source_ready <= 1'd0;
				liteethudpipcore_liteethudp_liteethudptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign rx_depacketizer_sink_valid = rx_sink_sink_valid;
assign rx_sink_sink_ready = rx_depacketizer_sink_ready;
assign rx_depacketizer_sink_first = rx_sink_sink_first;
assign rx_depacketizer_sink_last = rx_sink_sink_last;
assign rx_depacketizer_sink_payload_data = rx_sink_sink_payload_data;
assign rx_depacketizer_sink_payload_error = rx_sink_sink_payload_error;
assign rx_depacketizer_sink_param_length = rx_sink_sink_param_length;
assign rx_depacketizer_sink_param_protocol = rx_sink_sink_param_protocol;
assign rx_depacketizer_sink_param_ip_address = rx_sink_sink_param_ip_address;
assign rx_source_source_last = rx_depacketizer_source_last;
assign rx_source_source_param_src_port = rx_depacketizer_source_param_src_port;
assign rx_source_source_param_dst_port = rx_depacketizer_source_param_dst_port;
assign rx_source_source_param_ip_address = rx_sink_sink_param_ip_address;
assign rx_source_source_param_length = (rx_depacketizer_source_param_length - 4'd8);
assign rx_source_source_payload_data = rx_depacketizer_source_payload_data;
assign rx_source_source_payload_error = rx_depacketizer_source_payload_error;
assign rx_depacketizer_header = rx_depacketizer_sr;
assign rx_depacketizer_source_param_checksum = {slice_proxy69[7:0], slice_proxy68[15:8]};
assign rx_depacketizer_source_param_dst_port = {slice_proxy71[7:0], slice_proxy70[15:8]};
assign rx_depacketizer_source_param_length = {slice_proxy73[7:0], slice_proxy72[15:8]};
assign rx_depacketizer_source_param_src_port = {slice_proxy75[7:0], slice_proxy74[15:8]};
assign rx_depacketizer_source_payload_error = rx_depacketizer_sink_payload_error;
always @(*) begin
	rx_depacketizer_source_last <= 1'd0;
	rx_depacketizer_source_payload_data <= 8'd0;
	liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd0;
	rx_depacketizer_count_liteethudprx_next_value0 <= 3'd0;
	rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd0;
	rx_depacketizer_sink_ready <= 1'd0;
	rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd0;
	rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd0;
	rx_depacketizer_sr_shift <= 1'd0;
	rx_depacketizer_sr_shift_leftover <= 1'd0;
	rx_depacketizer_source_valid <= 1'd0;
	liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_state;
	case (liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_state)
		1'd1: begin
			rx_depacketizer_sink_ready <= 1'd1;
			if (rx_depacketizer_sink_valid) begin
				rx_depacketizer_count_liteethudprx_next_value0 <= (rx_depacketizer_count + 1'd1);
				rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
				rx_depacketizer_sr_shift <= 1'd1;
				if ((rx_depacketizer_count == 3'd7)) begin
					if (1'd0) begin
						rx_depacketizer_count_liteethudprx_next_value0 <= (rx_depacketizer_count + 1'd1);
						rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
						liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			rx_depacketizer_source_valid <= (rx_depacketizer_sink_valid | rx_depacketizer_sink_d_last);
			rx_depacketizer_source_last <= (rx_depacketizer_sink_last | rx_depacketizer_sink_d_last);
			rx_depacketizer_sink_ready <= rx_depacketizer_source_ready;
			rx_depacketizer_source_payload_data <= rx_depacketizer_sink_d_payload_data[7:0];
			rx_depacketizer_source_payload_data[7] <= rx_depacketizer_sink_payload_data;
			if (rx_depacketizer_fsm_from_idle) begin
				rx_depacketizer_source_valid <= rx_depacketizer_sink_d_last;
				rx_depacketizer_sink_ready <= 1'd1;
				if (rx_depacketizer_sink_valid) begin
					rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd0;
					rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd1;
					rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((rx_depacketizer_source_valid & rx_depacketizer_source_ready)) begin
				if (rx_depacketizer_source_last) begin
					liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			rx_depacketizer_source_valid <= (rx_depacketizer_sink_valid | rx_depacketizer_sink_d_last);
			rx_depacketizer_source_last <= (rx_depacketizer_sink_last | rx_depacketizer_sink_d_last);
			rx_depacketizer_sink_ready <= rx_depacketizer_source_ready;
			rx_depacketizer_source_payload_data <= rx_depacketizer_sink_payload_data;
			if ((rx_depacketizer_source_valid & rx_depacketizer_source_ready)) begin
				if (rx_depacketizer_source_last) begin
					liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_depacketizer_sink_ready <= 1'd1;
			rx_depacketizer_count_liteethudprx_next_value0 <= 1'd1;
			rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
			if (rx_depacketizer_sink_valid) begin
				rx_depacketizer_sr_shift <= 1'd1;
				rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd1;
				rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd2;
					end else begin
						liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	rx_source_source_valid <= 1'd0;
	rx_depacketizer_source_ready <= 1'd0;
	liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 2'd0;
	liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= liteethudpipcore_liteethudp_liteethudprx_fsm_state;
	case (liteethudpipcore_liteethudp_liteethudprx_fsm_state)
		1'd1: begin
			if (rx_valid) begin
				liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 2'd2;
			end else begin
				liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 2'd3;
			end
		end
		2'd2: begin
			rx_source_source_valid <= rx_depacketizer_source_valid;
			rx_depacketizer_source_ready <= rx_source_source_ready;
			if (((rx_source_source_valid & rx_source_source_last) & rx_source_source_ready)) begin
				liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			rx_depacketizer_source_ready <= 1'd1;
			if (((rx_depacketizer_source_valid & rx_depacketizer_source_last) & rx_depacketizer_source_ready)) begin
				liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			rx_depacketizer_source_ready <= 1'd1;
			if (rx_depacketizer_source_valid) begin
				rx_depacketizer_source_ready <= 1'd0;
				liteethudpipcore_liteethudp_liteethudprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign internal_port_sink_valid = user_port_sink_valid;
assign user_port_sink_ready = internal_port_sink_ready;
assign internal_port_sink_first = user_port_sink_first;
assign internal_port_sink_last = user_port_sink_last;
assign internal_port_sink_payload_data = user_port_sink_payload_data;
assign internal_port_sink_payload_error = user_port_sink_payload_error;
assign internal_port_sink_param_src_port = user_port_sink_param_src_port;
assign internal_port_sink_param_dst_port = user_port_sink_param_dst_port;
assign internal_port_sink_param_ip_address = user_port_sink_param_ip_address;
assign internal_port_sink_param_length = user_port_sink_param_length;
assign user_port_source_valid = internal_port_source_valid;
assign internal_port_source_ready = user_port_source_ready;
assign user_port_source_first = internal_port_source_first;
assign user_port_source_last = internal_port_source_last;
assign user_port_source_payload_data = internal_port_source_payload_data;
assign user_port_source_payload_error = internal_port_source_payload_error;
assign user_port_source_param_src_port = internal_port_source_param_src_port;
assign user_port_source_param_dst_port = internal_port_source_param_dst_port;
assign user_port_source_param_ip_address = internal_port_source_param_ip_address;
assign user_port_source_param_length = internal_port_source_param_length;
always @(*) begin
	liteethudpipcore_liteethudp_sel <= 1'd0;
	case (crossbar_sink_param_dst_port)
		13'd6000: begin
			liteethudpipcore_liteethudp_sel <= 1'd1;
		end
		default: begin
			liteethudpipcore_liteethudp_sel <= 1'd0;
		end
	endcase
end
assign crossbar_source_valid = internal_port_sink_valid;
assign internal_port_sink_ready = crossbar_source_ready;
assign crossbar_source_first = internal_port_sink_first;
assign crossbar_source_last = internal_port_sink_last;
assign crossbar_source_payload_data = internal_port_sink_payload_data;
assign crossbar_source_payload_error = internal_port_sink_payload_error;
assign crossbar_source_param_src_port = internal_port_sink_param_src_port;
assign crossbar_source_param_dst_port = internal_port_sink_param_dst_port;
assign crossbar_source_param_ip_address = internal_port_sink_param_ip_address;
assign crossbar_source_param_length = internal_port_sink_param_length;
assign internal_port_source_valid = crossbar_sink_valid;
assign crossbar_sink_ready = internal_port_source_ready;
assign internal_port_source_first = crossbar_sink_first;
assign internal_port_source_last = crossbar_sink_last;
assign internal_port_source_payload_data = crossbar_sink_payload_data;
assign internal_port_source_payload_error = crossbar_sink_payload_error;
assign internal_port_source_param_src_port = crossbar_sink_param_src_port;
assign internal_port_source_param_dst_port = crossbar_sink_param_dst_port;
assign internal_port_source_param_ip_address = crossbar_sink_param_ip_address;
assign internal_port_source_param_length = crossbar_sink_param_length;
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[0];
assign csrbank0_reset0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 1'd0));
assign csrbank0_reset0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 1'd0));
assign csrbank0_scratch3_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch3_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 1'd1));
assign csrbank0_scratch3_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 1'd1));
assign csrbank0_scratch2_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch2_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 2'd2));
assign csrbank0_scratch2_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 2'd2));
assign csrbank0_scratch1_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch1_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 2'd3));
assign csrbank0_scratch1_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 2'd3));
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd4));
assign csrbank0_scratch0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd4));
assign csrbank0_bus_errors3_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors3_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd5));
assign csrbank0_bus_errors3_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd5));
assign csrbank0_bus_errors2_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors2_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd6));
assign csrbank0_bus_errors2_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd6));
assign csrbank0_bus_errors1_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors1_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd7));
assign csrbank0_bus_errors1_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd7));
assign csrbank0_bus_errors0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 4'd8));
assign csrbank0_bus_errors0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 4'd8));
assign csrbank0_reset0_w = udpcore_reset_storage;
assign csrbank0_scratch3_w = udpcore_scratch_storage[31:24];
assign csrbank0_scratch2_w = udpcore_scratch_storage[23:16];
assign csrbank0_scratch1_w = udpcore_scratch_storage[15:8];
assign csrbank0_scratch0_w = udpcore_scratch_storage[7:0];
assign csrbank0_bus_errors3_w = udpcore_bus_errors_status[31:24];
assign csrbank0_bus_errors2_w = udpcore_bus_errors_status[23:16];
assign csrbank0_bus_errors1_w = udpcore_bus_errors_status[15:8];
assign csrbank0_bus_errors0_w = udpcore_bus_errors_status[7:0];
assign udpcore_bus_errors_we = csrbank0_bus_errors0_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_crg_reset0_r = interface1_bank_bus_dat_w[0];
assign csrbank1_crg_reset0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_crg_reset0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_rx_inband_status_r = interface1_bank_bus_dat_w[2:0];
assign csrbank1_rx_inband_status_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_rx_inband_status_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_mdio_w0_r = interface1_bank_bus_dat_w[2:0];
assign csrbank1_mdio_w0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_mdio_w0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_mdio_r_r = interface1_bank_bus_dat_w[0];
assign csrbank1_mdio_r_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 2'd3));
assign csrbank1_mdio_r_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 2'd3));
assign csrbank1_crg_reset0_w = ethphy_reset_storage;
always @(*) begin
	ethphy_liteethphyrgmiirx_status <= 3'd0;
	ethphy_liteethphyrgmiirx_status[0] <= ethphy_liteethphyrgmiirx_link_status;
	ethphy_liteethphyrgmiirx_status[1] <= ethphy_liteethphyrgmiirx_clock_speed;
	ethphy_liteethphyrgmiirx_status[2] <= ethphy_liteethphyrgmiirx_duplex_status;
end
assign csrbank1_rx_inband_status_w = ethphy_liteethphyrgmiirx_status[2:0];
assign ethphy_liteethphyrgmiirx_we = csrbank1_rx_inband_status_we;
assign ethphy_mdio_mdc = ethphy_mdio_storage[0];
assign ethphy_mdio_oe = ethphy_mdio_storage[1];
assign ethphy_mdio_w = ethphy_mdio_storage[2];
assign csrbank1_mdio_w0_w = ethphy_mdio_storage[2:0];
assign csrbank1_mdio_r_w = ethphy_mdio_status;
assign ethphy_mdio_we = csrbank1_mdio_r_we;
assign adr = udpcore_adr;
assign we = udpcore_we;
assign dat_w = udpcore_dat_w;
assign udpcore_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign dat_r = (interface0_bank_bus_dat_r | interface1_bank_bus_dat_r);
assign slice_proxy0 = mac_depacketizer_header[111:96];
assign slice_proxy1 = mac_depacketizer_header[111:96];
assign slice_proxy2 = mac_depacketizer_header[95:48];
assign slice_proxy3 = mac_depacketizer_header[95:48];
assign slice_proxy4 = mac_depacketizer_header[95:48];
assign slice_proxy5 = mac_depacketizer_header[95:48];
assign slice_proxy6 = mac_depacketizer_header[95:48];
assign slice_proxy7 = mac_depacketizer_header[95:48];
assign slice_proxy8 = mac_depacketizer_header[47:0];
assign slice_proxy9 = mac_depacketizer_header[47:0];
assign slice_proxy10 = mac_depacketizer_header[47:0];
assign slice_proxy11 = mac_depacketizer_header[47:0];
assign slice_proxy12 = mac_depacketizer_header[47:0];
assign slice_proxy13 = mac_depacketizer_header[47:0];
assign slice_proxy14 = arp_rx_depacketizer_header[39:32];
assign slice_proxy15 = arp_rx_depacketizer_header[15:0];
assign slice_proxy16 = arp_rx_depacketizer_header[15:0];
assign slice_proxy17 = arp_rx_depacketizer_header[63:48];
assign slice_proxy18 = arp_rx_depacketizer_header[63:48];
assign slice_proxy19 = arp_rx_depacketizer_header[31:16];
assign slice_proxy20 = arp_rx_depacketizer_header[31:16];
assign slice_proxy21 = arp_rx_depacketizer_header[47:40];
assign slice_proxy22 = arp_rx_depacketizer_header[143:112];
assign slice_proxy23 = arp_rx_depacketizer_header[143:112];
assign slice_proxy24 = arp_rx_depacketizer_header[143:112];
assign slice_proxy25 = arp_rx_depacketizer_header[143:112];
assign slice_proxy26 = arp_rx_depacketizer_header[111:64];
assign slice_proxy27 = arp_rx_depacketizer_header[111:64];
assign slice_proxy28 = arp_rx_depacketizer_header[111:64];
assign slice_proxy29 = arp_rx_depacketizer_header[111:64];
assign slice_proxy30 = arp_rx_depacketizer_header[111:64];
assign slice_proxy31 = arp_rx_depacketizer_header[111:64];
assign slice_proxy32 = arp_rx_depacketizer_header[223:192];
assign slice_proxy33 = arp_rx_depacketizer_header[223:192];
assign slice_proxy34 = arp_rx_depacketizer_header[223:192];
assign slice_proxy35 = arp_rx_depacketizer_header[223:192];
assign slice_proxy36 = arp_rx_depacketizer_header[191:144];
assign slice_proxy37 = arp_rx_depacketizer_header[191:144];
assign slice_proxy38 = arp_rx_depacketizer_header[191:144];
assign slice_proxy39 = arp_rx_depacketizer_header[191:144];
assign slice_proxy40 = arp_rx_depacketizer_header[191:144];
assign slice_proxy41 = arp_rx_depacketizer_header[191:144];
assign slice_proxy42 = ip_rx_depacketizer_header[95:80];
assign slice_proxy43 = ip_rx_depacketizer_header[95:80];
assign slice_proxy44 = ip_rx_depacketizer_header[47:32];
assign slice_proxy45 = ip_rx_depacketizer_header[47:32];
assign slice_proxy46 = ip_rx_depacketizer_header[3:0];
assign slice_proxy47 = ip_rx_depacketizer_header[79:72];
assign slice_proxy48 = ip_rx_depacketizer_header[127:96];
assign slice_proxy49 = ip_rx_depacketizer_header[127:96];
assign slice_proxy50 = ip_rx_depacketizer_header[127:96];
assign slice_proxy51 = ip_rx_depacketizer_header[127:96];
assign slice_proxy52 = ip_rx_depacketizer_header[159:128];
assign slice_proxy53 = ip_rx_depacketizer_header[159:128];
assign slice_proxy54 = ip_rx_depacketizer_header[159:128];
assign slice_proxy55 = ip_rx_depacketizer_header[159:128];
assign slice_proxy56 = ip_rx_depacketizer_header[31:16];
assign slice_proxy57 = ip_rx_depacketizer_header[31:16];
assign slice_proxy58 = ip_rx_depacketizer_header[71:64];
assign slice_proxy59 = ip_rx_depacketizer_header[7:4];
assign slice_proxy60 = icmp_rx_depacketizer_header[31:16];
assign slice_proxy61 = icmp_rx_depacketizer_header[31:16];
assign slice_proxy62 = icmp_rx_depacketizer_header[15:8];
assign slice_proxy63 = icmp_rx_depacketizer_header[7:0];
assign slice_proxy64 = icmp_rx_depacketizer_header[63:32];
assign slice_proxy65 = icmp_rx_depacketizer_header[63:32];
assign slice_proxy66 = icmp_rx_depacketizer_header[63:32];
assign slice_proxy67 = icmp_rx_depacketizer_header[63:32];
assign slice_proxy68 = rx_depacketizer_header[63:48];
assign slice_proxy69 = rx_depacketizer_header[63:48];
assign slice_proxy70 = rx_depacketizer_header[31:16];
assign slice_proxy71 = rx_depacketizer_header[31:16];
assign slice_proxy72 = rx_depacketizer_header[47:32];
assign slice_proxy73 = rx_depacketizer_header[47:32];
assign slice_proxy74 = rx_depacketizer_header[15:0];
assign slice_proxy75 = rx_depacketizer_header[15:0];
always @(*) begin
	ethphy_mdio_status <= 1'd0;
	ethphy_mdio_status <= ethphy_mdio_r;
	ethphy_mdio_status <= multiregimpl0_regs1;
end
assign mac_ps_preamble_error_toggle_o = multiregimpl1_regs1;
assign mac_ps_crc_error_toggle_o = multiregimpl2_regs1;
assign mac_tx_cdc_produce_rdomain = multiregimpl3_regs1;
assign mac_tx_cdc_consume_wdomain = multiregimpl4_regs1;
assign mac_rx_cdc_produce_rdomain = multiregimpl5_regs1;
assign mac_rx_cdc_consume_wdomain = multiregimpl6_regs1;

always @(posedge eth_rx_clk) begin
	ethphy_liteethphyrgmiirx_rx_ctl_reg <= ethphy_liteethphyrgmiirx_rx_ctl;
	ethphy_liteethphyrgmiirx_rx_data_reg <= ethphy_liteethphyrgmiirx_rx_data;
	ethphy_liteethphyrgmiirx_rx_ctl_reg_d <= ethphy_liteethphyrgmiirx_rx_ctl_reg;
	ethphy_liteethphyrgmiirx_source_valid <= ethphy_liteethphyrgmiirx_rx_ctl_reg[0];
	ethphy_liteethphyrgmiirx_source_payload_data <= ethphy_liteethphyrgmiirx_rx_data_reg;
	if ((ethphy_liteethphyrgmiirx_rx_ctl == 1'd0)) begin
		ethphy_liteethphyrgmiirx_link_status <= ethphy_liteethphyrgmiirx_rx_data[0];
		ethphy_liteethphyrgmiirx_clock_speed <= ethphy_liteethphyrgmiirx_rx_data[2:1];
		ethphy_liteethphyrgmiirx_duplex_status <= ethphy_liteethphyrgmiirx_rx_data[3];
	end
	liteethudpipcore_liteethmac_liteethmacpreamblechecker_state <= liteethudpipcore_liteethmac_liteethmacpreamblechecker_next_state;
	if (mac_crc32_checker_crc_ce) begin
		mac_crc32_checker_crc_reg <= mac_crc32_checker_crc_next;
	end
	if (mac_crc32_checker_crc_reset) begin
		mac_crc32_checker_crc_reg <= 32'd4294967295;
	end
	if (((mac_crc32_checker_syncfifo_syncfifo_we & mac_crc32_checker_syncfifo_syncfifo_writable) & (~mac_crc32_checker_syncfifo_replace))) begin
		if ((mac_crc32_checker_syncfifo_produce == 3'd4)) begin
			mac_crc32_checker_syncfifo_produce <= 1'd0;
		end else begin
			mac_crc32_checker_syncfifo_produce <= (mac_crc32_checker_syncfifo_produce + 1'd1);
		end
	end
	if (mac_crc32_checker_syncfifo_do_read) begin
		if ((mac_crc32_checker_syncfifo_consume == 3'd4)) begin
			mac_crc32_checker_syncfifo_consume <= 1'd0;
		end else begin
			mac_crc32_checker_syncfifo_consume <= (mac_crc32_checker_syncfifo_consume + 1'd1);
		end
	end
	if (((mac_crc32_checker_syncfifo_syncfifo_we & mac_crc32_checker_syncfifo_syncfifo_writable) & (~mac_crc32_checker_syncfifo_replace))) begin
		if ((~mac_crc32_checker_syncfifo_do_read)) begin
			mac_crc32_checker_syncfifo_level <= (mac_crc32_checker_syncfifo_level + 1'd1);
		end
	end else begin
		if (mac_crc32_checker_syncfifo_do_read) begin
			mac_crc32_checker_syncfifo_level <= (mac_crc32_checker_syncfifo_level - 1'd1);
		end
	end
	if (mac_crc32_checker_fifo_reset) begin
		mac_crc32_checker_syncfifo_level <= 3'd0;
		mac_crc32_checker_syncfifo_produce <= 3'd0;
		mac_crc32_checker_syncfifo_consume <= 3'd0;
	end
	liteethudpipcore_liteethmac_liteethmaccrc32checker_state <= liteethudpipcore_liteethmac_liteethmaccrc32checker_next_state;
	if (mac_ps_preamble_error_i) begin
		mac_ps_preamble_error_toggle_i <= (~mac_ps_preamble_error_toggle_i);
	end
	if (mac_ps_crc_error_i) begin
		mac_ps_crc_error_toggle_i <= (~mac_ps_crc_error_toggle_i);
	end
	mac_rx_cdc_graycounter0_q_binary <= mac_rx_cdc_graycounter0_q_next_binary;
	mac_rx_cdc_graycounter0_q <= mac_rx_cdc_graycounter0_q_next;
	if (eth_rx_rst) begin
		ethphy_liteethphyrgmiirx_source_valid <= 1'd0;
		ethphy_liteethphyrgmiirx_link_status <= 1'd0;
		ethphy_liteethphyrgmiirx_clock_speed <= 1'd0;
		ethphy_liteethphyrgmiirx_duplex_status <= 1'd0;
		ethphy_liteethphyrgmiirx_rx_ctl_reg <= 2'd0;
		ethphy_liteethphyrgmiirx_rx_data_reg <= 8'd0;
		ethphy_liteethphyrgmiirx_rx_ctl_reg_d <= 2'd0;
		mac_crc32_checker_crc_reg <= 32'd4294967295;
		mac_crc32_checker_syncfifo_level <= 3'd0;
		mac_crc32_checker_syncfifo_produce <= 3'd0;
		mac_crc32_checker_syncfifo_consume <= 3'd0;
		mac_rx_cdc_graycounter0_q <= 7'd0;
		mac_rx_cdc_graycounter0_q_binary <= 7'd0;
		liteethudpipcore_liteethmac_liteethmacpreamblechecker_state <= 1'd0;
		liteethudpipcore_liteethmac_liteethmaccrc32checker_state <= 2'd0;
	end
	multiregimpl6_regs0 <= mac_rx_cdc_graycounter1_q;
	multiregimpl6_regs1 <= multiregimpl6_regs0;
end

always @(posedge eth_tx_clk) begin
	liteethudpipcore_liteethmac_liteethmacgap_state <= liteethudpipcore_liteethmac_liteethmacgap_next_state;
	if (mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce) begin
		mac_tx_gap_inserter_counter <= mac_tx_gap_inserter_counter_liteethmacgap_next_value;
	end
	liteethudpipcore_liteethmac_liteethmacpreambleinserter_state <= liteethudpipcore_liteethmac_liteethmacpreambleinserter_next_state;
	if (mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce) begin
		mac_preamble_inserter_count <= mac_preamble_inserter_count_liteethmacpreambleinserter_next_value;
	end
	if (mac_crc32_inserter_is_ongoing0) begin
		mac_crc32_inserter_cnt <= 2'd3;
	end else begin
		if ((mac_crc32_inserter_is_ongoing1 & (~mac_crc32_inserter_cnt_done))) begin
			mac_crc32_inserter_cnt <= (mac_crc32_inserter_cnt - mac_crc32_inserter_source_ready);
		end
	end
	if (mac_crc32_inserter_ce) begin
		mac_crc32_inserter_reg <= mac_crc32_inserter_next;
	end
	if (mac_crc32_inserter_reset) begin
		mac_crc32_inserter_reg <= 32'd4294967295;
	end
	liteethudpipcore_liteethmac_liteethmaccrc32inserter_state <= liteethudpipcore_liteethmac_liteethmaccrc32inserter_next_state;
	liteethudpipcore_liteethmac_liteethmacpaddinginserter_state <= liteethudpipcore_liteethmac_liteethmacpaddinginserter_next_state;
	if (mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce) begin
		mac_padding_inserter_counter <= mac_padding_inserter_counter_liteethmacpaddinginserter_next_value;
	end
	mac_tx_cdc_graycounter1_q_binary <= mac_tx_cdc_graycounter1_q_next_binary;
	mac_tx_cdc_graycounter1_q <= mac_tx_cdc_graycounter1_q_next;
	if (eth_tx_rst) begin
		mac_crc32_inserter_reg <= 32'd4294967295;
		mac_crc32_inserter_cnt <= 2'd3;
		mac_padding_inserter_counter <= 16'd0;
		mac_tx_cdc_graycounter1_q <= 7'd0;
		mac_tx_cdc_graycounter1_q_binary <= 7'd0;
		liteethudpipcore_liteethmac_liteethmacgap_state <= 1'd0;
		liteethudpipcore_liteethmac_liteethmacpreambleinserter_state <= 2'd0;
		liteethudpipcore_liteethmac_liteethmaccrc32inserter_state <= 2'd0;
		liteethudpipcore_liteethmac_liteethmacpaddinginserter_state <= 1'd0;
	end
	multiregimpl3_regs0 <= mac_tx_cdc_graycounter0_q;
	multiregimpl3_regs1 <= multiregimpl3_regs0;
end

always @(posedge por_clk) begin
	int_rst <= sys_reset;
end

always @(posedge sys_clk) begin
	if ((udpcore_bus_errors != 32'd4294967295)) begin
		if (udpcore_bus_error) begin
			udpcore_bus_errors <= (udpcore_bus_errors + 1'd1);
		end
	end
	wishbone2csr_state <= wishbone2csr_next_state;
	if (mac_ps_preamble_error_o) begin
		mac_preamble_errors_status <= (mac_preamble_errors_status + 1'd1);
	end
	if (mac_ps_crc_error_o) begin
		mac_crc_errors_status <= (mac_crc_errors_status + 1'd1);
	end
	mac_ps_preamble_error_toggle_o_r <= mac_ps_preamble_error_toggle_o;
	mac_ps_crc_error_toggle_o_r <= mac_ps_crc_error_toggle_o;
	mac_tx_cdc_graycounter0_q_binary <= mac_tx_cdc_graycounter0_q_next_binary;
	mac_tx_cdc_graycounter0_q <= mac_tx_cdc_graycounter0_q_next;
	mac_rx_cdc_graycounter1_q_binary <= mac_rx_cdc_graycounter1_q_next_binary;
	mac_rx_cdc_graycounter1_q <= mac_rx_cdc_graycounter1_q_next;
	case (liteethudpipcore_liteethmac_grant)
		1'd0: begin
			if ((~liteethudpipcore_liteethmac_request[0])) begin
				if (liteethudpipcore_liteethmac_request[1]) begin
					liteethudpipcore_liteethmac_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~liteethudpipcore_liteethmac_request[1])) begin
				if (liteethudpipcore_liteethmac_request[0]) begin
					liteethudpipcore_liteethmac_grant <= 1'd0;
				end
			end
		end
	endcase
	liteethudpipcore_liteethmac_status0_ongoing1 <= ((arp_mac_port_sink_valid | liteethudpipcore_liteethmac_status0_ongoing1) & (~liteethudpipcore_liteethmac_status0_last));
	if (liteethudpipcore_liteethmac_status0_last) begin
		liteethudpipcore_liteethmac_status0_first <= 1'd1;
	end else begin
		if ((arp_mac_port_sink_valid & arp_mac_port_sink_ready)) begin
			liteethudpipcore_liteethmac_status0_first <= 1'd0;
		end
	end
	liteethudpipcore_liteethmac_status1_ongoing1 <= ((ip_mac_port_sink_valid | liteethudpipcore_liteethmac_status1_ongoing1) & (~liteethudpipcore_liteethmac_status1_last));
	if (liteethudpipcore_liteethmac_status1_last) begin
		liteethudpipcore_liteethmac_status1_first <= 1'd1;
	end else begin
		if ((ip_mac_port_sink_valid & ip_mac_port_sink_ready)) begin
			liteethudpipcore_liteethmac_status1_first <= 1'd0;
		end
	end
	if (liteethudpipcore_liteethmac_first) begin
		liteethudpipcore_liteethmac_sel_ongoing <= liteethudpipcore_liteethmac_sel0;
	end
	liteethudpipcore_liteethmac_ongoing1 <= ((mac_crossbar_sink_valid | liteethudpipcore_liteethmac_ongoing1) & (~liteethudpipcore_liteethmac_last));
	if (liteethudpipcore_liteethmac_last) begin
		liteethudpipcore_liteethmac_first <= 1'd1;
	end else begin
		if ((mac_crossbar_sink_valid & mac_crossbar_sink_ready)) begin
			liteethudpipcore_liteethmac_first <= 1'd0;
		end
	end
	if (mac_packetizer_sr_load) begin
		mac_packetizer_sr <= mac_packetizer_header;
	end
	if (mac_packetizer_sr_shift) begin
		mac_packetizer_sr <= mac_packetizer_sr[111:8];
	end
	if (mac_packetizer_source_ready) begin
		mac_packetizer_sink_d_valid <= mac_packetizer_sink_valid;
		mac_packetizer_sink_d_ready <= mac_packetizer_sink_ready;
		mac_packetizer_sink_d_first <= mac_packetizer_sink_first;
		mac_packetizer_sink_d_last <= mac_packetizer_sink_last;
		mac_packetizer_sink_d_payload_ethernet_type <= mac_packetizer_sink_payload_ethernet_type;
		mac_packetizer_sink_d_payload_sender_mac <= mac_packetizer_sink_payload_sender_mac;
		mac_packetizer_sink_d_payload_target_mac <= mac_packetizer_sink_payload_target_mac;
		mac_packetizer_sink_d_payload_data <= mac_packetizer_sink_payload_data;
		mac_packetizer_sink_d_payload_last_be <= mac_packetizer_sink_payload_last_be;
		mac_packetizer_sink_d_payload_error <= mac_packetizer_sink_payload_error;
	end
	liteethudpipcore_liteethmac_liteethmacpacketizer_state <= liteethudpipcore_liteethmac_liteethmacpacketizer_next_state;
	if (mac_packetizer_count_liteethmacpacketizer_next_value_ce0) begin
		mac_packetizer_count <= mac_packetizer_count_liteethmacpacketizer_next_value0;
	end
	if (mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1) begin
		mac_packetizer_fsm_from_idle <= mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1;
	end
	if (mac_depacketizer_sr_shift) begin
		mac_depacketizer_sr <= {mac_depacketizer_sink_payload_data, mac_depacketizer_sr[111:8]};
	end
	if (mac_depacketizer_sr_shift_leftover) begin
		mac_depacketizer_sr <= {mac_depacketizer_sink_payload_data, mac_depacketizer_sr[111:0]};
	end
	if ((mac_depacketizer_sink_valid & mac_depacketizer_sink_ready)) begin
		mac_depacketizer_sink_d_valid <= mac_depacketizer_sink_valid;
		mac_depacketizer_sink_d_ready <= mac_depacketizer_sink_ready;
		mac_depacketizer_sink_d_first <= mac_depacketizer_sink_first;
		mac_depacketizer_sink_d_last <= mac_depacketizer_sink_last;
		mac_depacketizer_sink_d_payload_data <= mac_depacketizer_sink_payload_data;
		mac_depacketizer_sink_d_payload_last_be <= mac_depacketizer_sink_payload_last_be;
		mac_depacketizer_sink_d_payload_error <= mac_depacketizer_sink_payload_error;
	end
	liteethudpipcore_liteethmac_liteethmacdepacketizer_state <= liteethudpipcore_liteethmac_liteethmacdepacketizer_next_state;
	if (mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0) begin
		mac_depacketizer_count <= mac_depacketizer_count_liteethmacdepacketizer_next_value0;
	end
	if (mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1) begin
		mac_depacketizer_fsm_from_idle <= mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1;
	end
	if (arp_tx_packetizer_sr_load) begin
		arp_tx_packetizer_sr <= arp_tx_packetizer_header;
	end
	if (arp_tx_packetizer_sr_shift) begin
		arp_tx_packetizer_sr <= arp_tx_packetizer_sr[223:8];
	end
	if (arp_tx_packetizer_source_ready) begin
		arp_tx_packetizer_sink_d_valid <= arp_tx_packetizer_sink_valid;
		arp_tx_packetizer_sink_d_ready <= arp_tx_packetizer_sink_ready;
		arp_tx_packetizer_sink_d_first <= arp_tx_packetizer_sink_first;
		arp_tx_packetizer_sink_d_last <= arp_tx_packetizer_sink_last;
		arp_tx_packetizer_sink_d_payload_data <= arp_tx_packetizer_sink_payload_data;
		arp_tx_packetizer_sink_d_payload_error <= arp_tx_packetizer_sink_payload_error;
		arp_tx_packetizer_sink_d_param_hwsize <= arp_tx_packetizer_sink_param_hwsize;
		arp_tx_packetizer_sink_d_param_hwtype <= arp_tx_packetizer_sink_param_hwtype;
		arp_tx_packetizer_sink_d_param_opcode <= arp_tx_packetizer_sink_param_opcode;
		arp_tx_packetizer_sink_d_param_proto <= arp_tx_packetizer_sink_param_proto;
		arp_tx_packetizer_sink_d_param_protosize <= arp_tx_packetizer_sink_param_protosize;
		arp_tx_packetizer_sink_d_param_sender_ip <= arp_tx_packetizer_sink_param_sender_ip;
		arp_tx_packetizer_sink_d_param_sender_mac <= arp_tx_packetizer_sink_param_sender_mac;
		arp_tx_packetizer_sink_d_param_target_ip <= arp_tx_packetizer_sink_param_target_ip;
		arp_tx_packetizer_sink_d_param_target_mac <= arp_tx_packetizer_sink_param_target_mac;
	end
	liteethudpipcore_liteetharptx_liteetharppacketizer_state <= liteethudpipcore_liteetharptx_liteetharppacketizer_next_state;
	if (arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0) begin
		arp_tx_packetizer_count <= arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0;
	end
	if (arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1) begin
		arp_tx_packetizer_fsm_from_idle <= arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1;
	end
	liteethudpipcore_liteetharptx_fsm_state <= liteethudpipcore_liteetharptx_fsm_next_state;
	if (arp_tx_counter_liteetharp_fsm_next_value_ce) begin
		arp_tx_counter <= arp_tx_counter_liteetharp_fsm_next_value;
	end
	arp_rx_valid <= (((((arp_rx_depacketizer_source_valid & (arp_rx_depacketizer_source_param_hwtype == 1'd1)) & (arp_rx_depacketizer_source_param_proto == 12'd2048)) & (arp_rx_depacketizer_source_param_hwsize == 3'd6)) & (arp_rx_depacketizer_source_param_protosize == 3'd4)) & (arp_rx_depacketizer_source_param_target_ip == 28'd168428844));
	if (arp_rx_depacketizer_sr_shift) begin
		arp_rx_depacketizer_sr <= {arp_rx_depacketizer_sink_payload_data, arp_rx_depacketizer_sr[223:8]};
	end
	if (arp_rx_depacketizer_sr_shift_leftover) begin
		arp_rx_depacketizer_sr <= {arp_rx_depacketizer_sink_payload_data, arp_rx_depacketizer_sr[223:0]};
	end
	if ((arp_rx_depacketizer_sink_valid & arp_rx_depacketizer_sink_ready)) begin
		arp_rx_depacketizer_sink_d_valid <= arp_rx_depacketizer_sink_valid;
		arp_rx_depacketizer_sink_d_ready <= arp_rx_depacketizer_sink_ready;
		arp_rx_depacketizer_sink_d_first <= arp_rx_depacketizer_sink_first;
		arp_rx_depacketizer_sink_d_last <= arp_rx_depacketizer_sink_last;
		arp_rx_depacketizer_sink_d_payload_ethernet_type <= arp_rx_depacketizer_sink_payload_ethernet_type;
		arp_rx_depacketizer_sink_d_payload_sender_mac <= arp_rx_depacketizer_sink_payload_sender_mac;
		arp_rx_depacketizer_sink_d_payload_target_mac <= arp_rx_depacketizer_sink_payload_target_mac;
		arp_rx_depacketizer_sink_d_payload_data <= arp_rx_depacketizer_sink_payload_data;
		arp_rx_depacketizer_sink_d_payload_last_be <= arp_rx_depacketizer_sink_payload_last_be;
		arp_rx_depacketizer_sink_d_payload_error <= arp_rx_depacketizer_sink_payload_error;
	end
	liteethudpipcore_liteetharprx_liteetharpdepacketizer_state <= liteethudpipcore_liteetharprx_liteetharpdepacketizer_next_state;
	if (arp_rx_depacketizer_count_liteetharp_next_value_ce0) begin
		arp_rx_depacketizer_count <= arp_rx_depacketizer_count_liteetharp_next_value0;
	end
	if (arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1) begin
		arp_rx_depacketizer_fsm_from_idle <= arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1;
	end
	liteethudpipcore_liteetharprx_fsm_state <= liteethudpipcore_liteetharprx_fsm_next_state;
	if (arp_table_request_pending_clr) begin
		arp_table_request_pending <= 1'd0;
	end else begin
		if (arp_table_request_pending_set) begin
			arp_table_request_pending <= 1'd1;
		end
	end
	if (arp_table_request_ip_address_reset) begin
		arp_table_request_ip_address <= 1'd0;
	end else begin
		if (arp_table_request_ip_address_update) begin
			arp_table_request_ip_address <= arp_table_request_payload_ip_address;
		end
	end
	if (arp_table_request_counter_reset) begin
		arp_table_request_counter <= 1'd0;
	end else begin
		if (arp_table_request_counter_ce) begin
			arp_table_request_counter <= (arp_table_request_counter + 1'd1);
		end
	end
	if (arp_table_update) begin
		arp_table_cached_valid <= 1'd1;
		arp_table_cached_ip_address <= arp_table_sink_payload_ip_address;
		arp_table_cached_mac_address <= arp_table_sink_payload_mac_address;
	end else begin
		if (arp_table_cached_timer_done) begin
			arp_table_cached_valid <= 1'd0;
		end
	end
	if (arp_table_request_timer_wait) begin
		if ((~arp_table_request_timer_done)) begin
			arp_table_request_timer_count <= (arp_table_request_timer_count - 1'd1);
		end
	end else begin
		arp_table_request_timer_count <= 24'd12500000;
	end
	if (arp_table_cached_timer_wait) begin
		if ((~arp_table_cached_timer_done)) begin
			arp_table_cached_timer_count <= (arp_table_cached_timer_count - 1'd1);
		end
	end else begin
		arp_table_cached_timer_count <= 31'd1250000000;
	end
	liteethudpipcore_state <= liteethudpipcore_next_state;
	if (ip_tx_ce) begin
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next0 <= {ip_tx_liteethipv4checksum0, (ip_tx_liteethipv4checksum_s_next0[15:0] + ip_tx_liteethipv4checksum_s_next0[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next1 <= {ip_tx_liteethipv4checksum1, (ip_tx_liteethipv4checksum_s_next1[15:0] + ip_tx_liteethipv4checksum_s_next1[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next2 <= {ip_tx_liteethipv4checksum2, (ip_tx_liteethipv4checksum_s_next2[15:0] + ip_tx_liteethipv4checksum_s_next2[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next3 <= {ip_tx_liteethipv4checksum3, (ip_tx_liteethipv4checksum_s_next3[15:0] + ip_tx_liteethipv4checksum_s_next3[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next4 <= {ip_tx_liteethipv4checksum4, (ip_tx_liteethipv4checksum_s_next4[15:0] + ip_tx_liteethipv4checksum_s_next4[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next5 <= {ip_tx_liteethipv4checksum5, (ip_tx_liteethipv4checksum_s_next5[15:0] + ip_tx_liteethipv4checksum_s_next5[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next6 <= {ip_tx_liteethipv4checksum6, (ip_tx_liteethipv4checksum_s_next6[15:0] + ip_tx_liteethipv4checksum_s_next6[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next7 <= {ip_tx_liteethipv4checksum7, (ip_tx_liteethipv4checksum_s_next7[15:0] + ip_tx_liteethipv4checksum_s_next7[16])};
		end
		if ((~ip_tx_liteethipv4checksum_done)) begin
			ip_tx_liteethipv4checksum_r_next8 <= {ip_tx_liteethipv4checksum8, (ip_tx_liteethipv4checksum_s_next8[15:0] + ip_tx_liteethipv4checksum_s_next8[16])};
		end
		if (ip_tx_liteethipv4checksum_counter_ce) begin
			ip_tx_liteethipv4checksum_counter <= (ip_tx_liteethipv4checksum_counter + 1'd1);
		end
	end
	if (ip_tx_reset) begin
		ip_tx_liteethipv4checksum_counter <= 4'd0;
	end
	if (ip_tx_packetizer_sr_load) begin
		ip_tx_packetizer_sr <= ip_tx_packetizer_header;
	end
	if (ip_tx_packetizer_sr_shift) begin
		ip_tx_packetizer_sr <= ip_tx_packetizer_sr[159:8];
	end
	if (ip_tx_packetizer_source_ready) begin
		ip_tx_packetizer_sink_d_valid <= ip_tx_packetizer_sink_valid;
		ip_tx_packetizer_sink_d_ready <= ip_tx_packetizer_sink_ready;
		ip_tx_packetizer_sink_d_first <= ip_tx_packetizer_sink_first;
		ip_tx_packetizer_sink_d_last <= ip_tx_packetizer_sink_last;
		ip_tx_packetizer_sink_d_payload_data <= ip_tx_packetizer_sink_payload_data;
		ip_tx_packetizer_sink_d_payload_error <= ip_tx_packetizer_sink_payload_error;
		ip_tx_packetizer_sink_d_param_checksum <= ip_tx_packetizer_sink_param_checksum;
		ip_tx_packetizer_sink_d_param_identification <= ip_tx_packetizer_sink_param_identification;
		ip_tx_packetizer_sink_d_param_ihl <= ip_tx_packetizer_sink_param_ihl;
		ip_tx_packetizer_sink_d_param_protocol <= ip_tx_packetizer_sink_param_protocol;
		ip_tx_packetizer_sink_d_param_sender_ip <= ip_tx_packetizer_sink_param_sender_ip;
		ip_tx_packetizer_sink_d_param_target_ip <= ip_tx_packetizer_sink_param_target_ip;
		ip_tx_packetizer_sink_d_param_total_length <= ip_tx_packetizer_sink_param_total_length;
		ip_tx_packetizer_sink_d_param_ttl <= ip_tx_packetizer_sink_param_ttl;
		ip_tx_packetizer_sink_d_param_version <= ip_tx_packetizer_sink_param_version;
	end
	liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_state <= liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_next_state;
	if (ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0) begin
		ip_tx_packetizer_count <= ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0;
	end
	if (ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1) begin
		ip_tx_packetizer_fsm_from_idle <= ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1;
	end
	liteethudpipcore_liteethip_liteethiptx_fsm_state <= liteethudpipcore_liteethip_liteethiptx_fsm_next_state;
	if (ip_tx_target_mac_liteethip_fsm_next_value_ce) begin
		ip_tx_target_mac <= ip_tx_target_mac_liteethip_fsm_next_value;
	end
	ip_rx_valid <= ((((ip_rx_depacketizer_source_valid & (ip_rx_depacketizer_source_param_target_ip == 28'd168428844)) & (ip_rx_depacketizer_source_param_version == 3'd4)) & (ip_rx_depacketizer_source_param_ihl == 3'd5)) & (ip_rx_liteethipv4checksum_value == 1'd0));
	if (ip_rx_depacketizer_sr_shift) begin
		ip_rx_depacketizer_sr <= {ip_rx_depacketizer_sink_payload_data, ip_rx_depacketizer_sr[159:8]};
	end
	if (ip_rx_depacketizer_sr_shift_leftover) begin
		ip_rx_depacketizer_sr <= {ip_rx_depacketizer_sink_payload_data, ip_rx_depacketizer_sr[159:0]};
	end
	if ((ip_rx_depacketizer_sink_valid & ip_rx_depacketizer_sink_ready)) begin
		ip_rx_depacketizer_sink_d_valid <= ip_rx_depacketizer_sink_valid;
		ip_rx_depacketizer_sink_d_ready <= ip_rx_depacketizer_sink_ready;
		ip_rx_depacketizer_sink_d_first <= ip_rx_depacketizer_sink_first;
		ip_rx_depacketizer_sink_d_last <= ip_rx_depacketizer_sink_last;
		ip_rx_depacketizer_sink_d_payload_ethernet_type <= ip_rx_depacketizer_sink_payload_ethernet_type;
		ip_rx_depacketizer_sink_d_payload_sender_mac <= ip_rx_depacketizer_sink_payload_sender_mac;
		ip_rx_depacketizer_sink_d_payload_target_mac <= ip_rx_depacketizer_sink_payload_target_mac;
		ip_rx_depacketizer_sink_d_payload_data <= ip_rx_depacketizer_sink_payload_data;
		ip_rx_depacketizer_sink_d_payload_last_be <= ip_rx_depacketizer_sink_payload_last_be;
		ip_rx_depacketizer_sink_d_payload_error <= ip_rx_depacketizer_sink_payload_error;
	end
	liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_state <= liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_next_state;
	if (ip_rx_depacketizer_count_liteethip_next_value_ce0) begin
		ip_rx_depacketizer_count <= ip_rx_depacketizer_count_liteethip_next_value0;
	end
	if (ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1) begin
		ip_rx_depacketizer_fsm_from_idle <= ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1;
	end
	if (ip_rx_ce) begin
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next0 <= {ip_rx_liteethipv4checksum0, (ip_rx_liteethipv4checksum_s_next0[15:0] + ip_rx_liteethipv4checksum_s_next0[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next1 <= {ip_rx_liteethipv4checksum1, (ip_rx_liteethipv4checksum_s_next1[15:0] + ip_rx_liteethipv4checksum_s_next1[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next2 <= {ip_rx_liteethipv4checksum2, (ip_rx_liteethipv4checksum_s_next2[15:0] + ip_rx_liteethipv4checksum_s_next2[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next3 <= {ip_rx_liteethipv4checksum3, (ip_rx_liteethipv4checksum_s_next3[15:0] + ip_rx_liteethipv4checksum_s_next3[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next4 <= {ip_rx_liteethipv4checksum4, (ip_rx_liteethipv4checksum_s_next4[15:0] + ip_rx_liteethipv4checksum_s_next4[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next5 <= {ip_rx_liteethipv4checksum5, (ip_rx_liteethipv4checksum_s_next5[15:0] + ip_rx_liteethipv4checksum_s_next5[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next6 <= {ip_rx_liteethipv4checksum6, (ip_rx_liteethipv4checksum_s_next6[15:0] + ip_rx_liteethipv4checksum_s_next6[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next7 <= {ip_rx_liteethipv4checksum7, (ip_rx_liteethipv4checksum_s_next7[15:0] + ip_rx_liteethipv4checksum_s_next7[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next8 <= {ip_rx_liteethipv4checksum8, (ip_rx_liteethipv4checksum_s_next8[15:0] + ip_rx_liteethipv4checksum_s_next8[16])};
		end
		if ((~ip_rx_liteethipv4checksum_done)) begin
			ip_rx_liteethipv4checksum_r_next9 <= {ip_rx_liteethipv4checksum9, (ip_rx_liteethipv4checksum_s_next9[15:0] + ip_rx_liteethipv4checksum_s_next9[16])};
		end
		if (ip_rx_liteethipv4checksum_counter_ce) begin
			ip_rx_liteethipv4checksum_counter <= (ip_rx_liteethipv4checksum_counter + 1'd1);
		end
	end
	if (ip_rx_reset) begin
		ip_rx_liteethipv4checksum_counter <= 4'd0;
	end
	liteethudpipcore_liteethip_liteethiprx_fsm_state <= liteethudpipcore_liteethip_liteethiprx_fsm_next_state;
	case (liteethudpipcore_liteethip_grant)
		1'd0: begin
			if ((~liteethudpipcore_liteethip_request[0])) begin
				if (liteethudpipcore_liteethip_request[1]) begin
					liteethudpipcore_liteethip_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~liteethudpipcore_liteethip_request[1])) begin
				if (liteethudpipcore_liteethip_request[0]) begin
					liteethudpipcore_liteethip_grant <= 1'd0;
				end
			end
		end
	endcase
	liteethudpipcore_liteethip_status0_ongoing1 <= ((icmp_sink_valid | liteethudpipcore_liteethip_status0_ongoing1) & (~liteethudpipcore_liteethip_status0_last));
	if (liteethudpipcore_liteethip_status0_last) begin
		liteethudpipcore_liteethip_status0_first <= 1'd1;
	end else begin
		if ((icmp_sink_valid & icmp_sink_ready)) begin
			liteethudpipcore_liteethip_status0_first <= 1'd0;
		end
	end
	liteethudpipcore_liteethip_status1_ongoing1 <= ((ip_port_sink_valid | liteethudpipcore_liteethip_status1_ongoing1) & (~liteethudpipcore_liteethip_status1_last));
	if (liteethudpipcore_liteethip_status1_last) begin
		liteethudpipcore_liteethip_status1_first <= 1'd1;
	end else begin
		if ((ip_port_sink_valid & ip_port_sink_ready)) begin
			liteethudpipcore_liteethip_status1_first <= 1'd0;
		end
	end
	if (liteethudpipcore_liteethip_first) begin
		liteethudpipcore_liteethip_sel_ongoing <= liteethudpipcore_liteethip_sel0;
	end
	liteethudpipcore_liteethip_ongoing1 <= ((ip_crossbar_sink_valid | liteethudpipcore_liteethip_ongoing1) & (~liteethudpipcore_liteethip_last));
	if (liteethudpipcore_liteethip_last) begin
		liteethudpipcore_liteethip_first <= 1'd1;
	end else begin
		if ((ip_crossbar_sink_valid & ip_crossbar_sink_ready)) begin
			liteethudpipcore_liteethip_first <= 1'd0;
		end
	end
	if (icmp_tx_packetizer_sr_load) begin
		icmp_tx_packetizer_sr <= icmp_tx_packetizer_header;
	end
	if (icmp_tx_packetizer_sr_shift) begin
		icmp_tx_packetizer_sr <= icmp_tx_packetizer_sr[63:8];
	end
	if (icmp_tx_packetizer_source_ready) begin
		icmp_tx_packetizer_sink_d_valid <= icmp_tx_packetizer_sink_valid;
		icmp_tx_packetizer_sink_d_ready <= icmp_tx_packetizer_sink_ready;
		icmp_tx_packetizer_sink_d_first <= icmp_tx_packetizer_sink_first;
		icmp_tx_packetizer_sink_d_last <= icmp_tx_packetizer_sink_last;
		icmp_tx_packetizer_sink_d_payload_data <= icmp_tx_packetizer_sink_payload_data;
		icmp_tx_packetizer_sink_d_payload_error <= icmp_tx_packetizer_sink_payload_error;
		icmp_tx_packetizer_sink_d_param_checksum <= icmp_tx_packetizer_sink_param_checksum;
		icmp_tx_packetizer_sink_d_param_code <= icmp_tx_packetizer_sink_param_code;
		icmp_tx_packetizer_sink_d_param_msgtype <= icmp_tx_packetizer_sink_param_msgtype;
		icmp_tx_packetizer_sink_d_param_quench <= icmp_tx_packetizer_sink_param_quench;
	end
	liteethudpipcore_liteethicmptx_liteethicmppacketizer_state <= liteethudpipcore_liteethicmptx_liteethicmppacketizer_next_state;
	if (icmp_tx_packetizer_count_liteethicmptx_next_value_ce0) begin
		icmp_tx_packetizer_count <= icmp_tx_packetizer_count_liteethicmptx_next_value0;
	end
	if (icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1) begin
		icmp_tx_packetizer_fsm_from_idle <= icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1;
	end
	liteethudpipcore_liteethicmptx_fsm_state <= liteethudpipcore_liteethicmptx_fsm_next_state;
	icmp_rx_valid <= (icmp_rx_depacketizer_source_valid & (icmp_rx_sink_sink_param_protocol == 1'd1));
	if (icmp_rx_depacketizer_sr_shift) begin
		icmp_rx_depacketizer_sr <= {icmp_rx_depacketizer_sink_payload_data, icmp_rx_depacketizer_sr[63:8]};
	end
	if (icmp_rx_depacketizer_sr_shift_leftover) begin
		icmp_rx_depacketizer_sr <= {icmp_rx_depacketizer_sink_payload_data, icmp_rx_depacketizer_sr[63:0]};
	end
	if ((icmp_rx_depacketizer_sink_valid & icmp_rx_depacketizer_sink_ready)) begin
		icmp_rx_depacketizer_sink_d_valid <= icmp_rx_depacketizer_sink_valid;
		icmp_rx_depacketizer_sink_d_ready <= icmp_rx_depacketizer_sink_ready;
		icmp_rx_depacketizer_sink_d_first <= icmp_rx_depacketizer_sink_first;
		icmp_rx_depacketizer_sink_d_last <= icmp_rx_depacketizer_sink_last;
		icmp_rx_depacketizer_sink_d_payload_data <= icmp_rx_depacketizer_sink_payload_data;
		icmp_rx_depacketizer_sink_d_payload_error <= icmp_rx_depacketizer_sink_payload_error;
		icmp_rx_depacketizer_sink_d_param_length <= icmp_rx_depacketizer_sink_param_length;
		icmp_rx_depacketizer_sink_d_param_protocol <= icmp_rx_depacketizer_sink_param_protocol;
		icmp_rx_depacketizer_sink_d_param_ip_address <= icmp_rx_depacketizer_sink_param_ip_address;
	end
	liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_state <= liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_next_state;
	if (icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0) begin
		icmp_rx_depacketizer_count <= icmp_rx_depacketizer_count_liteethicmprx_next_value0;
	end
	if (icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1) begin
		icmp_rx_depacketizer_fsm_from_idle <= icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1;
	end
	liteethudpipcore_liteethicmprx_fsm_state <= liteethudpipcore_liteethicmprx_fsm_next_state;
	if (icmp_echo_buffer_syncfifo_re) begin
		icmp_echo_buffer_readable <= 1'd1;
	end else begin
		if (icmp_echo_buffer_re) begin
			icmp_echo_buffer_readable <= 1'd0;
		end
	end
	if (((icmp_echo_buffer_syncfifo_we & icmp_echo_buffer_syncfifo_writable) & (~icmp_echo_buffer_replace))) begin
		icmp_echo_buffer_produce <= (icmp_echo_buffer_produce + 1'd1);
	end
	if (icmp_echo_buffer_do_read) begin
		icmp_echo_buffer_consume <= (icmp_echo_buffer_consume + 1'd1);
	end
	if (((icmp_echo_buffer_syncfifo_we & icmp_echo_buffer_syncfifo_writable) & (~icmp_echo_buffer_replace))) begin
		if ((~icmp_echo_buffer_do_read)) begin
			icmp_echo_buffer_level0 <= (icmp_echo_buffer_level0 + 1'd1);
		end
	end else begin
		if (icmp_echo_buffer_do_read) begin
			icmp_echo_buffer_level0 <= (icmp_echo_buffer_level0 - 1'd1);
		end
	end
	if (tx_packetizer_sr_load) begin
		tx_packetizer_sr <= tx_packetizer_header;
	end
	if (tx_packetizer_sr_shift) begin
		tx_packetizer_sr <= tx_packetizer_sr[63:8];
	end
	if (tx_packetizer_source_ready) begin
		tx_packetizer_sink_d_valid <= tx_packetizer_sink_valid;
		tx_packetizer_sink_d_ready <= tx_packetizer_sink_ready;
		tx_packetizer_sink_d_first <= tx_packetizer_sink_first;
		tx_packetizer_sink_d_last <= tx_packetizer_sink_last;
		tx_packetizer_sink_d_payload_data <= tx_packetizer_sink_payload_data;
		tx_packetizer_sink_d_payload_error <= tx_packetizer_sink_payload_error;
		tx_packetizer_sink_d_param_checksum <= tx_packetizer_sink_param_checksum;
		tx_packetizer_sink_d_param_dst_port <= tx_packetizer_sink_param_dst_port;
		tx_packetizer_sink_d_param_length <= tx_packetizer_sink_param_length;
		tx_packetizer_sink_d_param_src_port <= tx_packetizer_sink_param_src_port;
	end
	liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_state <= liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_next_state;
	if (tx_packetizer_count_liteethudptx_next_value_ce0) begin
		tx_packetizer_count <= tx_packetizer_count_liteethudptx_next_value0;
	end
	if (tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1) begin
		tx_packetizer_fsm_from_idle <= tx_packetizer_fsm_from_idle_liteethudptx_next_value1;
	end
	liteethudpipcore_liteethudp_liteethudptx_fsm_state <= liteethudpipcore_liteethudp_liteethudptx_fsm_next_state;
	rx_valid <= (rx_depacketizer_source_valid & (rx_sink_sink_param_protocol == 5'd17));
	if (rx_depacketizer_sr_shift) begin
		rx_depacketizer_sr <= {rx_depacketizer_sink_payload_data, rx_depacketizer_sr[63:8]};
	end
	if (rx_depacketizer_sr_shift_leftover) begin
		rx_depacketizer_sr <= {rx_depacketizer_sink_payload_data, rx_depacketizer_sr[63:0]};
	end
	if ((rx_depacketizer_sink_valid & rx_depacketizer_sink_ready)) begin
		rx_depacketizer_sink_d_valid <= rx_depacketizer_sink_valid;
		rx_depacketizer_sink_d_ready <= rx_depacketizer_sink_ready;
		rx_depacketizer_sink_d_first <= rx_depacketizer_sink_first;
		rx_depacketizer_sink_d_last <= rx_depacketizer_sink_last;
		rx_depacketizer_sink_d_payload_data <= rx_depacketizer_sink_payload_data;
		rx_depacketizer_sink_d_payload_error <= rx_depacketizer_sink_payload_error;
		rx_depacketizer_sink_d_param_length <= rx_depacketizer_sink_param_length;
		rx_depacketizer_sink_d_param_protocol <= rx_depacketizer_sink_param_protocol;
		rx_depacketizer_sink_d_param_ip_address <= rx_depacketizer_sink_param_ip_address;
	end
	liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_state <= liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_next_state;
	if (rx_depacketizer_count_liteethudprx_next_value_ce0) begin
		rx_depacketizer_count <= rx_depacketizer_count_liteethudprx_next_value0;
	end
	if (rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1) begin
		rx_depacketizer_fsm_from_idle <= rx_depacketizer_fsm_from_idle_liteethudprx_next_value1;
	end
	liteethudpipcore_liteethudp_liteethudprx_fsm_state <= liteethudpipcore_liteethudp_liteethudprx_fsm_next_state;
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[3:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_reset0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch3_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch2_w;
			end
			2'd3: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch1_w;
			end
			3'd4: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
			end
			3'd5: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors3_w;
			end
			3'd6: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors2_w;
			end
			3'd7: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors1_w;
			end
			4'd8: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors0_w;
			end
		endcase
	end
	if (csrbank0_reset0_re) begin
		udpcore_reset_storage <= csrbank0_reset0_r;
	end
	udpcore_reset_re <= csrbank0_reset0_re;
	if (csrbank0_scratch3_re) begin
		udpcore_scratch_storage[31:24] <= csrbank0_scratch3_r;
	end
	if (csrbank0_scratch2_re) begin
		udpcore_scratch_storage[23:16] <= csrbank0_scratch2_r;
	end
	if (csrbank0_scratch1_re) begin
		udpcore_scratch_storage[15:8] <= csrbank0_scratch1_r;
	end
	if (csrbank0_scratch0_re) begin
		udpcore_scratch_storage[7:0] <= csrbank0_scratch0_r;
	end
	udpcore_scratch_re <= csrbank0_scratch0_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[1:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_crg_reset0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_rx_inband_status_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_mdio_w0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_mdio_r_w;
			end
		endcase
	end
	if (csrbank1_crg_reset0_re) begin
		ethphy_reset_storage <= csrbank1_crg_reset0_r;
	end
	ethphy_reset_re <= csrbank1_crg_reset0_re;
	if (csrbank1_mdio_w0_re) begin
		ethphy_mdio_storage[2:0] <= csrbank1_mdio_w0_r;
	end
	ethphy_mdio_re <= csrbank1_mdio_w0_re;
	if (sys_rst) begin
		udpcore_reset_storage <= 1'd0;
		udpcore_reset_re <= 1'd0;
		udpcore_scratch_storage <= 32'd305419896;
		udpcore_scratch_re <= 1'd0;
		udpcore_bus_errors <= 32'd0;
		ethphy_reset_storage <= 1'd0;
		ethphy_reset_re <= 1'd0;
		ethphy_mdio_storage <= 3'd0;
		ethphy_mdio_re <= 1'd0;
		mac_preamble_errors_status <= 32'd0;
		mac_crc_errors_status <= 32'd0;
		mac_tx_cdc_graycounter0_q <= 7'd0;
		mac_tx_cdc_graycounter0_q_binary <= 7'd0;
		mac_rx_cdc_graycounter1_q <= 7'd0;
		mac_rx_cdc_graycounter1_q_binary <= 7'd0;
		mac_packetizer_count <= 4'd0;
		mac_packetizer_sink_d_valid <= 1'd0;
		mac_packetizer_sink_d_ready <= 1'd0;
		mac_packetizer_fsm_from_idle <= 1'd0;
		mac_depacketizer_count <= 4'd0;
		mac_depacketizer_sink_d_valid <= 1'd0;
		mac_depacketizer_sink_d_ready <= 1'd0;
		mac_depacketizer_fsm_from_idle <= 1'd0;
		arp_tx_packetizer_count <= 5'd0;
		arp_tx_packetizer_sink_d_valid <= 1'd0;
		arp_tx_packetizer_sink_d_ready <= 1'd0;
		arp_tx_packetizer_fsm_from_idle <= 1'd0;
		arp_rx_depacketizer_count <= 5'd0;
		arp_rx_depacketizer_sink_d_valid <= 1'd0;
		arp_rx_depacketizer_sink_d_ready <= 1'd0;
		arp_rx_depacketizer_fsm_from_idle <= 1'd0;
		arp_table_request_pending <= 1'd0;
		arp_table_request_timer_count <= 24'd12500000;
		arp_table_request_counter <= 3'd0;
		arp_table_cached_valid <= 1'd0;
		arp_table_cached_timer_count <= 31'd1250000000;
		ip_tx_liteethipv4checksum_counter <= 4'd0;
		ip_tx_packetizer_count <= 5'd0;
		ip_tx_packetizer_sink_d_valid <= 1'd0;
		ip_tx_packetizer_sink_d_ready <= 1'd0;
		ip_tx_packetizer_fsm_from_idle <= 1'd0;
		ip_rx_depacketizer_count <= 5'd0;
		ip_rx_depacketizer_sink_d_valid <= 1'd0;
		ip_rx_depacketizer_sink_d_ready <= 1'd0;
		ip_rx_depacketizer_fsm_from_idle <= 1'd0;
		ip_rx_liteethipv4checksum_counter <= 4'd0;
		icmp_tx_packetizer_count <= 3'd0;
		icmp_tx_packetizer_sink_d_valid <= 1'd0;
		icmp_tx_packetizer_sink_d_ready <= 1'd0;
		icmp_tx_packetizer_fsm_from_idle <= 1'd0;
		icmp_rx_depacketizer_count <= 3'd0;
		icmp_rx_depacketizer_sink_d_valid <= 1'd0;
		icmp_rx_depacketizer_sink_d_ready <= 1'd0;
		icmp_rx_depacketizer_fsm_from_idle <= 1'd0;
		icmp_echo_buffer_readable <= 1'd0;
		icmp_echo_buffer_level0 <= 8'd0;
		icmp_echo_buffer_produce <= 7'd0;
		icmp_echo_buffer_consume <= 7'd0;
		tx_packetizer_count <= 3'd0;
		tx_packetizer_sink_d_valid <= 1'd0;
		tx_packetizer_sink_d_ready <= 1'd0;
		tx_packetizer_fsm_from_idle <= 1'd0;
		rx_depacketizer_count <= 3'd0;
		rx_depacketizer_sink_d_valid <= 1'd0;
		rx_depacketizer_sink_d_ready <= 1'd0;
		rx_depacketizer_fsm_from_idle <= 1'd0;
		wishbone2csr_state <= 1'd0;
		liteethudpipcore_liteethmac_grant <= 1'd0;
		liteethudpipcore_liteethmac_status0_first <= 1'd1;
		liteethudpipcore_liteethmac_status0_ongoing1 <= 1'd0;
		liteethudpipcore_liteethmac_status1_first <= 1'd1;
		liteethudpipcore_liteethmac_status1_ongoing1 <= 1'd0;
		liteethudpipcore_liteethmac_first <= 1'd1;
		liteethudpipcore_liteethmac_ongoing1 <= 1'd0;
		liteethudpipcore_liteethmac_sel_ongoing <= 2'd0;
		liteethudpipcore_liteethmac_liteethmacpacketizer_state <= 2'd0;
		liteethudpipcore_liteethmac_liteethmacdepacketizer_state <= 2'd0;
		liteethudpipcore_liteetharptx_liteetharppacketizer_state <= 2'd0;
		liteethudpipcore_liteetharptx_fsm_state <= 1'd0;
		liteethudpipcore_liteetharprx_liteetharpdepacketizer_state <= 2'd0;
		liteethudpipcore_liteetharprx_fsm_state <= 2'd0;
		liteethudpipcore_state <= 3'd0;
		liteethudpipcore_liteethip_liteethiptx_liteethipv4packetizer_state <= 2'd0;
		liteethudpipcore_liteethip_liteethiptx_fsm_state <= 3'd0;
		liteethudpipcore_liteethip_liteethiprx_liteethipv4depacketizer_state <= 2'd0;
		liteethudpipcore_liteethip_liteethiprx_fsm_state <= 2'd0;
		liteethudpipcore_liteethip_grant <= 1'd0;
		liteethudpipcore_liteethip_status0_first <= 1'd1;
		liteethudpipcore_liteethip_status0_ongoing1 <= 1'd0;
		liteethudpipcore_liteethip_status1_first <= 1'd1;
		liteethudpipcore_liteethip_status1_ongoing1 <= 1'd0;
		liteethudpipcore_liteethip_first <= 1'd1;
		liteethudpipcore_liteethip_ongoing1 <= 1'd0;
		liteethudpipcore_liteethip_sel_ongoing <= 2'd0;
		liteethudpipcore_liteethicmptx_liteethicmppacketizer_state <= 2'd0;
		liteethudpipcore_liteethicmptx_fsm_state <= 1'd0;
		liteethudpipcore_liteethicmprx_liteethicmpdepacketizer_state <= 2'd0;
		liteethudpipcore_liteethicmprx_fsm_state <= 2'd0;
		liteethudpipcore_liteethudp_liteethudptx_liteethudppacketizer_state <= 2'd0;
		liteethudpipcore_liteethudp_liteethudptx_fsm_state <= 1'd0;
		liteethudpipcore_liteethudp_liteethudprx_liteethudpdepacketizer_state <= 2'd0;
		liteethudpipcore_liteethudp_liteethudprx_fsm_state <= 2'd0;
	end
	multiregimpl0_regs0 <= ethphy_mdio_data_r;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= mac_ps_preamble_error_toggle_i;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= mac_ps_crc_error_toggle_i;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl4_regs0 <= mac_tx_cdc_graycounter1_q;
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl5_regs0 <= mac_rx_cdc_graycounter0_q;
	multiregimpl5_regs1 <= multiregimpl5_regs0;
end

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF (
	.A(ethphy_eth_tx_clk_o),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_clocks_tx)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_1 (
	.A(ethphy_tx_ctl_oddrx1f),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_tx_ctl)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_2 (
	.A(ethphy_tx_data_oddrx1f[0]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_tx_data[0])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_3 (
	.A(ethphy_tx_data_oddrx1f[1]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_tx_data[1])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_4 (
	.A(ethphy_tx_data_oddrx1f[2]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_tx_data[2])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_5 (
	.A(ethphy_tx_data_oddrx1f[3]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(rgmii_eth_tx_data[3])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_6 (
	.A(rgmii_eth_rx_ctl),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_ctl_delayf)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_7 (
	.A(rgmii_eth_rx_data[0]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[0])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_8 (
	.A(rgmii_eth_rx_data[1]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[1])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_9 (
	.A(rgmii_eth_rx_data[2]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[2])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_10 (
	.A(rgmii_eth_rx_data[3]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[3])
);

assign rgmii_eth_mdio = ethphy_mdio_data_oe ? ethphy_mdio_data_w : 1'bz;
assign ethphy_mdio_data_r = rgmii_eth_mdio;

reg [11:0] storage[0:4];
reg [11:0] memdat;
always @(posedge eth_rx_clk) begin
	if (mac_crc32_checker_syncfifo_wrport_we)
		storage[mac_crc32_checker_syncfifo_wrport_adr] <= mac_crc32_checker_syncfifo_wrport_dat_w;
	memdat <= storage[mac_crc32_checker_syncfifo_wrport_adr];
end

always @(posedge eth_rx_clk) begin
end

assign mac_crc32_checker_syncfifo_wrport_dat_r = memdat;
assign mac_crc32_checker_syncfifo_rdport_dat_r = storage[mac_crc32_checker_syncfifo_rdport_adr];

reg [11:0] storage_1[0:63];
reg [5:0] memadr;
reg [5:0] memadr_1;
always @(posedge sys_clk) begin
	if (mac_tx_cdc_wrport_we)
		storage_1[mac_tx_cdc_wrport_adr] <= mac_tx_cdc_wrport_dat_w;
	memadr <= mac_tx_cdc_wrport_adr;
end

always @(posedge eth_tx_clk) begin
	memadr_1 <= mac_tx_cdc_rdport_adr;
end

assign mac_tx_cdc_wrport_dat_r = storage_1[memadr];
assign mac_tx_cdc_rdport_dat_r = storage_1[memadr_1];

reg [11:0] storage_2[0:63];
reg [5:0] memadr_2;
reg [5:0] memadr_3;
always @(posedge eth_rx_clk) begin
	if (mac_rx_cdc_wrport_we)
		storage_2[mac_rx_cdc_wrport_adr] <= mac_rx_cdc_wrport_dat_w;
	memadr_2 <= mac_rx_cdc_wrport_adr;
end

always @(posedge sys_clk) begin
	memadr_3 <= mac_rx_cdc_rdport_adr;
end

assign mac_rx_cdc_wrport_dat_r = storage_2[memadr_2];
assign mac_rx_cdc_rdport_dat_r = storage_2[memadr_3];

reg [122:0] storage_3[0:127];
reg [122:0] memdat_1;
reg [122:0] memdat_2;
always @(posedge sys_clk) begin
	if (icmp_echo_buffer_wrport_we)
		storage_3[icmp_echo_buffer_wrport_adr] <= icmp_echo_buffer_wrport_dat_w;
	memdat_1 <= storage_3[icmp_echo_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
	if (icmp_echo_buffer_rdport_re)
		memdat_2 <= storage_3[icmp_echo_buffer_rdport_adr];
end

assign icmp_echo_buffer_wrport_dat_r = memdat_1;
assign icmp_echo_buffer_rdport_dat_r = memdat_2;

ODDRX1F ODDRX1F(
	.D0(1'd1),
	.D1(1'd0),
	.SCLK(eth_tx_clk),
	.Q(ethphy_eth_tx_clk_o)
);

FD1S3BX FD1S3BX(
	.CK(eth_tx_clk),
	.D(1'd0),
	.PD(ethphy_reset),
	.Q(rst10)
);

FD1S3BX FD1S3BX_1(
	.CK(eth_tx_clk),
	.D(rst10),
	.PD(ethphy_reset),
	.Q(eth_tx_rst)
);

FD1S3BX FD1S3BX_2(
	.CK(eth_rx_clk),
	.D(1'd0),
	.PD(ethphy_reset),
	.Q(rst11)
);

FD1S3BX FD1S3BX_3(
	.CK(eth_rx_clk),
	.D(rst11),
	.PD(ethphy_reset),
	.Q(eth_rx_rst)
);

ODDRX1F ODDRX1F_1(
	.D0(ethphy_sink_valid),
	.D1(ethphy_sink_valid),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_ctl_oddrx1f)
);

ODDRX1F ODDRX1F_2(
	.D0(ethphy_sink_payload_data[0]),
	.D1(ethphy_sink_payload_data[4]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[0])
);

ODDRX1F ODDRX1F_3(
	.D0(ethphy_sink_payload_data[1]),
	.D1(ethphy_sink_payload_data[5]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[1])
);

ODDRX1F ODDRX1F_4(
	.D0(ethphy_sink_payload_data[2]),
	.D1(ethphy_sink_payload_data[6]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[2])
);

ODDRX1F ODDRX1F_5(
	.D0(ethphy_sink_payload_data[3]),
	.D1(ethphy_sink_payload_data[7]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[3])
);

IDDRX1F IDDRX1F(
	.D(ethphy_liteethphyrgmiirx_rx_ctl_delayf),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_ctl[0]),
	.Q1(ethphy_liteethphyrgmiirx_rx_ctl[1])
);

IDDRX1F IDDRX1F_1(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[0]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[0]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[4])
);

IDDRX1F IDDRX1F_2(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[1]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[1]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[5])
);

IDDRX1F IDDRX1F_3(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[2]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[2]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[6])
);

IDDRX1F IDDRX1F_4(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[3]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[3]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[7])
);

endmodule
